WARM Assembly of ../tests/biorhythm.as                                  Page 1

Line [ Addr ]
0001           ;;; A biorhythm program -*- mode: asm; compile-command: "waa -l b
0002           ;;; (c) 2010 duane a. bailey for the Great Class of 2010
0003 [0x0000]:         b main
     [0x0000]: 0x0c0000dc = 0b00001100000000000000000011011100
0004           ;;; Change these two dates, if you like:
0005           ;;;             month, day, year
0006 [0x0001]: birthday:.data  12,   15,   1960 ;your birthday
     [0x0001]: 0x000000c
     [0x0002]: 0x000000f
     [0x0003]: 0x00007a8
0007 [0x0004]: today:  .data   12,    9,   2010 ;today
     [0x0004]: 0x000000c
     [0x0005]: 0x0000009
     [0x0006]: 0x00007da
0008                   ;; chart size
0009 [0x0007]:         .equ    lines,21
0010                   
0011                   ;; beginning of modern time (stored here 'cause there are
0012 [0x0007]: firstYear:      .data   1901
     [0x0007]: 0x000076d
0013                   
0014                   ;; header
0015 [0x0008]: hello:  .string "                 Here's your biorhythm, starting
     [0x0008]: 0x0000020
     [0x0009]: 0x0000020
     [0x000a]: 0x0000020
     [0x000b]: 0x0000020
     [0x000c]: 0x0000020
     [0x000d]: 0x0000020
     [0x000e]: 0x0000020
     [0x000f]: 0x0000020
     [0x0010]: 0x0000020
     [0x0011]: 0x0000020
     [0x0012]: 0x0000020
     [0x0013]: 0x0000020
     [0x0014]: 0x0000020
     [0x0015]: 0x0000020
     [0x0016]: 0x0000020
     [0x0017]: 0x0000020
     [0x0018]: 0x0000020
     [0x0019]: 0x0000048
     [0x001a]: 0x0000065
     [0x001b]: 0x0000072
     [0x001c]: 0x0000065
     [0x001d]: 0x0000027
     [0x001e]: 0x0000073
     [0x001f]: 0x0000020
     [0x0020]: 0x0000079
     [0x0021]: 0x000006f
     [0x0022]: 0x0000075
     [0x0023]: 0x0000072
     [0x0024]: 0x0000020
     [0x0025]: 0x0000062
     [0x0026]: 0x0000069
     [0x0027]: 0x000006f
     [0x0028]: 0x0000072
     [0x0029]: 0x0000068
     [0x002a]: 0x0000079
     [0x002b]: 0x0000074
     [0x002c]: 0x0000068
WARM Assembly of ../tests/biorhythm.as                                  Page 2

Line [ Addr ]
     [0x002d]: 0x000006d
     [0x002e]: 0x000002c
     [0x002f]: 0x0000020
     [0x0030]: 0x0000073
     [0x0031]: 0x0000074
     [0x0032]: 0x0000061
     [0x0033]: 0x0000072
     [0x0034]: 0x0000074
     [0x0035]: 0x0000069
     [0x0036]: 0x000006e
     [0x0037]: 0x0000067
     [0x0038]: 0x0000020
     [0x0039]: 0x0000074
     [0x003a]: 0x000006f
     [0x003b]: 0x0000064
     [0x003c]: 0x0000061
     [0x003d]: 0x0000079
     [0x003e]: 0x000003a
     [0x003f]: 0x000000a
     [0x0040]: 0x0000020
     [0x0041]: 0x0000020
     [0x0042]: 0x0000020
     [0x0043]: 0x0000020
     [0x0044]: 0x0000020
     [0x0045]: 0x0000020
     [0x0046]: 0x0000020
     [0x0047]: 0x0000020
     [0x0048]: 0x0000020
     [0x0049]: 0x0000020
     [0x004a]: 0x0000020
     [0x004b]: 0x0000020
     [0x004c]: 0x0000020
     [0x004d]: 0x0000020
     [0x004e]: 0x0000020
     [0x004f]: 0x0000020
     [0x0050]: 0x0000050
     [0x0051]: 0x0000020
     [0x0052]: 0x000003d
     [0x0053]: 0x0000020
     [0x0054]: 0x0000050
     [0x0055]: 0x0000068
     [0x0056]: 0x0000079
     [0x0057]: 0x0000073
     [0x0058]: 0x0000069
     [0x0059]: 0x0000063
     [0x005a]: 0x0000061
     [0x005b]: 0x000006c
     [0x005c]: 0x0000020
     [0x005d]: 0x0000020
     [0x005e]: 0x0000020
     [0x005f]: 0x0000020
     [0x0060]: 0x0000020
     [0x0061]: 0x0000020
     [0x0062]: 0x0000020
     [0x0063]: 0x000004d
     [0x0064]: 0x0000020
     [0x0065]: 0x000003d
     [0x0066]: 0x0000020
     [0x0067]: 0x000004d
     [0x0068]: 0x0000065
WARM Assembly of ../tests/biorhythm.as                                  Page 3

Line [ Addr ]
     [0x0069]: 0x000006e
     [0x006a]: 0x0000074
     [0x006b]: 0x0000061
     [0x006c]: 0x000006c
     [0x006d]: 0x0000020
     [0x006e]: 0x0000020
     [0x006f]: 0x0000020
     [0x0070]: 0x0000020
     [0x0071]: 0x0000020
     [0x0072]: 0x0000020
     [0x0073]: 0x0000045
     [0x0074]: 0x0000020
     [0x0075]: 0x000003d
     [0x0076]: 0x0000020
     [0x0077]: 0x0000045
     [0x0078]: 0x000006d
     [0x0079]: 0x000006f
     [0x007a]: 0x0000074
     [0x007b]: 0x0000069
     [0x007c]: 0x000006f
     [0x007d]: 0x000006e
     [0x007e]: 0x0000061
     [0x007f]: 0x000006c
     [0x0080]: 0x000000a
     [0x0081]: 0x0000000
0016                   
0017                   ;; template for biorhythm chart
0018 [0x0082]: msg:    .string "-                                   |           
     [0x0082]: 0x000002d
     [0x0083]: 0x0000020
     [0x0084]: 0x0000020
     [0x0085]: 0x0000020
     [0x0086]: 0x0000020
     [0x0087]: 0x0000020
     [0x0088]: 0x0000020
     [0x0089]: 0x0000020
     [0x008a]: 0x0000020
     [0x008b]: 0x0000020
     [0x008c]: 0x0000020
     [0x008d]: 0x0000020
     [0x008e]: 0x0000020
     [0x008f]: 0x0000020
     [0x0090]: 0x0000020
     [0x0091]: 0x0000020
     [0x0092]: 0x0000020
     [0x0093]: 0x0000020
     [0x0094]: 0x0000020
     [0x0095]: 0x0000020
     [0x0096]: 0x0000020
     [0x0097]: 0x0000020
     [0x0098]: 0x0000020
     [0x0099]: 0x0000020
     [0x009a]: 0x0000020
     [0x009b]: 0x0000020
     [0x009c]: 0x0000020
     [0x009d]: 0x0000020
     [0x009e]: 0x0000020
     [0x009f]: 0x0000020
     [0x00a0]: 0x0000020
     [0x00a1]: 0x0000020
WARM Assembly of ../tests/biorhythm.as                                  Page 4

Line [ Addr ]
     [0x00a2]: 0x0000020
     [0x00a3]: 0x0000020
     [0x00a4]: 0x0000020
     [0x00a5]: 0x0000020
     [0x00a6]: 0x000007c
     [0x00a7]: 0x0000020
     [0x00a8]: 0x0000020
     [0x00a9]: 0x0000020
     [0x00aa]: 0x0000020
     [0x00ab]: 0x0000020
     [0x00ac]: 0x0000020
     [0x00ad]: 0x0000020
     [0x00ae]: 0x0000020
     [0x00af]: 0x0000020
     [0x00b0]: 0x0000020
     [0x00b1]: 0x0000020
     [0x00b2]: 0x0000020
     [0x00b3]: 0x0000020
     [0x00b4]: 0x0000020
     [0x00b5]: 0x0000020
     [0x00b6]: 0x0000020
     [0x00b7]: 0x0000020
     [0x00b8]: 0x0000020
     [0x00b9]: 0x0000020
     [0x00ba]: 0x0000020
     [0x00bb]: 0x0000020
     [0x00bc]: 0x0000020
     [0x00bd]: 0x0000020
     [0x00be]: 0x0000020
     [0x00bf]: 0x0000020
     [0x00c0]: 0x0000020
     [0x00c1]: 0x0000020
     [0x00c2]: 0x0000020
     [0x00c3]: 0x0000020
     [0x00c4]: 0x0000020
     [0x00c5]: 0x0000020
     [0x00c6]: 0x0000020
     [0x00c7]: 0x0000020
     [0x00c8]: 0x0000020
     [0x00c9]: 0x0000020
     [0x00ca]: 0x000002b
     [0x00cb]: 0x0000000
0019           
0020 [0x00cc]: monthTab:.data  0,31,59,90,120,151,181,212,243,273,304,334
     [0x00cc]: 0x0000000
     [0x00cd]: 0x000001f
     [0x00ce]: 0x000003b
     [0x00cf]: 0x000005a
     [0x00d0]: 0x0000078
     [0x00d1]: 0x0000097
     [0x00d2]: 0x00000b5
     [0x00d3]: 0x00000d4
     [0x00d4]: 0x00000f3
     [0x00d5]: 0x0000111
     [0x00d6]: 0x0000130
     [0x00d7]: 0x000014e
0021                   
0022           ;;; mod age by this (next triple critical point, age 58.22 years)
0023 [0x00d8]: cycle:  .data   21252
     [0x00d8]: 0x0005304
WARM Assembly of ../tests/biorhythm.as                                  Page 5

Line [ Addr ]
0024                   
0025           ;;; cycle times
0026 [0x00d9]: emot:   .data   28
     [0x00d9]: 0x000001c
0027 [0x00da]: phys:   .data   23
     [0x00da]: 0x0000017
0028 [0x00db]: ment:   .data   33
     [0x00db]: 0x0000021
0029                   
0030 [0x00dc]: main:
0031                   ;; greeting at top
0032 [0x00dc]:         adr     r0,hello
     [0x00dc]: 0x0a07bf2c = 0b00001010000001111011111100101100
0033 [0x00dd]:         bl      puts
     [0x00dd]: 0x0d000074 = 0b00001101000000000000000001110100
0034                   
0035                   ;; compute age
0036 [0x00de]: back:   adr     r0,birthday
     [0x00de]: 0x0a07bf23 = 0b00001010000001111011111100100011
0037 [0x00df]:         bl      since
     [0x00df]: 0x0d00007a = 0b00001101000000000000000001111010
0038 [0x00e0]:         mov     r1,r0
     [0x00e0]: 0x05884000 = 0b00000101100010000100000000000000
0039 [0x00e1]:         adr     r0,today
     [0x00e1]: 0x0a07bf23 = 0b00001010000001111011111100100011
0040 [0x00e2]:         bl      since
     [0x00e2]: 0x0d000077 = 0b00001101000000000000000001110111
0041 [0x00e3]:         sub     r0,r0,r1
     [0x00e3]: 0x01004040 = 0b00000001000000000100000001000000
0042                   
0043                   ;; print the next lines days of biorhythms
0044 [0x00e4]:         add     r1,r0,#lines
     [0x00e4]: 0x00080015 = 0b00000000000010000000000000010101
0045 [0x00e5]: _loop:  bl      bior            ; print chart line
     [0x00e5]: 0x0d00000b = 0b00001101000000000000000000001011
0046 [0x00e6]:         stu     r0,[sp,#-1]
     [0x00e6]: 0x0986bfff = 0b00001001100001101011111111111111
0047 [0x00e7]:         mov     r0,#'\          ; space
     [0x00e7]: 0x05800a01 = 0b00000101100000000000101000000001
0048 [0x00e8]:         swi     #SysPutChar
     [0x00e8]: 0x06800003 = 0b00000110100000000000000000000011
0049 [0x00e9]:         ldu     r0,[sp,#1]
     [0x00e9]: 0x09068001 = 0b00001001000001101000000000000001
0050 [0x00ea]:         swi     #SysPutNum      ; age in days
     [0x00ea]: 0x06800401 = 0b00000110100000000000010000000001
0051 [0x00eb]:         bl      nl
     [0x00eb]: 0x0d000053 = 0b00001101000000000000000001010011
0052 [0x00ec]:         add     r0,r0,#1        ; count lines
     [0x00ec]: 0x00000001 = 0b00000000000000000000000000000001
0053 [0x00ed]:         cmp     r0,r1
     [0x00ed]: 0x11804040 = 0b00010001100000000100000001000000
0054 [0x00ee]:         blt     _loop
     [0x00ee]: 0x8cfffff7 = 0b10001100111111111111111111110111
0055 [0x00ef]:         swi     #SysHalt        ; fini.
     [0x00ef]: 0x06800000 = 0b00000110100000000000000000000000
0056                   
0057           ;;; The main routine for computing biorhythms.
0058           ;;; prints a line for someone whose age is in r0.
0059           ;;; No registers altered
0060 [0x00f0]: bior:   stu     lr,[sp,#-1]
WARM Assembly of ../tests/biorhythm.as                                  Page 6

Line [ Addr ]
     [0x00f0]: 0x09f6bfff = 0b00001001111101101011111111111111
0061 [0x00f1]:         stm     sp,#0x3f
     [0x00f1]: 0x07e8003f = 0b00000111111010000000000000111111
0062 [0x00f2]:         mov     r4,r0           ; stash age in r4
     [0x00f2]: 0x05a04000 = 0b00000101101000000100000000000000
0063 [0x00f3]:         mov     r1,r4
     [0x00f3]: 0x05884100 = 0b00000101100010000100000100000000
0064 [0x00f4]:         ldr     r0,cycle        ; mod the age by 58 years to avoi
     [0x00f4]: 0x0807bfe4 = 0b00001000000001111011111111100100
0065 [0x00f5]:         bl      mod
     [0x00f5]: 0x0d00007a = 0b00001101000000000000000001111010
0066 [0x00f6]:         mov     r4,r0
     [0x00f6]: 0x05a04000 = 0b00000101101000000100000000000000
0067                   
0068 [0x00f7]:         adr     r1,msg
     [0x00f7]: 0x0a0fbf8b = 0b00001010000011111011111110001011
0069 [0x00f8]:         adr     r0,output       ; copy a clean line
     [0x00f8]: 0x0a078109 = 0b00001010000001111000000100001001
0070 [0x00f9]:         bl      strcpy
     [0x00f9]: 0x0d000052 = 0b00001101000000000000000001010010
0071 [0x00fa]:         bl      strlen          ; compute the radius of the line
     [0x00fa]: 0x0d000049 = 0b00001101000000000000000001001001
0072 [0x00fb]:         sub     r0,r0,#3
     [0x00fb]: 0x01000003 = 0b00000001000000000000000000000011
0073 [0x00fc]:         mov     r5,r0,asr#1     ; multiplier for sine(x)
     [0x00fc]: 0x05a84801 = 0b00000101101010000100100000000001
0074                   
0075                   ;; we now compute the physical cycle
0076 [0x00fd]:         ldr     r0,phys
     [0x00fd]: 0x0807bfdd = 0b00001000000001111011111111011101
0077 [0x00fe]:         mov     r1,r4
     [0x00fe]: 0x05884100 = 0b00000101100010000100000100000000
0078 [0x00ff]:         bl      mod             ; age mode physical cycle
     [0x00ff]: 0x0d000070 = 0b00001101000000000000000001110000
0079 [0x0100]:         mov     r0,r0,lsl#16    ; fractional
     [0x0100]: 0x05804010 = 0b00000101100000000100000000010000
0080 [0x0101]:         ldr     r1,phys
     [0x0101]: 0x080fbfd9 = 0b00001000000011111011111111011001
0081 [0x0102]:         div     r0,r0,r1        ;   division
     [0x0102]: 0x05004040 = 0b00000101000000000100000001000000
0082 [0x0103]:         ldr     r1,pi2          ; multiply by 2pi
     [0x0103]: 0x080f80a3 = 0b00001000000011111000000010100011
0083 [0x0104]:         bl      mul
     [0x0104]: 0x0d0000d5 = 0b00001101000000000000000011010101
0084 [0x0105]:         bl      sin             ; compute sine
     [0x0105]: 0x0d0000a8 = 0b00001101000000000000000010101000
0085 [0x0106]:         mul     r0,r0,r5        ; multiply by radius
     [0x0106]: 0x04004140 = 0b00000100000000000100000101000000
0086 [0x0107]:         ldr     r1,half         ; round
     [0x0107]: 0x080f80a2 = 0b00001000000011111000000010100010
0087 [0x0108]:         bl      add
     [0x0108]: 0x0d0000cf = 0b00001101000000000000000011001111
0088 [0x0109]:         mov     r1,r0,asr#16    ; truncate to integer
     [0x0109]: 0x05884810 = 0b00000101100010000100100000010000
0089 [0x010a]:         add     r1,r1,r5        ; compute charcter offset
     [0x010a]: 0x0008c140 = 0b00000000000010001100000101000000
0090 [0x010b]:         add     r1,r1,#1
     [0x010b]: 0x00088001 = 0b00000000000010001000000000000001
0091 [0x010c]:         adr     r2,output       ; place a P
     [0x010c]: 0x0a1780f5 = 0b00001010000101111000000011110101
WARM Assembly of ../tests/biorhythm.as                                  Page 7

Line [ Addr ]
0092 [0x010d]:         mov     r3,#'P
     [0x010d]: 0x05980805 = 0b00000101100110000000100000000101
0093 [0x010e]:         str     r3,[r2,r1,lsl#0] ; in the chart
     [0x010e]: 0x08994040 = 0b00001000100110010100000001000000
0094                   
0095                   ;; we now compute the emotional cycle
0096 [0x010f]:         mov     r1,r4           ; same as above but...
     [0x010f]: 0x05884100 = 0b00000101100010000100000100000000
0097 [0x0110]:         ldr     r0,emot
     [0x0110]: 0x0807bfc9 = 0b00001000000001111011111111001001
0098 [0x0111]:         bl      mod
     [0x0111]: 0x0d00005e = 0b00001101000000000000000001011110
0099 [0x0112]:         mov     r0,r0,lsl#16
     [0x0112]: 0x05804010 = 0b00000101100000000100000000010000
0100 [0x0113]:         ldr     r1,emot
     [0x0113]: 0x080fbfc6 = 0b00001000000011111011111111000110
0101 [0x0114]:         div     r0,r0,r1
     [0x0114]: 0x05004040 = 0b00000101000000000100000001000000
0102 [0x0115]:         ldr     r1,pi2
     [0x0115]: 0x080f8091 = 0b00001000000011111000000010010001
0103 [0x0116]:         bl      mul
     [0x0116]: 0x0d0000c3 = 0b00001101000000000000000011000011
0104 [0x0117]:         bl      sin
     [0x0117]: 0x0d000096 = 0b00001101000000000000000010010110
0105 [0x0118]:         mul     r0,r0,r5
     [0x0118]: 0x04004140 = 0b00000100000000000100000101000000
0106 [0x0119]:         ldr     r1,half
     [0x0119]: 0x080f8090 = 0b00001000000011111000000010010000
0107 [0x011a]:         bl      add
     [0x011a]: 0x0d0000bd = 0b00001101000000000000000010111101
0108 [0x011b]:         mov     r1,r0,asr#16
     [0x011b]: 0x05884810 = 0b00000101100010000100100000010000
0109 [0x011c]:         add     r1,r1,r5
     [0x011c]: 0x0008c140 = 0b00000000000010001100000101000000
0110 [0x011d]:         add     r1,r1,#1
     [0x011d]: 0x00088001 = 0b00000000000010001000000000000001
0111 [0x011e]:         adr     r2,output
     [0x011e]: 0x0a1780e3 = 0b00001010000101111000000011100011
0112 [0x011f]:         ldr     r3,[r2,r1,lsl#0]
     [0x011f]: 0x08194040 = 0b00001000000110010100000001000000
0113 [0x0120]:         cmp     r3,#'P          ; if we find a P
     [0x0120]: 0x11818805 = 0b00010001100000011000100000000101
0114 [0x0121]:         moveq   r3,#'2          ;    indicate crossing
     [0x0121]: 0x45980219 = 0b01000101100110000000001000011001
0115 [0x0122]:         movne   r3,#'E          ;       otherwise place E
     [0x0122]: 0x65980045 = 0b01100101100110000000000001000101
0116 [0x0123]:         str     r3,[r2,r1,lsl#0] ; in chart
     [0x0123]: 0x08994040 = 0b00001000100110010100000001000000
0117                   
0118                   ;; we now compute the mental cycle
0119 [0x0124]:         mov     r1,r4           ; same with mental, but
     [0x0124]: 0x05884100 = 0b00000101100010000100000100000000
0120 [0x0125]:         ldr     r0,ment
     [0x0125]: 0x0807bfb6 = 0b00001000000001111011111110110110
0121 [0x0126]:         bl      mod
     [0x0126]: 0x0d000049 = 0b00001101000000000000000001001001
0122 [0x0127]:         mov     r0,r0,lsl#16
     [0x0127]: 0x05804010 = 0b00000101100000000100000000010000
0123 [0x0128]:         ldr     r1,ment
     [0x0128]: 0x080fbfb3 = 0b00001000000011111011111110110011
WARM Assembly of ../tests/biorhythm.as                                  Page 8

Line [ Addr ]
0124 [0x0129]:         div     r0,r0,r1
     [0x0129]: 0x05004040 = 0b00000101000000000100000001000000
0125 [0x012a]:         ldr     r1,pi2
     [0x012a]: 0x080f807c = 0b00001000000011111000000001111100
0126 [0x012b]:         bl      mul
     [0x012b]: 0x0d0000ae = 0b00001101000000000000000010101110
0127 [0x012c]:         bl      sin
     [0x012c]: 0x0d000081 = 0b00001101000000000000000010000001
0128 [0x012d]:         mul     r0,r0,r5
     [0x012d]: 0x04004140 = 0b00000100000000000100000101000000
0129 [0x012e]:         ldr     r1,half
     [0x012e]: 0x080f807b = 0b00001000000011111000000001111011
0130 [0x012f]:         bl      add
     [0x012f]: 0x0d0000a8 = 0b00001101000000000000000010101000
0131 [0x0130]:         mov     r1,r0,asr#16
     [0x0130]: 0x05884810 = 0b00000101100010000100100000010000
0132 [0x0131]:         add     r1,r1,r5
     [0x0131]: 0x0008c140 = 0b00000000000010001100000101000000
0133 [0x0132]:         add     r1,r1,#1
     [0x0132]: 0x00088001 = 0b00000000000010001000000000000001
0134 [0x0133]:         adr     r2,output
     [0x0133]: 0x0a1780ce = 0b00001010000101111000000011001110
0135 [0x0134]:         ldr     r3,[r2,r1,lsl#0]
     [0x0134]: 0x08194040 = 0b00001000000110010100000001000000
0136 [0x0135]:         cmp     r3,#'2          ; either space or punct, a 2, or 
     [0x0135]: 0x11818219 = 0b00010001100000011000001000011001
0137 [0x0136]:         movlt   r3,#'M          ; space/punct, place an M
     [0x0136]: 0x8598004d = 0b10000101100110000000000001001101
0138 [0x0137]:         movgt   r3,#'2          ; previous letter.  Place a 2
     [0x0137]: 0xe5980219 = 0b11100101100110000000001000011001
0139 [0x0138]:         moveq   r3,#'3          ; previous 2, place a 3 (wow!)
     [0x0138]: 0x45980033 = 0b01000101100110000000000000110011
0140 [0x0139]:         str     r3,[r2,r1,lsl#0]
     [0x0139]: 0x08994040 = 0b00001000100110010100000001000000
0141           
0142 [0x013a]:         adr     r0,output
     [0x013a]: 0x0a0780c7 = 0b00001010000001111000000011000111
0143 [0x013b]:         bl      puts            ; print the string
     [0x013b]: 0x0d000016 = 0b00001101000000000000000000010110
0144 [0x013c]:         ldm     sp,#0x3f
     [0x013c]: 0x0768003f = 0b00000111011010000000000000111111
0145 [0x013d]:         ldu     pc,[sp,#1]      ; return
     [0x013d]: 0x097e8001 = 0b00001001011111101000000000000001
0146                   
0147           ;;; Print a newline.  No registers harmed.
0148 [0x013e]: nl:     stu     r0,[sp,#-1]
     [0x013e]: 0x0986bfff = 0b00001001100001101011111111111111
0149 [0x013f]:         mov     r0,#'\n
     [0x013f]: 0x05800205 = 0b00000101100000000000001000000101
0150 [0x0140]:         swi     #SysPutChar
     [0x0140]: 0x06800003 = 0b00000110100000000000000000000011
0151 [0x0141]:         ldu     r0,[sp,#1]
     [0x0141]: 0x09068001 = 0b00001001000001101000000000000001
0152 [0x0142]:         mov     pc,lr
     [0x0142]: 0x05f84380 = 0b00000101111110000100001110000000
0153                   
0154           ;;; compute the length of the string pointed to by r0
0155           ;;; result in r0
0156 [0x0143]: strlen: stm     sp,#0x6
     [0x0143]: 0x07e80203 = 0b00000111111010000000001000000011
WARM Assembly of ../tests/biorhythm.as                                  Page 9

Line [ Addr ]
0157 [0x0144]:         mov     r1,r0
     [0x0144]: 0x05884000 = 0b00000101100010000100000000000000
0158 [0x0145]:         mov     r0,#0
     [0x0145]: 0x05800000 = 0b00000101100000000000000000000000
0159 [0x0146]: _loop:  ldus    r2,[r1,#1]
     [0x0146]: 0x19108001 = 0b00011001000100001000000000000001
0160 [0x0147]:         addne   r0,r0,#1
     [0x0147]: 0x60000001 = 0b01100000000000000000000000000001
0161 [0x0148]:         bne     _loop
     [0x0148]: 0x6cfffffe = 0b01101100111111111111111111111110
0162 [0x0149]:         ldm     sp,#0x6
     [0x0149]: 0x07680203 = 0b00000111011010000000001000000011
0163 [0x014a]:         mov     pc,lr
     [0x014a]: 0x05f84380 = 0b00000101111110000100001110000000
0164           
0165           ;;; copy string pointed to by r1 to area pointed to by r0
0166 [0x014b]: strcpy: stm     sp,#0x7
     [0x014b]: 0x07e80007 = 0b00000111111010000000000000000111
0167 [0x014c]: _loop:  ldu     r2,[r1,#1]
     [0x014c]: 0x09108001 = 0b00001001000100001000000000000001
0168 [0x014d]:         stus    r2,[r0,#1]
     [0x014d]: 0x19900001 = 0b00011001100100000000000000000001
0169 [0x014e]:         bne     _loop
     [0x014e]: 0x6cfffffe = 0b01101100111111111111111111111110
0170 [0x014f]: _done:  ldm     sp,#0x7
     [0x014f]: 0x07680007 = 0b00000111011010000000000000000111
0171 [0x0150]:         mov     pc,lr
     [0x0150]: 0x05f84380 = 0b00000101111110000100001110000000
0172           
0173           ;;; print a string pointed to by r0
0174 [0x0151]: puts:   stu     r1,[sp,#-1]
     [0x0151]: 0x098ebfff = 0b00001001100011101011111111111111
0175 [0x0152]:         mov     r1,r0
     [0x0152]: 0x05884000 = 0b00000101100010000100000000000000
0176 [0x0153]: _loop:  ldus    r0,[r1,#1]
     [0x0153]: 0x19008001 = 0b00011001000000001000000000000001
0177 [0x0154]:         beq     _done
     [0x0154]: 0x4c000003 = 0b01001100000000000000000000000011
0178 [0x0155]:         swi     #SysPutChar
     [0x0155]: 0x06800003 = 0b00000110100000000000000000000011
0179 [0x0156]:         b       _loop
     [0x0156]: 0x0cfffffd = 0b00001100111111111111111111111101
0180 [0x0157]: _done:  ldu     r1,[sp,#1]
     [0x0157]: 0x090e8001 = 0b00001001000011101000000000000001
0181 [0x0158]:         mov     pc,lr
     [0x0158]: 0x05f84380 = 0b00000101111110000100001110000000
0182                   
0183           ;;; r0 is a pointer to date array
0184           ;;; result is days since 1901
0185 [0x0159]: since:  stu     lr,[sp,#-1]
     [0x0159]: 0x09f6bfff = 0b00001001111101101011111111111111
0186 [0x015a]:         stm     sp,#0xfe
     [0x015a]: 0x07e8027f = 0b00000111111010000000001001111111
0187 [0x015b]:         ldr     r1,[r0,#2]      ; r1 = year
     [0x015b]: 0x08080002 = 0b00001000000010000000000000000010
0188 [0x015c]:         ldr     r4,firstYear
     [0x015c]: 0x0827beab = 0b00001000001001111011111010101011
0189 [0x015d]:         sub     r1,r1,r4
     [0x015d]: 0x0108c100 = 0b00000001000010001100000100000000
0190 [0x015e]:         ldr     r2,[r0,#0]      ; r2 = month
WARM Assembly of ../tests/biorhythm.as                                  Page 10

Line [ Addr ]
     [0x015e]: 0x08100000 = 0b00001000000100000000000000000000
0191 [0x015f]:         sub     r2,r2,#1        ;  0..11
     [0x015f]: 0x01110001 = 0b00000001000100010000000000000001
0192 [0x0160]:         ldr     r3,[r0,#1]      ; r3 = day
     [0x0160]: 0x08180001 = 0b00001000000110000000000000000001
0193 [0x0161]:         sub     r3,r3,#1
     [0x0161]: 0x01198001 = 0b00000001000110011000000000000001
0194                   
0195                   ;; now compute days since 1901:
0196 [0x0162]:         mul     r0,r1,#365      ; r0 = running total
     [0x0162]: 0x0400816d = 0b00000100000000001000000101101101
0197 [0x0163]:         add     r0,r0,r1,asr#2  ; add in leap years
     [0x0163]: 0x00004842 = 0b00000000000000000100100001000010
0198 [0x0164]:         and     r1,r1,#0x3      ; 1 if target year is leap year
     [0x0164]: 0x03088003 = 0b00000011000010001000000000000011
0199 [0x0165]:         moveq   r1,#1
     [0x0165]: 0x45880001 = 0b01000101100010000000000000000001
0200 [0x0166]:         movne   r1,#0
     [0x0166]: 0x65880000 = 0b01100101100010000000000000000000
0201 [0x0167]:         adr     r4,monthTab     ; julian date lookup
     [0x0167]: 0x0a27bf65 = 0b00001010001001111011111101100101
0202 [0x0168]:         ldr     r4,[r4,r2,lsr#0]
     [0x0168]: 0x08224480 = 0b00001000001000100100010010000000
0203 [0x0169]:         add     r0,r0,r4
     [0x0169]: 0x00004100 = 0b00000000000000000100000100000000
0204 [0x016a]:         cmp     r2,#2
     [0x016a]: 0x11810201 = 0b00010001100000010000001000000001
0205 [0x016b]:         addgt   r0,r0,r1        ; curry in another leap day after
     [0x016b]: 0xe0004040 = 0b11100000000000000100000001000000
0206 [0x016c]:         add     r0,r0,r3        ; add in days
     [0x016c]: 0x000040c0 = 0b00000000000000000100000011000000
0207 [0x016d]:         ldm     sp,#0xfe        
     [0x016d]: 0x0768027f = 0b00000111011010000000001001111111
0208 [0x016e]: bnd:    ldu     pc,[sp,#1]
     [0x016e]: 0x097e8001 = 0b00001001011111101000000000000001
0209                   
0210           ;;; compute r1 mod r0.  Result in r0
0211 [0x016f]: mod:    stm     sp,#0xe
     [0x016f]: 0x07e80207 = 0b00000111111010000000001000000111
0212 [0x0170]:         div     r2,r1,r0
     [0x0170]: 0x0510c000 = 0b00000101000100001100000000000000
0213 [0x0171]:         mul     r2,r2,r0
     [0x0171]: 0x04114000 = 0b00000100000100010100000000000000
0214 [0x0172]:         sub     r0,r1,r2
     [0x0172]: 0x0100c080 = 0b00000001000000001100000010000000
0215 [0x0173]:         ldm     sp,#0xe
     [0x0173]: 0x07680207 = 0b00000111011010000000001000000111
0216 [0x0174]:         mov     pc,lr
     [0x0174]: 0x05f84380 = 0b00000101111110000100001110000000
0217           
0218           ;;; convert an int in r0 to a float in r0
0219 [0x0175]: float:  mov     r0,r0,lsl#16
     [0x0175]: 0x05804010 = 0b00000101100000000100000000010000
0220 [0x0176]:         mov     pc,lr
     [0x0176]: 0x05f84380 = 0b00000101111110000100001110000000
0221           
0222           ;;; given an integer in r3, fraction in r2, join them in r0
0223 [0x0177]: join:   ldr     r0,low16
     [0x0177]: 0x0807802e = 0b00001000000001111000000000101110
0224 [0x0178]:         mov     r0,r0,lsl#1
WARM Assembly of ../tests/biorhythm.as                                  Page 11

Line [ Addr ]
     [0x0178]: 0x05804001 = 0b00000101100000000100000000000001
0225 [0x0179]:         add     r0,r0,#1
     [0x0179]: 0x00000001 = 0b00000000000000000000000000000001
0226 [0x017a]:         and     r0,r0,r2
     [0x017a]: 0x03004080 = 0b00000011000000000100000010000000
0227 [0x017b]:         add     r0,r0,r3,lsl #16
     [0x017b]: 0x000040d0 = 0b00000000000000000100000011010000
0228 [0x017c]:         mov     pc,lr
     [0x017c]: 0x05f84380 = 0b00000101111110000100001110000000
0229           
0230           ;;; given a float in r0, invert it.
0231 [0x017d]: fneg:   mvn     r0,r0
     [0x017d]: 0x06004000 = 0b00000110000000000100000000000000
0232 [0x017e]:         add     r0,r0,#1
     [0x017e]: 0x00000001 = 0b00000000000000000000000000000001
0233 [0x017f]:         mov     pc,lr
     [0x017f]: 0x05f84380 = 0b00000101111110000100001110000000
0234                   
0235           ;;; given a float in r0, take its absolute value (set bits based 
0236 [0x0180]: fabs:   cmp     r0,#0
     [0x0180]: 0x11800000 = 0b00010001100000000000000000000000
0237 [0x0181]:         mvnlt   r0,r0
     [0x0181]: 0x86004000 = 0b10000110000000000100000000000000
0238 [0x0182]:         addlt   r0,r0,#0x10000
     [0x0182]: 0x80002001 = 0b10000000000000000010000000000001
0239 [0x0183]:         addlt   r0,r0,#1
     [0x0183]: 0x80000001 = 0b10000000000000000000000000000001
0240 [0x0184]:         mov     pc,lr
     [0x0184]: 0x05f84380 = 0b00000101111110000100001110000000
0241           
0242           ;;; given value in r0:
0243           ;;; split the floating point number into an integer (r3) and frac
0244 [0x0185]: split:  mov     r3,r0,asr#16
     [0x0185]: 0x05984810 = 0b00000101100110000100100000010000
0245 [0x0186]:         stu     r1,[sp,#-1]
     [0x0186]: 0x098ebfff = 0b00001001100011101011111111111111
0246 [0x0187]:         ldr     r1,low16
     [0x0187]: 0x080f801e = 0b00001000000011111000000000011110
0247 [0x0188]:         and     r2,r0,r1
     [0x0188]: 0x03104040 = 0b00000011000100000100000001000000
0248 [0x0189]:         and     r1,r3,r1,ror #16 
     [0x0189]: 0x0309cc50 = 0b00000011000010011100110001010000
0249 [0x018a]:         orr     r2,r2,r1
     [0x018a]: 0x02914040 = 0b00000010100100010100000001000000
0250 [0x018b]:         ldu     r1,[sp,#1]
     [0x018b]: 0x090e8001 = 0b00001001000011101000000000000001
0251 [0x018c]:         mov     pc,lr
     [0x018c]: 0x05f84380 = 0b00000101111110000100001110000000
0252           
0253           ;;; prints floating point value in r0
0254 [0x018d]: print:  stu     lr,[sp,#-1]
     [0x018d]: 0x09f6bfff = 0b00001001111101101011111111111111
0255 [0x018e]:         stm     sp,#0xf
     [0x018e]: 0x07e8000f = 0b00000111111010000000000000001111
0256 [0x018f]:         cmp     r0,#0
     [0x018f]: 0x11800000 = 0b00010001100000000000000000000000
0257 [0x0190]:         bllt    fneg
     [0x0190]: 0x8dffffed = 0b10001101111111111111111111101101
0258 [0x0191]:         stult   r0,[sp,#-1]
     [0x0191]: 0x8986bfff = 0b10001001100001101011111111111111
WARM Assembly of ../tests/biorhythm.as                                  Page 12

Line [ Addr ]
0259 [0x0192]:         movlt   r0,#'-
     [0x0192]: 0x8580002d = 0b10000101100000000000000000101101
0260 [0x0193]:         swilt   #SysPutChar
     [0x0193]: 0x86800003 = 0b10000110100000000000000000000011
0261 [0x0194]:         ldult   r0,[sp,#1]
     [0x0194]: 0x89068001 = 0b10001001000001101000000000000001
0262 [0x0195]:         bl      split
     [0x0195]: 0x0dfffff0 = 0b00001101111111111111111111110000
0263 [0x0196]:         mov     r0,r3
     [0x0196]: 0x058040c0 = 0b00000101100000000100000011000000
0264 [0x0197]:         swi     #SysPutNum
     [0x0197]: 0x06800401 = 0b00000110100000000000010000000001
0265 [0x0198]:         mov     r0,#'.
     [0x0198]: 0x05800217 = 0b00000101100000000000001000010111
0266 [0x0199]:         swi     #SysPutChar
     [0x0199]: 0x06800003 = 0b00000110100000000000000000000011
0267 [0x019a]:         mov     r1,#6
     [0x019a]: 0x05880203 = 0b00000101100010000000001000000011
0268 [0x019b]: _loop:  muls    r2,r2,#10
     [0x019b]: 0x14110205 = 0b00010100000100010000001000000101
0269 [0x019c]:         beq     _done
     [0x019c]: 0x4c000007 = 0b01001100000000000000000000000111
0270 [0x019d]:         mov     r0,r2
     [0x019d]: 0x05804080 = 0b00000101100000000100000010000000
0271 [0x019e]:         bl      split
     [0x019e]: 0x0dffffe7 = 0b00001101111111111111111111100111
0272 [0x019f]:         mov     r0,r3
     [0x019f]: 0x058040c0 = 0b00000101100000000100000011000000
0273 [0x01a0]:         swi     #SysPutNum
     [0x01a0]: 0x06800401 = 0b00000110100000000000010000000001
0274 [0x01a1]:         sub     r1,r1,#1
     [0x01a1]: 0x01088001 = 0b00000001000010001000000000000001
0275 [0x01a2]:         bgt     _loop
     [0x01a2]: 0xecfffff9 = 0b11101100111111111111111111111001
0276 [0x01a3]: _done:  ldm     sp,#0xf
     [0x01a3]: 0x0768000f = 0b00000111011010000000000000001111
0277 [0x01a4]:         ldu     pc,[sp,#1]
     [0x01a4]: 0x097e8001 = 0b00001001011111101000000000000001
0278           ;;;
0279           ;;; we implement a fixed point fractional representation:
0280           ;;;   integers portion is in top 16 bits, the fractional portion 
0281           ;;; this gives us values between -32767.999984741211 and +32767.9
0282           ;;; with an accuracy of 0.000015258789
0283                   
0284 [0x01a5]: low16:  .data   0x0000ffff
     [0x01a5]: 0x000ffff
0285                   
0286           ;;; constants needed for the computation of sin(x)
0287 [0x01a6]: pi2:    .data   0x0006487f
     [0x01a6]: 0x006487f
0288 [0x01a7]: pi:     .data   0x0003243f
     [0x01a7]: 0x003243f
0289 [0x01a8]: halfpi: .data   0x0001921f
     [0x01a8]: 0x001921f
0290 [0x01a9]: half:   .data   0x00008000      ;  0.5
     [0x01a9]: 0x0008000
0291 [0x01aa]: s1:     .data   0xffffd556      ; -0.16666
     [0x01aa]: 0xffffd556
0292 [0x01ab]: s2:     .data   0x00000222      ;  0.00833
     [0x01ab]: 0x0000222
WARM Assembly of ../tests/biorhythm.as                                  Page 13

Line [ Addr ]
0293 [0x01ac]: s3:     .data   0xfffffff2      ; -0.00019841
     [0x01ac]: 0xfffffff2
0294                   
0295           ;;;
0296           ;;; This algorithm is from www.netlib.org/fdlibm/k_sin.c
0297           ;;; Algorithm used by Sun and IBM.  Taylor series expansion.
0298           ;;; 
0299 [0x01ad]: sin:    stu     lr,[sp,#-1]
     [0x01ad]: 0x09f6bfff = 0b00001001111101101011111111111111
0300 [0x01ae]:         stm     sp,#0x3fe
     [0x01ae]: 0x07e803ff = 0b00000111111010000000001111111111
0301 [0x01af]:         mov     r2,#0           ; sign of sine
     [0x01af]: 0x05900000 = 0b00000101100100000000000000000000
0302 [0x01b0]:         cmp     r0,#0
     [0x01b0]: 0x11800000 = 0b00010001100000000000000000000000
0303 [0x01b1]:         eorlt   r2,r2,#1        ; sin(-x) = -sin(x)
     [0x01b1]: 0x82110001 = 0b10000010000100010000000000000001
0304 [0x01b2]:         bllt    fneg
     [0x01b2]: 0x8dffffcb = 0b10001101111111111111111111001011
0305 [0x01b3]:         ldr     r1,halfpi
     [0x01b3]: 0x080fbff5 = 0b00001000000011111011111111110101
0306 [0x01b4]:         cmp     r0,r1
     [0x01b4]: 0x11804040 = 0b00010001100000000100000001000000
0307 [0x01b5]:         ldrge   r1,pi
     [0x01b5]: 0xc80fbff2 = 0b11001000000011111011111111110010
0308 [0x01b6]:         subge   r0,r1,r0
     [0x01b6]: 0xc100c000 = 0b11000001000000001100000000000000
0309 [0x01b7]:         bl      sin0
     [0x01b7]: 0x0d000005 = 0b00001101000000000000000000000101
0310 [0x01b8]:         cmp     r2,#0
     [0x01b8]: 0x11810000 = 0b00010001100000010000000000000000
0311 [0x01b9]:         blne    fneg
     [0x01b9]: 0x6dffffc4 = 0b01101101111111111111111111000100
0312 [0x01ba]:         ldm     sp,#0x3fe
     [0x01ba]: 0x076803ff = 0b00000111011010000000001111111111
0313 [0x01bb]:         ldu     pc,[sp,#1]
     [0x01bb]: 0x097e8001 = 0b00001001011111101000000000000001
0314                   
0315 [0x01bc]: sin0:   stu     lr,[sp,#-1]
     [0x01bc]: 0x09f6bfff = 0b00001001111101101011111111111111
0316 [0x01bd]:         stm     sp,#0x3fe
     [0x01bd]: 0x07e803ff = 0b00000111111010000000001111111111
0317                   ;; r = x^3*(s2+x^2*s3)
0318                   ;; sin = x+(s1*x^3+(x*r))
0319                   ;; r2 = x, r3 = x^2, r4= x^3
0320 [0x01be]:         mov     r2,r0
     [0x01be]: 0x05904000 = 0b00000101100100000100000000000000
0321 [0x01bf]:         bl      sqr
     [0x01bf]: 0x0d000039 = 0b00001101000000000000000000111001
0322 [0x01c0]:         mov     r3,r0
     [0x01c0]: 0x05984000 = 0b00000101100110000100000000000000
0323 [0x01c1]:         mov     r0,r2
     [0x01c1]: 0x05804080 = 0b00000101100000000100000010000000
0324 [0x01c2]:         bl      cube
     [0x01c2]: 0x0d00003a = 0b00001101000000000000000000111010
0325 [0x01c3]:         mov     r4,r0
     [0x01c3]: 0x05a04000 = 0b00000101101000000100000000000000
0326                   
0327                   ;; compute r:
0328 [0x01c4]:         ldr     r0,s3
WARM Assembly of ../tests/biorhythm.as                                  Page 14

Line [ Addr ]
     [0x01c4]: 0x0807bfe8 = 0b00001000000001111011111111101000
0329 [0x01c5]:         mov     r1,r3
     [0x01c5]: 0x058840c0 = 0b00000101100010000100000011000000
0330 [0x01c6]:         bl      mul             ; r0 = s3*x^2
     [0x01c6]: 0x0d000013 = 0b00001101000000000000000000010011
0331 [0x01c7]:         ldr     r1,s2
     [0x01c7]: 0x080fbfe4 = 0b00001000000011111011111111100100
0332 [0x01c8]:         bl      add             ; r0 = s2+s3*x^2
     [0x01c8]: 0x0d00000f = 0b00001101000000000000000000001111
0333 [0x01c9]:         mov     r1,r4
     [0x01c9]: 0x05884100 = 0b00000101100010000100000100000000
0334 [0x01ca]:         bl      mul             ; r0 = r = x^3*(s2+x3*x^2)
     [0x01ca]: 0x0d00000f = 0b00001101000000000000000000001111
0335 [0x01cb]:         mov     r1,r2
     [0x01cb]: 0x05884080 = 0b00000101100010000100000010000000
0336 [0x01cc]:         bl      mul             ; r0 = r5 = x*r
     [0x01cc]: 0x0d00000d = 0b00001101000000000000000000001101
0337 [0x01cd]:         mov     r5,r0           
     [0x01cd]: 0x05a84000 = 0b00000101101010000100000000000000
0338 [0x01ce]:         ldr     r0,s1
     [0x01ce]: 0x0807bfdc = 0b00001000000001111011111111011100
0339 [0x01cf]:         mov     r1,r4
     [0x01cf]: 0x05884100 = 0b00000101100010000100000100000000
0340 [0x01d0]:         bl      mul             ;s1*x^3
     [0x01d0]: 0x0d000009 = 0b00001101000000000000000000001001
0341 [0x01d1]:         mov     r1,r5
     [0x01d1]: 0x05884140 = 0b00000101100010000100000101000000
0342 [0x01d2]:         bl      add
     [0x01d2]: 0x0d000005 = 0b00001101000000000000000000000101
0343 [0x01d3]:         mov     r1,r2
     [0x01d3]: 0x05884080 = 0b00000101100010000100000010000000
0344 [0x01d4]:         bl      add
     [0x01d4]: 0x0d000003 = 0b00001101000000000000000000000011
0345 [0x01d5]:         ldm     sp,#0x3fe
     [0x01d5]: 0x076803ff = 0b00000111011010000000001111111111
0346 [0x01d6]:         ldu     pc,[sp,#1]
     [0x01d6]: 0x097e8001 = 0b00001001011111101000000000000001
0347                   
0348           ;;; given floating point values in r0 and r1, add them together.
0349 [0x01d7]: add:
0350 [0x01d7]:         add     r0,r0,r1
     [0x01d7]: 0x00004040 = 0b00000000000000000100000001000000
0351 [0x01d8]:         mov     pc,lr
     [0x01d8]: 0x05f84380 = 0b00000101111110000100001110000000
0352           
0353           
0354           ;;; given floating point values in r0 and r1, multiply them toget
0355           ;;; approach:
0356           ;;;  work with absolute values, add correct sign later
0357           ;;;  (a(1)+b) * (c(1)+d) = (ac(1)+(bc+da)(0)+bd(-1)) where (n) is
0358 [0x01d9]: mul:    stu     lr,[sp,#-1]
     [0x01d9]: 0x09f6bfff = 0b00001001111101101011111111111111
0359 [0x01da]:         stm     sp,#0x3e
     [0x01da]: 0x07e8021f = 0b00000111111010000000001000011111
0360 [0x01db]:         mov     r9,#0
     [0x01db]: 0x05c80000 = 0b00000101110010000000000000000000
0361 [0x01dc]:         cmp     r0,#0
     [0x01dc]: 0x11800000 = 0b00010001100000000000000000000000
0362 [0x01dd]:         eorlt   r9,r9,#1
     [0x01dd]: 0x824c8001 = 0b10000010010011001000000000000001
WARM Assembly of ../tests/biorhythm.as                                  Page 15

Line [ Addr ]
0363 [0x01de]:         mvnlt   r0,r0
     [0x01de]: 0x86004000 = 0b10000110000000000100000000000000
0364 [0x01df]:         addlt   r0,r0,#1
     [0x01df]: 0x80000001 = 0b10000000000000000000000000000001
0365                   
0366 [0x01e0]:         cmp     r1,#0
     [0x01e0]: 0x11808000 = 0b00010001100000001000000000000000
0367 [0x01e1]:         eorlt   r9,r9,#1
     [0x01e1]: 0x824c8001 = 0b10000010010011001000000000000001
0368 [0x01e2]:         mvnlt   r1,r1
     [0x01e2]: 0x86084040 = 0b10000110000010000100000001000000
0369 [0x01e3]:         addlt   r1,r1,#1
     [0x01e3]: 0x80088001 = 0b10000000000010001000000000000001
0370                   ;; put first value is r7.r6
0371 [0x01e4]:         bl      split
     [0x01e4]: 0x0dffffa1 = 0b00001101111111111111111110100001
0372 [0x01e5]:         mov     r6,r2 ; B
     [0x01e5]: 0x05b04080 = 0b00000101101100000100000010000000
0373 [0x01e6]:         mov     r7,r3 ; A
     [0x01e6]: 0x05b840c0 = 0b00000101101110000100000011000000
0374                   
0375                   ;; second is in r5.r4
0376 [0x01e7]:         mov     r0,r1
     [0x01e7]: 0x05804040 = 0b00000101100000000100000001000000
0377 [0x01e8]:         bl      split
     [0x01e8]: 0x0dffff9d = 0b00001101111111111111111110011101
0378 [0x01e9]:         mov     r4,r2 ; D
     [0x01e9]: 0x05a04080 = 0b00000101101000000100000010000000
0379 [0x01ea]:         mov     r5,r3 ; C
     [0x01ea]: 0x05a840c0 = 0b00000101101010000100000011000000
0380                   
0381                   ;; compute result
0382 [0x01eb]:         mul     r8,r7,r5 ; AC
     [0x01eb]: 0x0443c140 = 0b00000100010000111100000101000000
0383 [0x01ec]:         mul     r0,r4,r6 ; BD
     [0x01ec]: 0x04024180 = 0b00000100000000100100000110000000
0384 [0x01ed]:         mov     r0,r0,lsr#16    ;we must divide by 2^16
     [0x01ed]: 0x05804410 = 0b00000101100000000100010000010000
0385                   
0386 [0x01ee]:         mla     r0,r0,r5,r6    ; CB     ;this need not be shifted
     [0x01ee]: 0x04806146 = 0b00000100100000000110000101000110
0387 [0x01ef]:         mla     r0,r0,r4,r7    ; DA  ;this need not be shifted, b
     [0x01ef]: 0x04806107 = 0b00000100100000000110000100000111
0388 [0x01f0]:         bl      split
     [0x01f0]: 0x0dffff95 = 0b00001101111111111111111110010101
0389 [0x01f1]:         add     r3,r8,r3
     [0x01f1]: 0x001c40c0 = 0b00000000000111000100000011000000
0390 [0x01f2]:         bl      join
     [0x01f2]: 0x0dffff85 = 0b00001101111111111111111110000101
0391 [0x01f3]:         cmp     r9,#0
     [0x01f3]: 0x11848000 = 0b00010001100001001000000000000000
0392 [0x01f4]:         mvnne   r0,r0
     [0x01f4]: 0x66004000 = 0b01100110000000000100000000000000
0393 [0x01f5]:         addne   r0,r0,#1
     [0x01f5]: 0x60000001 = 0b01100000000000000000000000000001
0394                   
0395 [0x01f6]:         ldm     sp,#0x3e
     [0x01f6]: 0x0768021f = 0b00000111011010000000001000011111
0396 [0x01f7]:         ldu     pc,[sp,#1]
     [0x01f7]: 0x097e8001 = 0b00001001011111101000000000000001
WARM Assembly of ../tests/biorhythm.as                                  Page 16

Line [ Addr ]
0397           
0398           ;;; compute r0^2
0399 [0x01f8]: sqr:    stu     lr,[sp,#-1]
     [0x01f8]: 0x09f6bfff = 0b00001001111101101011111111111111
0400 [0x01f9]:         mov     r1,r0
     [0x01f9]: 0x05884000 = 0b00000101100010000100000000000000
0401 [0x01fa]:         bl      mul
     [0x01fa]: 0x0dffffdf = 0b00001101111111111111111111011111
0402 [0x01fb]:         ldu     pc,[sp,#1]
     [0x01fb]: 0x097e8001 = 0b00001001011111101000000000000001
0403                   
0404           ;;; compute r0^3        
0405 [0x01fc]: cube:   stu     lr,[sp,#-1]
     [0x01fc]: 0x09f6bfff = 0b00001001111101101011111111111111
0406 [0x01fd]:         mov     r1,r0
     [0x01fd]: 0x05884000 = 0b00000101100010000100000000000000
0407 [0x01fe]:         bl      mul
     [0x01fe]: 0x0dffffdb = 0b00001101111111111111111111011011
0408 [0x01ff]:         bl      mul
     [0x01ff]: 0x0dffffda = 0b00001101111111111111111111011010
0409 [0x0200]:         ldu     pc,[sp,#1]
     [0x0200]: 0x097e8001 = 0b00001001011111101000000000000001
0410                   
0411           
0412 [0x0201]: output: 

-------------------------------------------------------------------------------
Symbols defined:
         add=471            back=222            bior=240        birthday=1     
         bnd=366            cube=508           cycle=216            emot=217   
        fabs=384       firstYear=7             float=373            fneg=381   
        half=425          halfpi=424           hello=8              join=375   
       lines=21            low16=421            main=220            ment=219   
         mod=367        monthTab=204             msg=130             mul=473   
          nl=318          output=513            phys=218              pi=423   
         pi2=422           print=397            puts=337              s1=426   
          s2=427              s3=428             sin=429            sin0=444   
       since=345           split=389             sqr=504          strcpy=331   
      strlen=323           today=4      
-------------------------------------------------------------------------------
Assembled 286 instructions at 1444.44 instructions per second.
