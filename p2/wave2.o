WindObjectFile1
File wave2.s
Symbol ADDR 1350564292
Symbol ALL3 53
Symbol COND 1350564172
Symbol EQ 1350564196
Symbol FETCHT 427819490
Symbol GE 1350564260
Symbol GT 1350564276
Symbol INSTR 481
Symbol LDMdone 239
Symbol LE 1350564244
Symbol LT 1350564228
Symbol NE 1350564212
Symbol NEVER 1350564180
Symbol REGS 465
Symbol SHOP 1350588869
Symbol STMdone 280
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 855638499
Symbol WARM 1350608327
Symbol adc 142
Symbol add 138
Symbol adr 427
Symbol and 170
Symbol asr 114
Symbol b 447
Symbol bl 438
Symbol cmpCC 287
Symbol div 178
Symbol eor 162
Symbol equal 34
Symbol fetch 15
Symbol fetch2 10
Symbol fetch3 9
Symbol fetch4 6
Symbol flip -1
Symbol getop 27
Symbol greate 42
Symbol gt 44
Symbol imd 68
Symbol ldm 207
Symbol ldr 324
Symbol ldu 348
Symbol lesse 40
Symbol lesst 38
Symbol lloading 232
Symbol ls 309
Symbol lsADDR 1350591942
Symbol lshifting 220
Symbol lsl 108
Symbol lsr 111
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskAddr 28672
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 188
Symbol movCC 300
Symbol mul 174
Symbol mvn 190
Symbol ne 36
Symbol never 32
Symbol no 457
Symbol noDST 46
Symbol oDST 58
Symbol oRHS 63
Symbol opMask 528482304
Symbol orr 166
Symbol posldu 367
Symbol posstu 407
Symbol rim 78
Symbol ror 117
Symbol rpm 126
Symbol rsr 92
Symbol shopMask 3072
Symbol sloading 271
Symbol soff 451
Symbol sshifting 263
Symbol stm 248
Symbol str 336
Symbol stu 388
Symbol sub 152
Symbol swi 194
Symbol tstCC 296
Symbol wlr 479
Symbol wpc 480
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register temp 3
Register wCCR 8
Register work0 0
Register work1 1
Memory 1d1 0
Memory 1d2 0
Memory 1d3 0
Memory 1d4 0
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd 0
Memory 1de ffffff
Memory 1df 0
Memory 1e0 0
Memory 1e1 8a
Memory 8001e1 8e
Memory 10001e1 98
Memory 20001e1 a2
Memory 28001e1 a6
Memory 30001e1 aa
Memory 40001e1 ae
Memory 50001e1 b2
Memory 58001e1 bc
Memory 60001e1 be
Memory 68001e1 c2
Memory 70001e1 cf
Memory 78001e1 f8
Memory 80001e1 144
Memory 88001e1 150
Memory 90001e1 15c
Memory 98001e1 184
Memory a0001e1 1ab
Memory 100001e1 8a
Memory 108001e1 8e
Memory 110001e1 98
Memory 118001e1 11f
Memory 120001e1 a2
Memory 128001e1 a6
Memory 130001e1 aa
Memory 138001e1 128
Memory 140001e1 ae
Memory 150001e1 b2
Memory 158001e1 12c
Memory 160001e1 be
Memory 168001e1 c2
Memory 170001e1 cf
Memory 180001e1 144
Memory 188001e1 150
Memory 190001e1 15c
Memory 198001e1 184
Memory 198001e2 a
Memory 1a0001e2 a
Memory 1a8001e2 f
Memory 1b8001e2 a
Memory 1c0001e2 a
Memory 1c8001e2 a
Memory 1d8001e2 a
Memory 1e0001e2 a
Memory 1e8001e2 f
Memory 1f0001e2 a
Memory 1f8001e2 a
Memory 200001e2 f
Memory 208001e2 f
Memory 210001e2 f
Memory 218001e2 f
Memory 220001e2 f
Memory 228001e2 f
Memory 230001e2 f
Memory 238001e2 f
Memory 298001e2 9
Memory 2a0001e2 9
Memory 2a8001e2 6
Memory 2b0001e2 f
Memory 2b8001e2 9
Memory 2c0001e2 9
Memory 2c8001e2 9
Memory 2d0001e2 9
Memory 2d8001e2 9
Memory 2e8001e2 f
Memory 2f0001e2 f
Memory 2f8001e2 9
Memory 300001e2 6
Memory 308001e2 f
Memory 318001e2 6
Memory 320001e2 6
Memory 328001e2 6
Memory 330001e2 6
Memory 330001e3 35
Memory 338001e3 35
Memory 340001e3 35
Memory 348001e3 2e
Memory 350001e3 35
Memory 358001e3 35
Memory 360001e3 35
Memory 368001e3 2e
Memory 370001e3 35
Memory 378001e3 35
Memory 380001e3 35
Memory 388001e3 3a
Memory 390001e3 3a
Memory 398001e3 3f
Memory 3a0001e3 35
Memory 3a8001e3 3a
Memory 3b0001e3 135
Memory 3b8001e3 135
Memory 3c0001e3 135
Memory 3c8001e3 135
Memory 3d0001e3 135
Memory 3f0001e3 1bf
Memory 3f8001e3 1bf
Memory 400001e3 1b6
Memory 408001e3 1b6
Memory 430001e3 35
Memory 438001e3 35
Memory 440001e3 35
Memory 448001e3 2e
Memory 450001e3 35
Memory 458001e3 35
Memory 460001e3 2e
Memory 468001e3 35
Memory 470001e3 35
Memory 480001e3 35
Memory 488001e3 3a
Memory 490001e3 3a
Memory 498001e3 3f
Memory 4a0001e3 35
Memory 4a8001e3 135
Memory 4b0001e3 135
Memory 4b8001e3 135
Memory 4c0001e3 135
Memory 4c8001e3 135
Memory 4d0001e3 135
Memory 4efff94b 1bf
Memory 4f7ff94b 1bf
Memory 4ffff94b 1b6
Memory 507ff94b 1b6
Memory 507ff94c 0
Memory 507ff94d 20
Memory 507ff94e 22
Memory 507ff94f 24
Memory 507ff950 26
Memory 507ff951 28
Memory 507ff952 2a
Memory 507ff953 2c
Memory 507ff954 1c9
Memory 507ff955 1c9
Memory 507ff956 1c9
Memory 507ff957 1c9
Memory 507ff958 1c9
Memory 507ff959 1c9
Memory 507ff95a 1c9
Memory 507ff95b 1c9
Memory 507ff95c 1c9
Memory 507ff95d 1c9
Memory 507ff95e 1c9
Memory 507ff95f 1c9
Memory 507ff960 1c9
Memory 507ff961 1c9
Memory 507ff962 1c9
Memory 507ff963 1c9
Memory 507ff964 1c9
Memory 507ff965 1c9
Memory 507ff966 1c9
Memory 507ff967 1c9
Memory 507ff968 1b
Memory 507ff969 1b
Memory 507ff96a 1b
Memory 507ff96b 1c9
Memory 507ff96c 1c9
Memory 507ff96d 1c9
Memory 507ff96e 1c9
Memory 507ff96f 1c9
Memory 507ff970 1c9
Memory 507ff971 1b
Memory 507ff972 1b
Memory 507ff973 1b
Memory 507ff974 1b
Memory 507ff975 1b
Memory 507ff976 1b
Memory 507ff977 1b
Memory 507ff978 1c9
Memory 507ff979 1c9
Memory 507ff97a 1c9
Memory 507ff97b 1b
Memory 507ff97c 1b
Memory 507ff97d 1b
Memory 507ff97e 1b
Memory 507ff97f 1b
Memory 507ff980 1b
Memory 507ff981 1c9
Memory 507ff982 1c9
Memory 507ff983 1c9
Memory 507ff984 1c9
Memory 507ff985 1b
Memory 507ff986 1c9
Memory 507ff987 1b
Memory 507ff988 1c9
Memory 507ff989 1b
Memory 507ff98a 1c9
Memory 507ff98b 1b
Memory 507ff98c 1b
Memory 507ff98d 1c9
Memory 507ff98e 1b
Memory 507ff98f 1b
Memory 507ff990 1c9
Memory 507ff991 1b
Memory 507ff992 1c9
Memory 507ff993 1b
Memory 507ff994 1c9
Memory 507ff995 1b
Memory 507ff996 1c9
Memory 507ff997 1b
Memory 507ff998 1b
Memory 507ff999 1b
Memory 507ff99a 1b
Memory 507ff99b 1b
Memory 507ff99c 1b
Memory 507ff99d 1c9
Memory 507ff99e 1b
Memory 507ff99f 1b
Memory 507ff9a0 1c9
Memory 507ff9a1 1b
Memory 507ff9a2 1b
Memory 507ff9a3 1b
Memory 507ff9a4 1b
Memory 507ff9a5 1c9
Memory 507ff9a6 1b
Memory 507ff9a7 1c9
Memory 507ff9a8 1b
Memory 507ff9a9 1c9
Memory 507ff9aa 1b
Memory 507ff9ab 1c9
Memory 507ff9ac 1c9
Memory 507ff9ad 1c9
Memory 507ff9ae 1b
Memory 507ff9af 1c9
Memory 507ff9b0 1b
Memory 507ff9b1 1c9
Memory 507ff9b2 1b
Memory 507ff9b3 1c9
Memory 507ff9b4 1b
Memory 507ff9b5 1c9
Memory 507ff9b6 1b
Memory 507ff9b7 1c9
Memory 507ff9b8 1c9
Memory 507ff9b9 1c9
Memory 507ff9ba 1c9
Memory 507ff9bb 1c9
Memory 507ff9bc 1c9
Memory 507ff9bd 1b
Memory 507ff9be 1c9
Memory 507ff9bf 1c9
Memory 507ff9c0 1b
Memory 507ff9c1 1c9
Memory 507ff9c2 1c9
Memory 507ff9c3 1c9
Memory 507ff9c4 44
Memory 508009c4 44
Memory 508019c4 44
Memory 508029c4 44
Memory 508039c4 4e
Memory 508049c4 5c
Memory 508059c4 7e
Memory 508059c5 6c
Memory 50805dc5 6f
Memory 508061c5 72
Memory 508065c5 75
Memory 508065c6 1c3
Memory 508075c6 1c3
Memory 508085c6 1c3
Memory 508095c6 1c3
Memory 5080a5c6 4e
Memory 0 40198000 5080a5c6
Memory 2 180000 6
Memory 4 8198000 a
Memory 6 491a0000
Memory 7 8198000 7
Memory 9 491a0000
Memory a a6780000 1 1d4
Memory d 4b670000 1d1
Memory f 86780000 ffffff 1cf
Memory 12 48598000 1cd
Memory 14 49c90000 5080a5c7
Memory 16 48070000
Memory 17 c8180000 1d
Memory 19 7e480000 507ff94c
Memory 1b 49a70000
Memory 1c 81b80000 1f800000
Memory 1e 4e4e8000 330001e3
Memory 20 4e4c0000 507ff954
Memory 22 4e4c0000 507ff964
Memory 24 4e4c0000 507ff974
Memory 26 4e4c0000 507ff984
Memory 28 4e4c0000 507ff994
Memory 2a 4e4c0000 507ff9a4
Memory 2c 4e4c0000 507ff9b4
Memory 2e 49470000
Memory 2f c9580000 f
Memory 31 81580000 f
Memory 33 8198000 b
Memory 35 49470000
Memory 36 c9580000 f
Memory 38 81580000 f
Memory 3a 49670000
Memory 3b c9780000 13
Memory 3d 81780000 f
Memory 3f 48180000 7000
Memory 41 80070000
Memory 42 4e480000 507ff9c4
Memory 44 48070000
Memory 45 80180000 3e00
Memory 47 c8180000 9
Memory 49 81d80000 1ff
Memory 4b c1c00000
Memory 4c 4e4e8000 1e1
Memory 4e 49270000
Memory 4f 81380000 3f
Memory 51 48070000
Memory 52 80180000 c00
Memory 54 c1d80000 16
Memory 56 c9d80000 1c
Memory 58 49cf0000 1d1
Memory 5a 4e480000 508059c5
Memory 5c 49380000 f
Memory 5e 81270000
Memory 5f 492c8000 1d1
Memory 61 48070000
Memory 62 80180000 c00
Memory 64 c1d80000 16
Memory 66 c9d80000 1c
Memory 68 49cf0000 1d1
Memory 6a 4e480000 508059c5
Memory 6c c1c48000
Memory 6d 4e4e8000 1e1
Memory 6f c9c48000
Memory 70 4e4e8000 1e1
Memory 72 d1c48000
Memory 73 4e4e8000 1e1
Memory 75 48070000
Memory 76 48380000 20
Memory 78 a8248000
Memory 79 c0008000
Memory 7a c9c48000
Memory 7b a1c00000
Memory 7c 4e4e8000 1e1
Memory 7e 48180000 f
Memory 80 80070000
Memory 81 c1d80000 16
Memory 83 c9d80000 1c
Memory 85 49cf0000 1d1
Memory 87 48080000 1d1
Memory 89 b1c00000
Memory 8a a1cd0000 1d1
Memory 8c 4e4e8000 198001e2
Memory 8e 48040000
Memory 8f c8180000 2
Memory 91 c0180000 1f
Memory 93 a1cd0000 1d1
Memory 95 a1c00000
Memory 96 4e4e8000 198001e2
Memory 98 480d0000 1d1
Memory 9a a6780000 1 144
Memory 9d a8070000
Memory 9e 4b600000 1d1
Memory a0 4e4e8000 198001e2
Memory a2 91cd0000 1d1
Memory a4 4e4e8000 198001e2
Memory a6 89cd0000 1d1
Memory a8 4e4e8000 198001e2
Memory aa 81cd0000 1d1
Memory ac 4e4e8000 198001e2
Memory ae b1cd0000 1d1
Memory b0 4e4e8000 198001e2
Memory b2 480d0000 1d1
Memory b4 b8070000
Memory b5 a6780000 1 129
Memory b8 4b600000 1d1
Memory ba 4e4e8000 198001e2
Memory bc 4e4e8000 198001e2
Memory be 91d80000 ffffffff
Memory c0 4e4e8000 198001e2
Memory c2 48198000 10e
Memory c4 70000
Memory c5 a6780000 1 119
Memory c8 4e600000 108
Memory ca 86798000 106 105
Memory cd 4e4e8000 198001e2
Memory cf 494d8000 1d1
Memory d1 a6780000 1 10d
Memory d4 81580000 ffffff
Memory d6 48180000 0
Memory d8 d9d80000 1
Memory da 28198000 d
Memory dc a0180000 1
Memory de c9d80000 1
Memory e0 20198000 e
Memory e2 d9d80000 1
Memory e4 28198000 3
Memory e6 8198000 fffffff5
Memory e8 4a0d0000 5080a5c7 1d1
Memory eb a1580000 1
Memory ed 8198000 ffffffee
Memory ef 4b650000 1d1
Memory f1 48198000 ee
Memory f3 c0180000 1b
Memory f5 49000000
Memory f6 4e4e8000 198001e2
Memory f8 48040000
Memory f9 c0180000 1b
Memory fb 8e600000 e4
Memory fd 494d8000 1d1
Memory ff 81580000 ffffff
Memory 101 48180000 f
Memory 103 c1d80000 10
Memory 105 10198000 9
Memory 107 a8180000 1
Memory 109 c1d80000 1
Memory 10b 38198000 fffffffb
Memory 10d 20198000 a
Memory 10f a9580000 1
Memory 111 4b480000 1d1 5080a5c7
Memory 114 99d80000 0
Memory 116 28198000 fffffff0
Memory 118 a6780000 1 c6
Memory 11b 4b650000 1d1
Memory 11d 4e4e8000 198001e2
Memory 11f 480d0000 1d1
Memory 121 a6780000 1 bd
Memory 124 a8070000
Memory 125 491a0000
Memory 126 8198000 fffffee8
Memory 128 d9cd0000 1d1
Memory 12a 8198000 fffffede
Memory 12c 4b670000 1d1
Memory 12e a6780000 1 b0
Memory 131 81c70000
Memory 132 491a0000
Memory 133 8198000 fffffedb
Memory 135 49470000
Memory 136 c9580000 f
Memory 138 81580000 f
Memory 13a 49670000
Memory 13b c9780000 13
Memory 13d 81780000 f
Memory 13f 48180000 7000
Memory 141 80070000
Memory 142 4e480000 508065c6
Memory 144 a1cd0000 1d1
Memory 146 81d80000 ffffff
Memory 148 4b6f0000 5080a5c7 1d1
Memory 14b a6780000 1 93
Memory 14e 8198000 fffffec0
Memory 150 a1cd0000 1d1
Memory 152 81d80000 ffffff
Memory 154 4bcd8000 1d1 5080a5c7
Memory 157 a6780000 1 87
Memory 15a 8198000 fffffeb4
Memory 15c 30198000 12
Memory 15e a1cd0000 1d1
Memory 160 81d80000 ffffff
Memory 162 a6780000 1 7c
Memory 165 4b6f0000 5080a5c7 1d1
Memory 168 4b470000 1d1
Memory 16a 836d8000 1d1 1d1
Memory 16d 4e4e8000 198001e2
Memory 16f 480d0000 1d1
Memory 171 80180000 ffffff
Memory 173 a1cd0000 1d1
Memory 175 a6780000 1 69
Memory 178 81d80000 ffffff
Memory 17a 4b470000 1d1
Memory 17c 4b680000 5080a5c7 1d1
Memory 17f 836d8000 1d1 1d1
Memory 182 4e4e8000 198001e2
Memory 184 30198000 12
Memory 186 a1cd0000 1d1
Memory 188 81d80000 ffffff
Memory 18a 4bcd8000 1d1 5080a5c7
Memory 18d a6780000 1 51
Memory 190 4b470000 1d1
Memory 192 83cf0000 5080a5c7 5080a5c7
Memory 195 4e4e8000 198001e2
Memory 197 480d0000 1d1
Memory 199 80180000 ffffff
Memory 19b 4a0d8000 1d1 5080a5c7
Memory 19e a6780000 1 40
Memory 1a1 a1c00000
Memory 1a2 81d80000 ffffff
Memory 1a4 4b470000 1d1
Memory 1a6 83cf0000 5080a5c7 5080a5c7
Memory 1a9 4e4e8000 198001e2
Memory 1ab a1cd0000 1d1
Memory 1ad 81d80000 ffffff
Memory 1af a6780000 1 2f
Memory 1b2 4b670000 1d1
Memory 1b4 4e4e8000 198001e2
Memory 1b6 4e798000 29 27
Memory 1b9 a6780000 1 24
Memory 1bc 86780000 ffffff 21
Memory 1bf a6670000 20
Memory 1c1 8198000 fffffe4d
Memory 1c3 c1d80000 12
Memory 1c5 d1d80000 12
Memory 1c7 4e4e8000 1e1
Memory 1c9 a6780000 1 15
Memory 1cc 86780000 ffffff 12
Memory 1cf 8198000 fffffe3f
Source 0         lea     WARM, work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch4: mov     ccr,wCCR
Source 7         jmp     fetch
Source 9 fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source a fetch2: add     $1, wpc
Source d         mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source f fetch:  and     $mask23to0, wpc
Source 12         mov     wpc, next
Source 14         mov     WARM(next),ci
Source 16         mov     ci, work0
Source 17         shr     $29, work0      ;high 3 condition bits in work0
Source 19         cmovg   COND(work0), rip
Source 1b getop:  mov     ci,op
Source 1c         and     $opMask, op
Source 1e         mov     TYPE(op), rip
Source 20 never:  mov     NEVER(wCCR),rip
Source 22 equal:  mov     EQ(wCCR),rip
Source 24 ne:     mov     NE(wCCR),rip
Source 26 lesst:  mov     LT(wCCR),rip
Source 28 lesse:  mov     LE(wCCR),rip
Source 2a greate: mov     GE(wCCR),rip
Source 2c gt:     mov     GT(wCCR),rip
Source 2e noDST:  mov     ci, lhs         
Source 2f         shr     $15, lhs
Source 31         and     $maskLow4, lhs
Source 33         jmp     oRHS
Source 35 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 36         shr     $15, lhs
Source 38         and     $maskLow4, lhs
Source 3a oDST:   mov     ci, dst
Source 3b         shr     $19, dst
Source 3d         and     $maskLow4, dst
Source 3f oRHS:   mov     $maskAddr, work0
Source 41         and     ci,work0        ;work 0 holds the addressing mode
Source 42         mov     ADDR(work0), rip
Source 44 imd:    mov     ci, work0
Source 45         and     $maskExp, work0 ;exponent
Source 47         shr     $9, work0
Source 49         and     $maskValue, rhs ;value
Source 4b         shl     work0, rhs      ;shifted value in rhs
Source 4c         mov     INSTR(op), rip
Source 4e rim:    mov     ci, shiftC
Source 4f         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 51         mov     ci, work0
Source 52         and     $shopMask, work0        ;work0 now has the shop
Source 54         shl     $22, rhs
Source 56         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 58         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 5a         mov     SHOP(work0), rip
Source 5c rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 5e         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 5f         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 61         mov     ci, work0
Source 62         and     $shopMask, work0        ; work0 now has the shift op code
Source 64         shl     $22, rhs
Source 66         shr     $28, rhs        ; rhs has rhs register
Source 68         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 6a         mov     SHOP(work0), rip
Source 6c lsl:    shl     shiftC, rhs
Source 6d         mov     INSTR(op), rip
Source 6f lsr:    shr     shiftC, rhs
Source 70         mov     INSTR(op), rip
Source 72 asr:    sar     shiftC, rhs
Source 73         mov     INSTR(op), rip
Source 75 ror:    mov     rhs, work0
Source 76         mov     $32, work1      
Source 78         sub     shiftC, work1   ;work0 := 32-shr
Source 79         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 7a         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 7b         add     work0, rhs
Source 7c         mov     INSTR(op), rip
Source 7e rpm:    mov     $maskLow4, work0
Source 80         and     ci, work0       ;work0 now has src reg 3
Source 81         shl     $22, rhs
Source 83         shr     $28, rhs        ; rhs now has src reg 2
Source 85         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 87         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 89         mul     work0, rhs
Source 8a add:    add     REGS(lhs), rhs
Source 8c         mov     FETCHT(op), rip
Source 8e adc:    mov     wCCR, work0
Source 8f         shr     $2, work0
Source 91         shl     $31, work0
Source 93         add     REGS(lhs), rhs
Source 95         add     work0, rhs
Source 96         mov     FETCHT(op), rip
Source 98 sub:    mov     REGS(lhs), work0
Source 9a         add     $1, wpc
Source 9d         sub     rhs, work0      
Source 9e         mov     work0, REGS(dst)
Source a0         mov     FETCHT(op), rip
Source a2 eor:    xor     REGS(lhs), rhs
Source a4         mov     FETCHT(op), rip
Source a6 orr:    or      REGS(lhs), rhs
Source a8         mov     FETCHT(op), rip
Source aa and:    and     REGS(lhs), rhs
Source ac         mov     FETCHT(op), rip
Source ae mul:    mul     REGS(lhs), rhs
Source b0         mov     FETCHT(op), rip
Source b2 div:    mov     REGS(lhs), work0
Source b4         div     rhs, work0
Source b5         add     $1, wpc
Source b8         mov     work0, REGS(dst)
Source ba         mov     FETCHT(op), rip
Source bc mov:    mov     FETCHT(op), rip
Source be mvn:    xor     $flip, rhs
Source c0         mov     FETCHT(op), rip
Source c2 swi:    mov     REGS, work0
Source c4         trap    rhs
Source c5         add     $1, wpc
Source c8         mov     work0, REGS
Source ca         and     REGS, REGS
Source cd         mov     FETCHT(op), rip
Source cf ldm:    mov     REGS(dst), lhs
Source d1         add     $1, wpc
Source d4         and     $mask23to0, lhs ;lhs is base register
Source d6         mov     $0, work0       ;work0 holds reg number
Source d8         test    $1, rhs
Source da         jne     lloading
Source dc         add     $1, work0
Source de         shr     $1, rhs
Source e0         je      LDMdone
Source e2         test    $1, rhs
Source e4         jne     lloading
Source e6         jmp     lshifting
Source e8         mov     WARM(lhs), REGS(work0)
Source eb         add     $1, lhs
Source ed         jmp     lshifting
Source ef         mov     lhs, REGS(dst)
Source f1         mov     wpc, work0
Source f3         shl     $27, work0
Source f5         mov     work0, wCCR
Source f6         mov     FETCHT(op), rip
Source f8 stm:    mov     wCCR, work0
Source f9         shl     $27, work0
Source fb         or      work0, wpc
Source fd         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source ff         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source 101         mov     $15, work0      ;work0 holds register number
Source 103         shl     $16, rhs
Source 105         jl      sloading
Source 107         sub     $1, work0       ;
Source 109         shl     $1, rhs         
Source 10b         jg      sshifting       ;is the next bit set?
Source 10d         je      STMdone
Source 10f         sub     $1, lhs                         
Source 111         mov     REGS(work0), WARM(lhs)
Source 114         cmp     $0, rhs
Source 116         jne     sshifting
Source 118         add     $1, wpc
Source 11b         mov     lhs, REGS(dst)
Source 11d         mov     FETCHT(op), rip
Source 11f cmpCC:  mov     REGS(lhs), work0
Source 121         add     $1, wpc 
Source 124         sub     rhs, work0
Source 125         mov     ccr, wCCR
Source 126         jmp     fetch
Source 128 tstCC:  test    REGS(lhs), rhs
Source 12a         jmp     fetch3
Source 12c movCC:  mov     rhs, REGS(dst)
Source 12e         add     $1, wpc 
Source 131         and     rhs, rhs
Source 132         mov     ccr, wCCR
Source 133         jmp     fetch
Source 135 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 136         shr     $15, lhs
Source 138         and     $maskLow4, lhs  ;lhs now has base register in it
Source 13a         mov     ci, dst
Source 13b         shr     $19, dst
Source 13d         and     $maskLow4, dst  ;dst now has dst register
Source 13f         mov     $maskAddr, work0
Source 141         and     ci, work0       ;work0 now has addressing mode
Source 142         mov     lsADDR(work0), rip
Source 144 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 146         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 148         mov     WARM(rhs), REGS(dst)
Source 14b         add     $1, wpc                 ;changed WARM(lhs, rhs) to WARM(rhs)
Source 14e         jmp     fetch
Source 150 str:    add     REGS(lhs), rhs          ;ADDITION
Source 152         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 154         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 157         add     $1, wpc
Source 15a         jmp     fetch
Source 15c ldu:    jge     posldu
Source 15e         add     REGS(lhs), rhs          ;ADDITION
Source 160         and     $mask23to0, rhs
Source 162         add     $1, wpc                 ;ADDITION:Masking, rhs now has the modified address
Source 165         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 168         mov     rhs, REGS(lhs)  
Source 16a         and     REGS(dst), REGS(dst)
Source 16d         mov     FETCHT(op), rip
Source 16f posldu: mov     REGS(lhs), work0
Source 171         and     $mask23to0, work0
Source 173         add     REGS(lhs), rhs
Source 175         add     $1, wpc
Source 178         and     $mask23to0, rhs
Source 17a         mov     rhs, REGS(lhs)
Source 17c         mov     WARM(work0),REGS(dst)
Source 17f         and     REGS(dst),REGS(dst)
Source 182         mov     FETCHT(op), rip         ;this was fetch2 i dont know why
Source 184 stu:    jge     posstu
Source 186         add     REGS(lhs), rhs
Source 188         and     $mask23to0, rhs
Source 18a         mov     REGS(dst), WARM(rhs)
Source 18d         add     $1, wpc
Source 190         mov     rhs, REGS(lhs)
Source 192         and     WARM(rhs),WARM(rhs)
Source 195         mov     FETCHT(op), rip
Source 197 posstu: mov     REGS(lhs), work0
Source 199         and     $mask23to0, work0 ;warm has effective address
Source 19b         mov     REGS(dst), WARM(work0)
Source 19e         add     $1, wpc
Source 1a1         add     work0, rhs
Source 1a2         and     $mask23to0, rhs
Source 1a4         mov     rhs, REGS(lhs)
Source 1a6         and     WARM(rhs),WARM(rhs)
Source 1a9         mov     FETCHT(op), rip 
Source 1ab adr:    add     REGS(lhs), rhs
Source 1ad         and     $mask23to0, rhs 
Source 1af         add     $1, wpc
Source 1b2         mov     rhs, REGS(dst)
Source 1b4         mov     FETCHT(op), rip
Source 1b6 bl:     mov     wpc, wlr
Source 1b9         add     $1, wlr
Source 1bc         and     $mask23to0, wlr
Source 1bf b:      add     ci, wpc
Source 1c1         jmp     fetch
Source 1c3 soff:   shl     $18, rhs
Source 1c5         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 1c7         mov     INSTR(op), rip
Source 1c9 no:     add     $1, wpc
Source 1cc         and     $mask23to0, wpc
Source 1cf         jmp     fetch
End
