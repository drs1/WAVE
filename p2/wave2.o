WindObjectFile1
File wave2.s
Symbol ADDR 1350564294
Symbol ALL3 53
Symbol COND 1350564174
Symbol EQ 1350564198
Symbol FETCHT 427819492
Symbol GE 1350564262
Symbol GT 1350564278
Symbol INSTR 483
Symbol LDMdone 239
Symbol LE 1350564246
Symbol LT 1350564230
Symbol NE 1350564214
Symbol NEVER 1350564182
Symbol REGS 467
Symbol SHOP 1350564301
Symbol STMdone 280
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 855638501
Symbol WARM 1350567379
Symbol adc 144
Symbol add 140
Symbol adr 429
Symbol and 170
Symbol asr 116
Symbol b 449
Symbol bl 440
Symbol cmpCC 287
Symbol div 178
Symbol eor 162
Symbol equal 34
Symbol fetch 15
Symbol fetch2 10
Symbol fetch3 9
Symbol fetch4 6
Symbol flip -1
Symbol getop 27
Symbol greate 42
Symbol gt 44
Symbol imd 70
Symbol ldm 207
Symbol ldr 326
Symbol ldu 350
Symbol lesse 40
Symbol lesst 38
Symbol lloading 232
Symbol ls 309
Symbol lsADDR 1350567374
Symbol lshifting 220
Symbol lsl 110
Symbol lsr 113
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 188
Symbol movCC 300
Symbol mul 174
Symbol mvn 190
Symbol ne 36
Symbol never 32
Symbol no 459
Symbol noDST 46
Symbol oDST 58
Symbol oRHS 63
Symbol opMask 528482304
Symbol orr 166
Symbol posldu 369
Symbol posstu 409
Symbol rim 80
Symbol ror 119
Symbol rpm 128
Symbol rsr 94
Symbol shopMask 3072
Symbol sloading 271
Symbol soff 453
Symbol sshifting 263
Symbol stm 248
Symbol str 338
Symbol stu 390
Symbol sub 152
Symbol swi 194
Symbol tstCC 296
Symbol wlr 481
Symbol wpc 482
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register temp 3
Register wCCR 8
Register work0 0
Register work1 1
Memory 1d3 0
Memory 1d4 0
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd 0
Memory 1de 0
Memory 1df 0
Memory 1e0 ffffff
Memory 1e1 0
Memory 1e2 0
Memory 1e3 8c
Memory 8001e3 90
Memory 10001e3 98
Memory 20001e3 a2
Memory 28001e3 a6
Memory 30001e3 aa
Memory 40001e3 ae
Memory 50001e3 b2
Memory 58001e3 bc
Memory 60001e3 be
Memory 68001e3 c2
Memory 70001e3 cf
Memory 78001e3 f8
Memory 80001e3 146
Memory 88001e3 152
Memory 90001e3 15e
Memory 98001e3 186
Memory a0001e3 1ad
Memory 100001e3 8c
Memory 108001e3 90
Memory 110001e3 98
Memory 118001e3 11f
Memory 120001e3 a2
Memory 128001e3 a6
Memory 130001e3 aa
Memory 138001e3 128
Memory 140001e3 ae
Memory 150001e3 b2
Memory 158001e3 12c
Memory 160001e3 be
Memory 168001e3 c2
Memory 170001e3 cf
Memory 180001e3 146
Memory 188001e3 152
Memory 190001e3 15e
Memory 198001e3 186
Memory 198001e4 a
Memory 1a0001e4 a
Memory 1a8001e4 f
Memory 1b8001e4 a
Memory 1c0001e4 a
Memory 1c8001e4 a
Memory 1d8001e4 a
Memory 1e0001e4 a
Memory 1e8001e4 f
Memory 1f0001e4 a
Memory 1f8001e4 a
Memory 200001e4 f
Memory 208001e4 f
Memory 210001e4 f
Memory 218001e4 f
Memory 220001e4 f
Memory 228001e4 f
Memory 230001e4 f
Memory 238001e4 f
Memory 298001e4 9
Memory 2a0001e4 9
Memory 2a8001e4 6
Memory 2b0001e4 f
Memory 2b8001e4 9
Memory 2c0001e4 9
Memory 2c8001e4 9
Memory 2d0001e4 9
Memory 2d8001e4 9
Memory 2e8001e4 f
Memory 2f0001e4 f
Memory 2f8001e4 9
Memory 300001e4 6
Memory 308001e4 f
Memory 318001e4 6
Memory 320001e4 6
Memory 328001e4 6
Memory 330001e4 6
Memory 330001e5 35
Memory 338001e5 35
Memory 340001e5 35
Memory 348001e5 2e
Memory 350001e5 35
Memory 358001e5 35
Memory 360001e5 35
Memory 368001e5 2e
Memory 370001e5 35
Memory 378001e5 35
Memory 380001e5 35
Memory 388001e5 3a
Memory 390001e5 3a
Memory 398001e5 3f
Memory 3a0001e5 35
Memory 3a8001e5 3a
Memory 3b0001e5 135
Memory 3b8001e5 135
Memory 3c0001e5 135
Memory 3c8001e5 135
Memory 3d0001e5 135
Memory 3f0001e5 1c1
Memory 3f8001e5 1c1
Memory 400001e5 1b8
Memory 408001e5 1b8
Memory 430001e5 35
Memory 438001e5 35
Memory 440001e5 35
Memory 448001e5 2e
Memory 450001e5 35
Memory 458001e5 35
Memory 460001e5 2e
Memory 468001e5 35
Memory 470001e5 35
Memory 480001e5 35
Memory 488001e5 3a
Memory 490001e5 3a
Memory 498001e5 3f
Memory 4a0001e5 35
Memory 4a8001e5 135
Memory 4b0001e5 135
Memory 4b8001e5 135
Memory 4c0001e5 135
Memory 4c8001e5 135
Memory 4d0001e5 135
Memory 4efff94d 1c1
Memory 4f7ff94d 1c1
Memory 4ffff94d 1b8
Memory 507ff94d 1b8
Memory 507ff94e 0
Memory 507ff94f 20
Memory 507ff950 22
Memory 507ff951 24
Memory 507ff952 26
Memory 507ff953 28
Memory 507ff954 2a
Memory 507ff955 2c
Memory 507ff956 1cb
Memory 507ff957 1cb
Memory 507ff958 1cb
Memory 507ff959 1cb
Memory 507ff95a 1cb
Memory 507ff95b 1cb
Memory 507ff95c 1cb
Memory 507ff95d 1cb
Memory 507ff95e 1cb
Memory 507ff95f 1cb
Memory 507ff960 1cb
Memory 507ff961 1cb
Memory 507ff962 1cb
Memory 507ff963 1cb
Memory 507ff964 1cb
Memory 507ff965 1cb
Memory 507ff966 1cb
Memory 507ff967 1cb
Memory 507ff968 1cb
Memory 507ff969 1cb
Memory 507ff96a 1b
Memory 507ff96b 1b
Memory 507ff96c 1b
Memory 507ff96d 1cb
Memory 507ff96e 1cb
Memory 507ff96f 1cb
Memory 507ff970 1cb
Memory 507ff971 1cb
Memory 507ff972 1cb
Memory 507ff973 1b
Memory 507ff974 1b
Memory 507ff975 1b
Memory 507ff976 1b
Memory 507ff977 1b
Memory 507ff978 1b
Memory 507ff979 1b
Memory 507ff97a 1cb
Memory 507ff97b 1cb
Memory 507ff97c 1cb
Memory 507ff97d 1b
Memory 507ff97e 1b
Memory 507ff97f 1b
Memory 507ff980 1b
Memory 507ff981 1b
Memory 507ff982 1b
Memory 507ff983 1cb
Memory 507ff984 1cb
Memory 507ff985 1cb
Memory 507ff986 1cb
Memory 507ff987 1b
Memory 507ff988 1cb
Memory 507ff989 1b
Memory 507ff98a 1cb
Memory 507ff98b 1b
Memory 507ff98c 1cb
Memory 507ff98d 1b
Memory 507ff98e 1b
Memory 507ff98f 1cb
Memory 507ff990 1b
Memory 507ff991 1b
Memory 507ff992 1cb
Memory 507ff993 1b
Memory 507ff994 1cb
Memory 507ff995 1b
Memory 507ff996 1cb
Memory 507ff997 1b
Memory 507ff998 1cb
Memory 507ff999 1b
Memory 507ff99a 1b
Memory 507ff99b 1b
Memory 507ff99c 1b
Memory 507ff99d 1b
Memory 507ff99e 1b
Memory 507ff99f 1cb
Memory 507ff9a0 1b
Memory 507ff9a1 1b
Memory 507ff9a2 1cb
Memory 507ff9a3 1b
Memory 507ff9a4 1b
Memory 507ff9a5 1b
Memory 507ff9a6 1b
Memory 507ff9a7 1cb
Memory 507ff9a8 1b
Memory 507ff9a9 1cb
Memory 507ff9aa 1b
Memory 507ff9ab 1cb
Memory 507ff9ac 1b
Memory 507ff9ad 1cb
Memory 507ff9ae 1cb
Memory 507ff9af 1cb
Memory 507ff9b0 1b
Memory 507ff9b1 1cb
Memory 507ff9b2 1b
Memory 507ff9b3 1cb
Memory 507ff9b4 1b
Memory 507ff9b5 1cb
Memory 507ff9b6 1b
Memory 507ff9b7 1cb
Memory 507ff9b8 1b
Memory 507ff9b9 1cb
Memory 507ff9ba 1cb
Memory 507ff9bb 1cb
Memory 507ff9bc 1cb
Memory 507ff9bd 1cb
Memory 507ff9be 1cb
Memory 507ff9bf 1b
Memory 507ff9c0 1cb
Memory 507ff9c1 1cb
Memory 507ff9c2 1b
Memory 507ff9c3 1cb
Memory 507ff9c4 1cb
Memory 507ff9c5 1cb
Memory 507ff9c6 46
Memory 507ff9c7 46
Memory 507ff9c8 46
Memory 507ff9c9 46
Memory 507ff9ca 50
Memory 507ff9cb 5e
Memory 507ff9cc 80
Memory 507ff9cd 6e
Memory 507ffdcd 71
Memory 508001cd 74
Memory 508005cd 77
Memory 508005ce 1c5
Memory 508005cf 1c5
Memory 508005d0 1c5
Memory 508005d1 1c5
Memory 508005d2 50
Memory 0 40198000 508005d2
Memory 2 180000 6
Memory 4 8198000 a
Memory 6 491a0000
Memory 7 8198000 7
Memory 9 491a0000
Memory a a6780000 1 1d6
Memory d 4b670000 1d3
Memory f 86780000 ffffff 1d1
Memory 12 48598000 1cf
Memory 14 49c90000 508005d3
Memory 16 48070000
Memory 17 c8180000 1d
Memory 19 7e480000 507ff94e
Memory 1b 49a70000
Memory 1c 81b80000 1f800000
Memory 1e 4e4e8000 330001e5
Memory 20 4e4c0000 507ff956
Memory 22 4e4c0000 507ff966
Memory 24 4e4c0000 507ff976
Memory 26 4e4c0000 507ff986
Memory 28 4e4c0000 507ff996
Memory 2a 4e4c0000 507ff9a6
Memory 2c 4e4c0000 507ff9b6
Memory 2e 49470000
Memory 2f c9580000 f
Memory 31 81580000 f
Memory 33 8198000 b
Memory 35 49470000
Memory 36 c9580000 f
Memory 38 81580000 f
Memory 3a 49670000
Memory 3b c9780000 13
Memory 3d 81780000 f
Memory 3f 48180000 7800
Memory 41 80070000
Memory 42 c8180000 c
Memory 44 4e480000 507ff9c6
Memory 46 48070000
Memory 47 80180000 3e00
Memory 49 c8180000 9
Memory 4b 81d80000 1ff
Memory 4d c1c00000
Memory 4e 4e4e8000 1e3
Memory 50 49270000
Memory 51 81380000 3f
Memory 53 48070000
Memory 54 80180000 c00
Memory 56 c1d80000 16
Memory 58 c9d80000 1c
Memory 5a 49cf0000 1d3
Memory 5c 4e480000 507ff9cd
Memory 5e 49380000 f
Memory 60 81270000
Memory 61 492c8000 1d3
Memory 63 48070000
Memory 64 80180000 c00
Memory 66 c1d80000 16
Memory 68 c9d80000 1c
Memory 6a 49cf0000 1d3
Memory 6c 4e480000 507ff9cd
Memory 6e c1c48000
Memory 6f 4e4e8000 1e3
Memory 71 c9c48000
Memory 72 4e4e8000 1e3
Memory 74 d1c48000
Memory 75 4e4e8000 1e3
Memory 77 48070000
Memory 78 48380000 20
Memory 7a a8248000
Memory 7b c0008000
Memory 7c c9c48000
Memory 7d a1c00000
Memory 7e 4e4e8000 1e3
Memory 80 48180000 f
Memory 82 80070000
Memory 83 c1d80000 16
Memory 85 c9d80000 1c
Memory 87 49cf0000 1d3
Memory 89 48080000 1d3
Memory 8b b1c00000
Memory 8c a1cd0000 1d3
Memory 8e 4e4e8000 198001e4
Memory 90 48040000
Memory 91 c8180000 1
Memory 93 a1cd0000 1d3
Memory 95 a1c00000
Memory 96 4e4e8000 198001e4
Memory 98 480d0000 1d3
Memory 9a a6780000 1 146
Memory 9d a8070000
Memory 9e 4b600000 1d3
Memory a0 4e4e8000 198001e4
Memory a2 91cd0000 1d3
Memory a4 4e4e8000 198001e4
Memory a6 89cd0000 1d3
Memory a8 4e4e8000 198001e4
Memory aa 81cd0000 1d3
Memory ac 4e4e8000 198001e4
Memory ae b1cd0000 1d3
Memory b0 4e4e8000 198001e4
Memory b2 480d0000 1d3
Memory b4 b8070000
Memory b5 a6780000 1 12b
Memory b8 4b600000 1d3
Memory ba 4e4e8000 198001e4
Memory bc 4e4e8000 198001e4
Memory be 91d80000 ffffffff
Memory c0 4e4e8000 198001e4
Memory c2 48198000 110
Memory c4 70000
Memory c5 a6780000 1 11b
Memory c8 4e600000 10a
Memory ca 86798000 108 107
Memory cd 4e4e8000 198001e4
Memory cf 494d8000 1d3
Memory d1 a6780000 1 10f
Memory d4 81580000 ffffff
Memory d6 48180000 0
Memory d8 d9d80000 1
Memory da 28198000 d
Memory dc a0180000 1
Memory de c9d80000 1
Memory e0 20198000 e
Memory e2 d9d80000 1
Memory e4 28198000 3
Memory e6 8198000 fffffff5
Memory e8 4a0d0000 508005d3 1d3
Memory eb a1580000 1
Memory ed 8198000 ffffffee
Memory ef 4b650000 1d3
Memory f1 48198000 f0
Memory f3 c0180000 1c
Memory f5 49000000
Memory f6 4e4e8000 198001e4
Memory f8 48040000
Memory f9 c0180000 1c
Memory fb 8e600000 e6
Memory fd 494d8000 1d3
Memory ff 81580000 ffffff
Memory 101 48180000 f
Memory 103 c1d80000 10
Memory 105 10198000 9
Memory 107 a8180000 1
Memory 109 c1d80000 1
Memory 10b 38198000 fffffffb
Memory 10d 20198000 a
Memory 10f a9580000 1
Memory 111 4b480000 1d3 508005d3
Memory 114 99d80000 0
Memory 116 28198000 fffffff0
Memory 118 a6780000 1 c8
Memory 11b 4b650000 1d3
Memory 11d 4e4e8000 198001e4
Memory 11f 480d0000 1d3
Memory 121 a6780000 1 bf
Memory 124 a8070000
Memory 125 491a0000
Memory 126 8198000 fffffee8
Memory 128 d9cd0000 1d3
Memory 12a 8198000 fffffede
Memory 12c 4b670000 1d3
Memory 12e a6780000 1 b2
Memory 131 81c70000
Memory 132 491a0000
Memory 133 8198000 fffffedb
Memory 135 49470000
Memory 136 c9580000 f
Memory 138 81580000 f
Memory 13a 49670000
Memory 13b c9780000 13
Memory 13d 81780000 f
Memory 13f 48180000 7800
Memory 141 80070000
Memory 142 c8180000 c
Memory 144 4e480000 508005ce
Memory 146 a1cd0000 1d3
Memory 148 81d80000 ffffff
Memory 14a 4b6f0000 508005d3 1d3
Memory 14d a6780000 1 93
Memory 150 8198000 fffffebe
Memory 152 a1cd0000 1d3
Memory 154 81d80000 ffffff
Memory 156 4bcd8000 1d3 508005d3
Memory 159 a6780000 1 87
Memory 15c 8198000 fffffeb2
Memory 15e 30198000 12
Memory 160 a1cd0000 1d3
Memory 162 81d80000 ffffff
Memory 164 a6780000 1 7c
Memory 167 4b6f0000 508005d3 1d3
Memory 16a 4b470000 1d3
Memory 16c 836d8000 1d3 1d3
Memory 16f 4e4e8000 198001e4
Memory 171 480d0000 1d3
Memory 173 80180000 ffffff
Memory 175 a1cd0000 1d3
Memory 177 a6780000 1 69
Memory 17a 81d80000 ffffff
Memory 17c 4b470000 1d3
Memory 17e 4b680000 508005d3 1d3
Memory 181 836d8000 1d3 1d3
Memory 184 4e4e8000 198001e4
Memory 186 30198000 12
Memory 188 a1cd0000 1d3
Memory 18a 81d80000 ffffff
Memory 18c 4bcd8000 1d3 508005d3
Memory 18f a6780000 1 51
Memory 192 4b470000 1d3
Memory 194 83cf0000 508005d3 508005d3
Memory 197 4e4e8000 198001e4
Memory 199 480d0000 1d3
Memory 19b 80180000 ffffff
Memory 19d 4a0d8000 1d3 508005d3
Memory 1a0 a6780000 1 40
Memory 1a3 a1c00000
Memory 1a4 81d80000 ffffff
Memory 1a6 4b470000 1d3
Memory 1a8 83cf0000 508005d3 508005d3
Memory 1ab 4e4e8000 198001e4
Memory 1ad a1cd0000 1d3
Memory 1af 81d80000 ffffff
Memory 1b1 a6780000 1 2f
Memory 1b4 4b670000 1d3
Memory 1b6 4e4e8000 198001e4
Memory 1b8 4e798000 29 27
Memory 1bb a6780000 1 24
Memory 1be 86780000 ffffff 21
Memory 1c1 a6670000 20
Memory 1c3 8198000 fffffe4b
Memory 1c5 c1d80000 12
Memory 1c7 d1d80000 12
Memory 1c9 4e4e8000 1e3
Memory 1cb a6780000 1 15
Memory 1ce 86780000 ffffff 12
Memory 1d1 8198000 fffffe3d
Source 0         lea     WARM, work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch4: mov     ccr,wCCR
Source 7         jmp     fetch
Source 9 fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source a fetch2: add     $1, wpc
Source d         mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source f fetch:  and     $mask23to0, wpc
Source 12         mov     wpc, next
Source 14         mov     WARM(next),ci
Source 16         mov     ci, work0
Source 17         shr     $29, work0      ;high 3 condition bits in work0
Source 19         cmovg   COND(work0), rip
Source 1b getop:  mov     ci,op
Source 1c         and     $opMask, op
Source 1e         mov     TYPE(op), rip
Source 20 never:  mov     NEVER(wCCR),rip
Source 22 equal:  mov     EQ(wCCR),rip
Source 24 ne:     mov     NE(wCCR),rip
Source 26 lesst:  mov     LT(wCCR),rip
Source 28 lesse:  mov     LE(wCCR),rip
Source 2a greate: mov     GE(wCCR),rip
Source 2c gt:     mov     GT(wCCR),rip
Source 2e noDST:  mov     ci, lhs         
Source 2f         shr     $15, lhs
Source 31         and     $maskLow4, lhs
Source 33         jmp     oRHS
Source 35 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 36         shr     $15, lhs
Source 38         and     $maskLow4, lhs
Source 3a oDST:   mov     ci, dst
Source 3b         shr     $19, dst
Source 3d         and     $maskLow4, dst
Source 3f oRHS:   mov     $maskA, work0
Source 41         and     ci,work0
Source 42         shr     $12, work0      ;work 0 holds the addressing mode
Source 44         mov     ADDR(work0), rip
Source 46 imd:    mov     ci, work0
Source 47         and     $maskExp, work0 ;exponent
Source 49         shr     $9, work0
Source 4b         and     $maskValue, rhs ;value
Source 4d         shl     work0, rhs      ;shifted value in rhs
Source 4e         mov     INSTR(op), rip
Source 50 rim:    mov     ci, shiftC
Source 51         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 53         mov     ci, work0
Source 54         and     $shopMask, work0        ;work0 now has the shop
Source 56         shl     $22, rhs
Source 58         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5a         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 5c         mov     SHOP(work0), rip
Source 5e rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 60         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 61         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 63         mov     ci, work0
Source 64         and     $shopMask, work0        ; work0 now has the shift op code
Source 66         shl     $22, rhs
Source 68         shr     $28, rhs        ; rhs has rhs register
Source 6a         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 6c         mov     SHOP(work0), rip
Source 6e lsl:    shl     shiftC, rhs
Source 6f         mov     INSTR(op), rip
Source 71 lsr:    shr     shiftC, rhs
Source 72         mov     INSTR(op), rip
Source 74 asr:    sar     shiftC, rhs
Source 75         mov     INSTR(op), rip
Source 77 ror:    mov     rhs, work0
Source 78         mov     $32, work1      
Source 7a         sub     shiftC, work1   ;work0 := 32-shr
Source 7b         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 7c         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 7d         add     work0, rhs
Source 7e         mov     INSTR(op), rip
Source 80 rpm:    mov     $maskLow4, work0
Source 82         and     ci, work0       ;work0 now has src reg 3
Source 83         shl     $22, rhs
Source 85         shr     $28, rhs        ; rhs now has src reg 2
Source 87         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 89         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 8b         mul     work0, rhs
Source 8c add:    add     REGS(lhs), rhs
Source 8e         mov     FETCHT(op), rip
Source 90 adc:    mov     wCCR, work0
Source 91         shr     $1, work0
Source 93         add     REGS(lhs), rhs
Source 95         add     work0, rhs
Source 96         mov     FETCHT(op), rip
Source 98 sub:    mov     REGS(lhs), work0
Source 9a         add     $1, wpc
Source 9d         sub     rhs, work0      
Source 9e         mov     work0, REGS(dst)
Source a0         mov     FETCHT(op), rip
Source a2 eor:    xor     REGS(lhs), rhs
Source a4         mov     FETCHT(op), rip
Source a6 orr:    or      REGS(lhs), rhs
Source a8         mov     FETCHT(op), rip
Source aa and:    and     REGS(lhs), rhs
Source ac         mov     FETCHT(op), rip
Source ae mul:    mul     REGS(lhs), rhs
Source b0         mov     FETCHT(op), rip
Source b2 div:    mov     REGS(lhs), work0
Source b4         div     rhs, work0
Source b5         add     $1, wpc
Source b8         mov     work0, REGS(dst)
Source ba         mov     FETCHT(op), rip
Source bc mov:    mov     FETCHT(op), rip
Source be mvn:    xor     $flip, rhs
Source c0         mov     FETCHT(op), rip
Source c2 swi:    mov     REGS, work0
Source c4         trap    rhs
Source c5         add     $1, wpc
Source c8         mov     work0, REGS
Source ca         and     REGS, REGS
Source cd         mov     FETCHT(op), rip
Source cf ldm:    mov     REGS(dst), lhs
Source d1         add     $1, wpc
Source d4         and     $mask23to0, lhs ;lhs is base register
Source d6         mov     $0, work0       ;work0 holds reg number
Source d8         test    $1, rhs
Source da         jne     lloading
Source dc         add     $1, work0
Source de         shr     $1, rhs
Source e0         je      LDMdone
Source e2         test    $1, rhs
Source e4         jne     lloading
Source e6         jmp     lshifting
Source e8         mov     WARM(lhs), REGS(work0)
Source eb         add     $1, lhs
Source ed         jmp     lshifting
Source ef         mov     lhs, REGS(dst)
Source f1         mov     wpc, work0
Source f3         shl     $28, work0
Source f5         mov     work0, wCCR
Source f6         mov     FETCHT(op), rip
Source f8 stm:    mov     wCCR, work0
Source f9         shl     $28, work0
Source fb         or      work0, wpc
Source fd         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source ff         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source 101         mov     $15, work0      ;work0 holds register number
Source 103         shl     $16, rhs
Source 105         jl      sloading
Source 107         sub     $1, work0       ;
Source 109         shl     $1, rhs         
Source 10b         jg      sshifting       ;is the next bit set?
Source 10d         je      STMdone
Source 10f         sub     $1, lhs                         
Source 111         mov     REGS(work0), WARM(lhs)
Source 114         cmp     $0, rhs
Source 116         jne     sshifting
Source 118         add     $1, wpc
Source 11b         mov     lhs, REGS(dst)
Source 11d         mov     FETCHT(op), rip
Source 11f cmpCC:  mov     REGS(lhs), work0
Source 121         add     $1, wpc 
Source 124         sub     rhs, work0
Source 125         mov     ccr, wCCR
Source 126         jmp     fetch
Source 128 tstCC:  test    REGS(lhs), rhs
Source 12a         jmp     fetch3
Source 12c movCC:  mov     rhs, REGS(dst)
Source 12e         add     $1, wpc 
Source 131         and     rhs, rhs
Source 132         mov     ccr, wCCR
Source 133         jmp     fetch
Source 135 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 136         shr     $15, lhs
Source 138         and     $maskLow4, lhs  ;lhs now has base register in it
Source 13a         mov     ci, dst
Source 13b         shr     $19, dst
Source 13d         and     $maskLow4, dst  ;dst now has dst register
Source 13f         mov     $maskA, work0
Source 141         and     ci, work0
Source 142         shr     $12, work0      ;work0 now has addressing mode
Source 144         mov     lsADDR(work0), rip
Source 146 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 148         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 14a         mov     WARM(rhs), REGS(dst)
Source 14d         add     $1, wpc                 ;changed WARM(lhs, rhs) to WARM(rhs)
Source 150         jmp     fetch
Source 152 str:    add     REGS(lhs), rhs          ;ADDITION
Source 154         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 156         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 159         add     $1, wpc
Source 15c         jmp     fetch
Source 15e ldu:    jge     posldu
Source 160         add     REGS(lhs), rhs          ;ADDITION
Source 162         and     $mask23to0, rhs
Source 164         add     $1, wpc                 ;ADDITION:Masking, rhs now has the modified address
Source 167         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 16a         mov     rhs, REGS(lhs)  
Source 16c         and     REGS(dst), REGS(dst)
Source 16f         mov     FETCHT(op), rip
Source 171 posldu: mov     REGS(lhs), work0
Source 173         and     $mask23to0, work0
Source 175         add     REGS(lhs), rhs
Source 177         add     $1, wpc
Source 17a         and     $mask23to0, rhs
Source 17c         mov     rhs, REGS(lhs)
Source 17e         mov     WARM(work0),REGS(dst)
Source 181         and     REGS(dst),REGS(dst)
Source 184         mov     FETCHT(op), rip         ;this was fetch2 i dont know why
Source 186 stu:    jge     posstu
Source 188         add     REGS(lhs), rhs
Source 18a         and     $mask23to0, rhs
Source 18c         mov     REGS(dst), WARM(rhs)
Source 18f         add     $1, wpc
Source 192         mov     rhs, REGS(lhs)
Source 194         and     WARM(rhs),WARM(rhs)
Source 197         mov     FETCHT(op), rip
Source 199 posstu: mov     REGS(lhs), work0
Source 19b         and     $mask23to0, work0 ;warm has effective address
Source 19d         mov     REGS(dst), WARM(work0)
Source 1a0         add     $1, wpc
Source 1a3         add     work0, rhs
Source 1a4         and     $mask23to0, rhs
Source 1a6         mov     rhs, REGS(lhs)
Source 1a8         and     WARM(rhs),WARM(rhs)
Source 1ab         mov     FETCHT(op), rip 
Source 1ad adr:    add     REGS(lhs), rhs
Source 1af         and     $mask23to0, rhs 
Source 1b1         add     $1, wpc
Source 1b4         mov     rhs, REGS(dst)
Source 1b6         mov     FETCHT(op), rip
Source 1b8 bl:     mov     wpc, wlr
Source 1bb         add     $1, wlr
Source 1be         and     $mask23to0, wlr
Source 1c1 b:      add     ci, wpc
Source 1c3         jmp     fetch
Source 1c5 soff:   shl     $18, rhs
Source 1c7         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 1c9         mov     INSTR(op), rip
Source 1cb no:     add     $1, wpc
Source 1ce         and     $mask23to0, wpc
Source 1d1         jmp     fetch
End
