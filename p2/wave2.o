WindObjectFile1
File wave2.s
Symbol ADDR 829
Symbol ALL3 50
Symbol COND 709
Symbol EQ 733
Symbol GE 797
Symbol GT 813
Symbol INSTR 597
Symbol LDMdone 249
Symbol LE 781
Symbol LT 765
Symbol NE 749
Symbol NEVER 717
Symbol REGS 581
Symbol SHOP 836
Symbol STMdone 290
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 649
Symbol WARM 845
Symbol adc 169
Symbol adcCC 298
Symbol add 165
Symbol addCC 294
Symbol adr 463
Symbol and 194
Symbol andCC 330
Symbol asr 135
Symbol b 548
Symbol bl 555
Symbol cmpCC 316
Symbol div 202
Symbol divCC 342
Symbol eor 186
Symbol eorCC 322
Symbol equal 31
Symbol fetch 13
Symbol fetch2 11
Symbol fetch3 10
Symbol flip -1
Symbol getop 22
Symbol greate 39
Symbol gt 41
Symbol imd 67
Symbol ldm 220
Symbol ldmCC 363
Symbol ldr 386
Symbol ldrCC 471
Symbol ldu 404
Symbol lduCC 489
Symbol lesse 37
Symbol lesst 35
Symbol lloading 242
Symbol ls 363
Symbol lsADDR 840
Symbol lshifting 230
Symbol lsl 129
Symbol lsr 132
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 209
Symbol movCC 350
Symbol mul 198
Symbol mulCC 338
Symbol mvn 211
Symbol mvnCC 356
Symbol ne 33
Symbol never 29
Symbol no 573
Symbol noDST 43
Symbol oDST 55
Symbol oRHS 60
Symbol orr 190
Symbol orrCC 326
Symbol posldu 419
Symbol poslduCC 504
Symbol posstu 449
Symbol posstuCC 534
Symbol rim 83
Symbol ror 138
Symbol rpm 147
Symbol rsr 105
Symbol sloading 281
Symbol soff 565
Symbol sshifting 273
Symbol stm 258
Symbol str 395
Symbol strCC 480
Symbol stu 434
Symbol stuCC 519
Symbol sub 179
Symbol subCC 308
Symbol swi 215
Symbol swiCC 360
Symbol tstCC 334
Symbol wlr 595
Symbol wpc 596
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register work0 0
Register work1 1
Memory 245 0
Memory 246 0
Memory 247 0
Memory 248 0
Memory 249 0
Memory 24a 0
Memory 24b 0
Memory 24c 0
Memory 24d 0
Memory 24e 0
Memory 24f 0
Memory 250 0
Memory 251 0
Memory 252 ffffff
Memory 253 0
Memory 254 0
Memory 255 a5
Memory 256 a9
Memory 257 b3
Memory 258 0
Memory 259 ba
Memory 25a be
Memory 25b c2
Memory 25c 0
Memory 25d c6
Memory 25e 0
Memory 25f ca
Memory 260 d1
Memory 261 d3
Memory 262 d7
Memory 263 dc
Memory 264 102
Memory 265 182
Memory 266 18b
Memory 267 194
Memory 268 1b2
Memory 269 1cf
Memory 26a 0
Memory 26b 0
Memory 26c 0
Memory 26d 0
Memory 26e 0
Memory 26f 0
Memory 270 0
Memory 271 0
Memory 272 0
Memory 273 0
Memory 274 0
Memory 275 126
Memory 276 12a
Memory 277 134
Memory 278 13c
Memory 279 142
Memory 27a 146
Memory 27b 14a
Memory 27c 14e
Memory 27d 152
Memory 27e 0
Memory 27f 156
Memory 280 15e
Memory 281 164
Memory 282 168
Memory 283 16b
Memory 284 0
Memory 285 1d7
Memory 286 1e0
Memory 287 1e9
Memory 288 207
Memory 289 32
Memory 28a 32
Memory 28b 32
Memory 28c 2b
Memory 28d 32
Memory 28e 32
Memory 28f 32
Memory 290 2b
Memory 291 32
Memory 292 32
Memory 293 32
Memory 294 37
Memory 295 37
Memory 296 3c
Memory 297 32
Memory 298 37
Memory 299 16b
Memory 29a 16b
Memory 29b 16b
Memory 29c 16b
Memory 29d 16b
Memory 29e 0
Memory 29f 0
Memory 2a0 0
Memory 2a1 224
Memory 2a2 224
Memory 2a3 22b
Memory 2a4 22b
Memory 2a5 0
Memory 2a6 0
Memory 2a7 0
Memory 2a8 0
Memory 2a9 32
Memory 2aa 32
Memory 2ab 32
Memory 2ac 2b
Memory 2ad 32
Memory 2ae 32
Memory 2af 2b
Memory 2b0 32
Memory 2b1 32
Memory 2b2 0
Memory 2b3 32
Memory 2b4 37
Memory 2b5 37
Memory 2b6 3c
Memory 2b7 32
Memory 2b8 16b
Memory 2b9 16b
Memory 2ba 16b
Memory 2bb 16b
Memory 2bc 16b
Memory 2bd 16b
Memory 2be 0
Memory 2bf 0
Memory 2c0 0
Memory 2c1 224
Memory 2c2 224
Memory 2c3 22b
Memory 2c4 22b
Memory 2c5 0
Memory 2c6 1d
Memory 2c7 1f
Memory 2c8 21
Memory 2c9 23
Memory 2ca 25
Memory 2cb 27
Memory 2cc 29
Memory 2cd 23d
Memory 2ce 23d
Memory 2cf 23d
Memory 2d0 23d
Memory 2d1 23d
Memory 2d2 23d
Memory 2d3 23d
Memory 2d4 23d
Memory 2d5 23d
Memory 2d6 23d
Memory 2d7 23d
Memory 2d8 23d
Memory 2d9 23d
Memory 2da 23d
Memory 2db 23d
Memory 2dc 23d
Memory 2dd 23d
Memory 2de 23d
Memory 2df 23d
Memory 2e0 23d
Memory 2e1 16
Memory 2e2 16
Memory 2e3 16
Memory 2e4 23d
Memory 2e5 23d
Memory 2e6 23d
Memory 2e7 23d
Memory 2e8 23d
Memory 2e9 23d
Memory 2ea 16
Memory 2eb 16
Memory 2ec 16
Memory 2ed 16
Memory 2ee 16
Memory 2ef 16
Memory 2f0 16
Memory 2f1 23d
Memory 2f2 23d
Memory 2f3 23d
Memory 2f4 16
Memory 2f5 16
Memory 2f6 16
Memory 2f7 16
Memory 2f8 16
Memory 2f9 16
Memory 2fa 23d
Memory 2fb 23d
Memory 2fc 23d
Memory 2fd 23d
Memory 2fe 16
Memory 2ff 23d
Memory 300 16
Memory 301 23d
Memory 302 16
Memory 303 23d
Memory 304 16
Memory 305 16
Memory 306 23d
Memory 307 16
Memory 308 16
Memory 309 23d
Memory 30a 16
Memory 30b 23d
Memory 30c 16
Memory 30d 23d
Memory 30e 16
Memory 30f 23d
Memory 310 16
Memory 311 16
Memory 312 16
Memory 313 16
Memory 314 16
Memory 315 16
Memory 316 23d
Memory 317 16
Memory 318 16
Memory 319 23d
Memory 31a 16
Memory 31b 16
Memory 31c 16
Memory 31d 16
Memory 31e 23d
Memory 31f 16
Memory 320 23d
Memory 321 16
Memory 322 23d
Memory 323 16
Memory 324 23d
Memory 325 16
Memory 326 23d
Memory 327 16
Memory 328 23d
Memory 329 16
Memory 32a 23d
Memory 32b 16
Memory 32c 23d
Memory 32d 16
Memory 32e 23d
Memory 32f 16
Memory 330 23d
Memory 331 23d
Memory 332 23d
Memory 333 23d
Memory 334 23d
Memory 335 23d
Memory 336 16
Memory 337 23d
Memory 338 23d
Memory 339 16
Memory 33a 23d
Memory 33b 23d
Memory 33c 23d
Memory 33d 43
Memory 33e 43
Memory 33f 43
Memory 340 43
Memory 341 53
Memory 342 69
Memory 343 93
Memory 344 81
Memory 345 84
Memory 346 87
Memory 347 8a
Memory 348 235
Memory 349 235
Memory 34a 235
Memory 34b 235
Memory 34c 53
Memory 0 40198000 253
Memory 2 40198000 242
Memory 4 40198000 348
Memory 6 180000 6
Memory 8 8198000 4
Memory a 491a0000
Memory b 4b670000 245
Memory d 48598000 246
Memory f 49c90000 34d
Memory 11 48070000
Memory 12 c8180000 1d
Memory 14 7e480000 2c5
Memory 16 49a70000
Memory 17 c1b80000 3
Memory 19 c9b80000 1a
Memory 1b 4e4e8000 289
Memory 1d 4e4c0000 2cd
Memory 1f 4e4c0000 2dd
Memory 21 4e4c0000 2ed
Memory 23 4e4c0000 2fd
Memory 25 4e4c0000 30d
Memory 27 4e4c0000 31d
Memory 29 4e4c0000 32d
Memory 2b 49470000
Memory 2c c9580000 f
Memory 2e 81580000 f
Memory 30 8198000 b
Memory 32 49470000
Memory 33 c9580000 f
Memory 35 81580000 f
Memory 37 49670000
Memory 38 c9780000 13
Memory 3a 81780000 f
Memory 3c 48180000 7800
Memory 3e 80070000
Memory 3f c8180000 c
Memory 41 4e480000 33d
Memory 43 48070000
Memory 44 80180000 3e00
Memory 46 c8180000 9
Memory 48 81d80000 1ff
Memory 4a c1c00000
Memory 4b a6780000 1 207
Memory 4e 86780000 ffffff 204
Memory 51 4e4e8000 255
Memory 53 49270000
Memory 54 81380000 3f
Memory 56 48070000
Memory 57 c0180000 14
Memory 59 c8180000 1e
Memory 5b c1d80000 16
Memory 5d c9d80000 1c
Memory 5f 49cf0000 245
Memory 61 a6780000 1 1f1
Memory 64 86780000 ffffff 1ee
Memory 67 4e480000 344
Memory 69 49380000 f
Memory 6b 81270000
Memory 6c 492c8000 245
Memory 6e 48070000
Memory 6f c0180000 14
Memory 71 c8180000 1e
Memory 73 c1d80000 16
Memory 75 c9d80000 1c
Memory 77 49cf0000 245
Memory 79 a6780000 1 1d9
Memory 7c 86780000 ffffff 1d6
Memory 7f 4e480000 344
Memory 81 c1c48000
Memory 82 4e4e8000 255
Memory 84 c9c48000
Memory 85 4e4e8000 255
Memory 87 d1c48000
Memory 88 4e4e8000 255
Memory 8a 48070000
Memory 8b 48380000 20
Memory 8d a8248000
Memory 8e c0008000
Memory 8f c9c48000
Memory 90 a1c00000
Memory 91 4e4e8000 255
Memory 93 48180000 f
Memory 95 80070000
Memory 96 c1d80000 16
Memory 98 c9d80000 1c
Memory 9a 49cf0000 245
Memory 9c 48080000 245
Memory 9e b1c00000
Memory 9f a6780000 1 1b3
Memory a2 86780000 ffffff 1b0
Memory a5 a1cd0000 245
Memory a7 8198000 ffffff63
Memory a9 48040000
Memory aa c8180000 2
Memory ac c0180000 1f
Memory ae a1cd0000 245
Memory b0 a1c00000
Memory b1 8198000 ffffff59
Memory b3 480d0000 245
Memory b5 a8070000
Memory b6 4b600000 245
Memory b8 8198000 ffffff54
Memory ba 91cd0000 245
Memory bc 8198000 ffffff4e
Memory be 89cd0000 245
Memory c0 8198000 ffffff4a
Memory c2 81cd0000 245
Memory c4 8198000 ffffff46
Memory c6 b1cd0000 245
Memory c8 8198000 ffffff42
Memory ca 480d0000 245
Memory cc b8070000
Memory cd 4b600000 245
Memory cf 8198000 ffffff3d
Memory d1 8198000 ffffff39
Memory d3 91d80000 ffffffff
Memory d5 8198000 ffffff35
Memory d7 480a8000 245
Memory d9 70000
Memory da 8198000 ffffff32
Memory dc 494d8000 245
Memory de 81580000 ffffff
Memory e0 48180000 0
Memory e2 d9d80000 1
Memory e4 28198000 d
Memory e6 a0180000 1
Memory e8 c9d80000 1
Memory ea 20198000 e
Memory ec d9d80000 1
Memory ee 28198000 3
Memory f0 8198000 fffffff5
Memory f2 a1580000 1
Memory f4 4a0d0000 34d 245
Memory f7 8198000 ffffffee
Memory f9 4b650000 245
Memory fb 48198000 158
Memory fd c8180000 18
Memory ff 49000000
Memory 100 8198000 ffffff0c
Memory 102 48040000
Memory 103 c0180000 18
Memory 105 a6600000 14e
Memory 107 494d8000 245
Memory 109 81580000 ffffff
Memory 10b 48180000 f
Memory 10d c1d80000 10
Memory 10f 10198000 9
Memory 111 a8180000 1
Memory 113 c1d80000 1
Memory 115 38198000 fffffffb
Memory 117 20198000 a
Memory 119 4b480000 245 34d
Memory 11c a9580000 1
Memory 11e 99d80000 0
Memory 120 28198000 fffffff0
Memory 122 4b650000 245
Memory 124 8198000 fffffee8
Memory 126 a1cd0000 245
Memory 128 8198000 fffffee1
Memory 12a 48040000
Memory 12b c8180000 2
Memory 12d c0180000 1f
Memory 12f a1cd0000 245
Memory 131 a1c00000
Memory 132 8198000 fffffed7
Memory 134 480d0000 245
Memory 136 a8070000
Memory 137 491a0000
Memory 138 4b600000 245
Memory 13a 8198000 fffffed2
Memory 13c 480d0000 245
Memory 13e a8070000
Memory 13f 491a0000
Memory 140 8198000 fffffecc
Memory 142 91cd0000 245
Memory 144 8198000 fffffec5
Memory 146 89cd0000 245
Memory 148 8198000 fffffec1
Memory 14a 81cd0000 245
Memory 14c 8198000 fffffebd
Memory 14e d9cd0000 245
Memory 150 8198000 fffffeb9
Memory 152 b1cd0000 245
Memory 154 8198000 fffffeb5
Memory 156 480d0000 245
Memory 158 b8070000
Memory 159 491a0000
Memory 15a 4b600000 245
Memory 15c 8198000 fffffeb0
Memory 15e 4b670000 245
Memory 160 81c70000
Memory 161 491a0000
Memory 162 8198000 fffffeaa
Memory 164 91d80000 ffffffff
Memory 166 8198000 fffffea3
Memory 168 70000
Memory 169 8198000 fffffea0
Memory 16b 49470000
Memory 16c c9580000 f
Memory 16e 81580000 f
Memory 170 49670000
Memory 171 c9780000 13
Memory 173 81780000 f
Memory 175 48180000 7800
Memory 177 80070000
Memory 178 c8180000 c
Memory 17a a6780000 1 d8
Memory 17d 86780000 ffffff d5
Memory 180 4e480000 348
Memory 182 a1cd0000 245
Memory 184 81d80000 ffffff
Memory 186 4b6f0000 34d 245
Memory 189 8198000 fffffe83
Memory 18b a1cd0000 245
Memory 18d 81d80000 ffffff
Memory 18f 4bcd8000 245 34d
Memory 192 8198000 fffffe7a
Memory 194 99d88000 0
Memory 196 38198000 c
Memory 198 a1cd0000 245
Memory 19a 81d80000 ffffff
Memory 19c 4b6f0000 34d 245
Memory 19f 4b470000 245
Memory 1a1 8198000 fffffe6b
Memory 1a3 480d0000 245
Memory 1a5 80180000 ffffff
Memory 1a7 4b680000 34d 245
Memory 1aa a1cd0000 245
Memory 1ac 81d80000 ffffff
Memory 1ae 4b470000 245
Memory 1b0 8198000 fffffe5c
Memory 1b2 99d80000 0
Memory 1b4 38198000 c
Memory 1b6 a1cd0000 245
Memory 1b8 81d80000 ffffff
Memory 1ba 4bcd8000 245 34d
Memory 1bd 4b470000 245
Memory 1bf 8198000 fffffe4d
Memory 1c1 480d0000 245
Memory 1c3 80180000 ffffff
Memory 1c5 4a0d8000 245 34d
Memory 1c8 a1c00000
Memory 1c9 81d80000 ffffff
Memory 1cb 4b470000 245
Memory 1cd 8198000 fffffe3f
Memory 1cf a1cd0000 245
Memory 1d1 81d80000 ffffff
Memory 1d3 4b670000 245
Memory 1d5 8198000 fffffe37
Memory 1d7 a1cd0000 245
Memory 1d9 81d80000 ffffff
Memory 1db 4b6f0000 34d 245
Memory 1de 8198000 fffffe2b
Memory 1e0 a1cd0000 245
Memory 1e2 81d80000 ffffff
Memory 1e4 4bcd8000 245 34d
Memory 1e7 8198000 fffffe22
Memory 1e9 99d88000 0
Memory 1eb 38198000 c
Memory 1ed a1cd0000 245
Memory 1ef 81d80000 ffffff
Memory 1f1 4b6f0000 34d 245
Memory 1f4 4b470000 245
Memory 1f6 8198000 fffffe13
Memory 1f8 480d0000 245
Memory 1fa 80180000 ffffff
Memory 1fc 4b680000 34d 245
Memory 1ff a1cd0000 245
Memory 201 81d80000 ffffff
Memory 203 4b470000 245
Memory 205 8198000 fffffe04
Memory 207 99d80000 0
Memory 209 38198000 c
Memory 20b a1cd0000 245
Memory 20d 81d80000 ffffff
Memory 20f 4bcd8000 245 34d
Memory 212 4b470000 245
Memory 214 8198000 fffffdf5
Memory 216 480d0000 245
Memory 218 80180000 ffffff
Memory 21a 4a0d8000 245 34d
Memory 21d a1c00000
Memory 21e 81d80000 ffffff
Memory 220 4b470000 245
Memory 222 8198000 fffffde7
Memory 224 a6670000 2f
Memory 226 86780000 ffffff 2c
Memory 229 8198000 fffffde3
Memory 22b 4e798000 28 26
Memory 22e a6670000 25
Memory 230 86780000 ffffff 22
Memory 233 8198000 fffffdd9
Memory 235 81d80000 3fff
Memory 237 c1d80000 12
Memory 239 d1d80000 12
Memory 23b 4e4e8000 255
Memory 23d a6780000 1 15
Memory 240 86780000 ffffff 12
Memory 243 8198000 fffffdc9
Source 0         lea     wpc, work0
Source 2         lea     REGS, work0
Source 4         lea     WARM, work0
Source 6         trap    $SysOverlay
Source 8         jmp     fetch
Source a fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source b fetch2: mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source d fetch:  mov     wpc,next        ;--------------------TOP-------------------;
Source f         mov     WARM(next),ci
Source 11         mov     ci, work0
Source 12         shr     $29, work0      ;high 3 condition bits in work0
Source 14         cmovg   COND(work0), rip
Source 16 getop:  mov     ci,op
Source 17         shl     $3,op
Source 19         shr     $26,op
Source 1b         mov     TYPE(op), rip
Source 1d never:  mov     NEVER(wCCR),rip
Source 1f equal:  mov     EQ(wCCR),rip
Source 21 ne:     mov     NE(wCCR),rip
Source 23 lesst:  mov     LT(wCCR),rip
Source 25 lesse:  mov     LE(wCCR),rip
Source 27 greate: mov     GE(wCCR),rip
Source 29 gt:     mov     GT(wCCR),rip
Source 2b noDST:  mov     ci, lhs         ;get dst and lhs
Source 2c         shr     $15, lhs
Source 2e         and     $maskLow4, lhs
Source 30         jmp     oRHS
Source 32 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 33         shr     $15, lhs
Source 35         and     $maskLow4, lhs
Source 37 oDST:   mov     ci, dst
Source 38         shr     $19, dst
Source 3a         and     $maskLow4, dst
Source 3c oRHS:   mov     $maskA, work0
Source 3e         and     ci,work0
Source 3f         shr     $12, work0      ;work 0 holds the addressing mode
Source 41         mov     ADDR(work0), rip
Source 43 imd:    mov     ci, work0
Source 44         and     $maskExp, work0 ;exponent
Source 46         shr     $9, work0
Source 48         and     $maskValue, rhs ;value
Source 4a         shl     work0, rhs      ;shifted value in rhs
Source 4b         add     $1, wpc
Source 4e         and     $mask23to0, wpc
Source 51         mov     INSTR(op), rip
Source 53 rim:    mov     ci, shiftC
Source 54         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 56         mov     ci, work0
Source 57         shl     $20, work0
Source 59         shr     $30, work0      ;work0 now has the shop
Source 5b         shl     $22, rhs
Source 5d         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5f         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 61         add     $1, wpc
Source 64         and     $mask23to0, wpc
Source 67         mov     SHOP(work0), rip
Source 69 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 6b         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 6c         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 6e         mov     ci, work0
Source 6f         shl     $20, work0
Source 71         shr     $30, work0      ; work0 now has the shift op code
Source 73         shl     $22, rhs
Source 75         shr     $28, rhs        ; rhs has rhs register
Source 77         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 79         add     $1, wpc
Source 7c         and     $mask23to0, wpc
Source 7f         mov     SHOP(work0), rip
Source 81 lsl:    shl     shiftC, rhs
Source 82         mov     INSTR(op), rip
Source 84 lsr:    shr     shiftC, rhs
Source 85         mov     INSTR(op), rip
Source 87 asr:    sar     shiftC, rhs
Source 88         mov     INSTR(op), rip
Source 8a ror:    mov     rhs, work0
Source 8b         mov     $32, work1      
Source 8d         sub     shiftC, work1   ;work0 := 32-shr
Source 8e         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 8f         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 90         add     work0, rhs
Source 91         mov     INSTR(op), rip
Source 93 rpm:    mov     $maskLow4, work0
Source 95         and     ci, work0       ;work0 now has src reg 3
Source 96         shl     $22, rhs
Source 98         shr     $28, rhs        ; rhs now has src reg 2
Source 9a         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 9c         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 9e         mul     work0, rhs
Source 9f         add     $1, wpc
Source a2         and     $mask23to0, wpc
Source a5 add:    add     REGS(lhs), rhs
Source a7         jmp     fetch2
Source a9 adc:    mov     wCCR, work0
Source aa         shr     $2, work0
Source ac         shl     $31, work0
Source ae         add     REGS(lhs), rhs
Source b0         add     work0, rhs
Source b1         jmp     fetch2
Source b3 sub:    mov     REGS(lhs), work0
Source b5         sub     rhs, work0
Source b6         mov     work0, REGS(dst)
Source b8         jmp     fetch
Source ba eor:    xor     REGS(lhs), rhs
Source bc         jmp     fetch2
Source be orr:    or      REGS(lhs), rhs
Source c0         jmp     fetch2
Source c2 and:    and     REGS(lhs), rhs
Source c4         jmp     fetch2
Source c6 mul:    mul     REGS(lhs), rhs
Source c8         jmp     fetch2
Source ca div:    mov     REGS(lhs), work0
Source cc         div     rhs, work0
Source cd         mov     work0, REGS(dst)
Source cf         jmp     fetch
Source d1 mov:    jmp     fetch2
Source d3 mvn:    xor     $flip, rhs
Source d5         jmp     fetch2
Source d7 swi:    mov     REGS(alwaysZ), work0
Source d9         trap    rhs
Source da         jmp     fetch
Source dc ldm:    mov     REGS(dst), lhs
Source de         and     $mask23to0, lhs ;lhs is base register
Source e0         mov     $0, work0       ;work0 holds reg number
Source e2         test    $1, rhs
Source e4         jne     lloading
Source e6         add     $1, work0
Source e8         shr     $1, rhs
Source ea         je      LDMdone
Source ec         test    $1, rhs
Source ee         jne     lloading
Source f0         jmp     lshifting
Source f2         add     $1, lhs
Source f4         mov     WARM(lhs), REGS(work0)
Source f7         jmp     lshifting
Source f9         mov     lhs, REGS(dst)
Source fb         mov     wpc, work0
Source fd         shr     $24, work0
Source ff         mov     work0, wCCR
Source 100         jmp     fetch
Source 102 stm:    mov     wCCR, work0
Source 103         shl     $24, work0
Source 105         add     work0, wpc
Source 107         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source 109         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source 10b         mov     $15, work0      ;work0 holds register number
Source 10d         shl     $16, rhs
Source 10f         jl      sloading
Source 111         sub     $1, work0       ;
Source 113         shl     $1, rhs         
Source 115         jg      sshifting       ;is the next bit set?
Source 117         je      STMdone
Source 119         mov     REGS(work0), WARM(lhs)
Source 11c         sub     $1, lhs
Source 11e         cmp     $0, rhs
Source 120         jne     sshifting
Source 122         mov     lhs, REGS(dst)
Source 124         jmp     fetch
Source 126 addCC:  add     REGS(lhs), rhs
Source 128         jmp     fetch3
Source 12a adcCC:  mov     wCCR, work0
Source 12b         shr     $2, work0
Source 12d         shl     $31, work0
Source 12f         add     REGS(lhs), rhs
Source 131         add     work0, rhs
Source 132         jmp     fetch3
Source 134 subCC:  mov     REGS(lhs), work0
Source 136         sub     rhs, work0
Source 137         mov     ccr,wCCR
Source 138         mov     work0, REGS(dst)
Source 13a         jmp     fetch
Source 13c cmpCC:  mov     REGS(lhs), work0
Source 13e         sub     rhs, work0
Source 13f         mov     ccr, wCCR
Source 140         jmp     fetch
Source 142 eorCC:  xor     REGS(lhs), rhs
Source 144         jmp     fetch3
Source 146 orrCC:  or      REGS(lhs), rhs
Source 148         jmp     fetch3
Source 14a andCC:  and     REGS(lhs), rhs
Source 14c         jmp     fetch3
Source 14e tstCC:  test    REGS(lhs), rhs
Source 150         jmp     fetch3
Source 152 mulCC:  mul     REGS(lhs), rhs
Source 154         jmp     fetch3
Source 156 divCC:  mov     REGS(lhs), work0
Source 158         div     rhs, work0
Source 159         mov     ccr,wCCR                
Source 15a         mov     work0, REGS(dst)
Source 15c         jmp     fetch
Source 15e movCC:  mov     rhs, REGS(dst)
Source 160         and     rhs,rhs
Source 161         mov     ccr,wCCR                        
Source 162         jmp     fetch
Source 164 mvnCC:  xor     $flip,rhs
Source 166         jmp     fetch3
Source 168 swiCC:  trap    rhs
Source 169         jmp     fetch3
Source 16b ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 16c         shr     $15, lhs
Source 16e         and     $maskLow4, lhs  ;lhs now has base register in it
Source 170         mov     ci, dst
Source 171         shr     $19, dst
Source 173         and     $maskLow4, dst  ;dst now has dst register
Source 175         mov     $maskA, work0
Source 177         and     ci, work0
Source 178         shr     $12, work0      ;work0 now has addressing mode
Source 17a         add     $1, wpc
Source 17d         and     $mask23to0, wpc 
Source 180         mov     lsADDR(work0), rip
Source 182 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 184         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 186         mov     WARM(rhs), REGS(dst)    ;changed WARM(lhs, rhs) to WARM(rhs)
Source 189         jmp     fetch
Source 18b str:    add     REGS(lhs), rhs          ;ADDITION
Source 18d         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 18f         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 192         jmp     fetch
Source 194 ldu:    cmp     0, rhs                          ;
Source 196         jg      posldu
Source 198         add     REGS(lhs), rhs          ;ADDITION
Source 19a         and     $mask23to0, rhs         ;ADDITION:Masking, rhs now has the modified address
Source 19c         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 19f         mov     rhs, REGS(lhs)
Source 1a1         jmp     fetch
Source 1a3 posldu: mov     REGS(lhs), work0
Source 1a5         and     $mask23to0, work0
Source 1a7         mov     WARM(work0), REGS(dst) ;load base register
Source 1aa         add     REGS(lhs), rhs
Source 1ac         and     $mask23to0, rhs
Source 1ae         mov     rhs, REGS(lhs)
Source 1b0         jmp     fetch           ;this was fetch2 i dont know why
Source 1b2 stu:    cmp     $0, rhs
Source 1b4         jg      posstu
Source 1b6         add     REGS(lhs), rhs
Source 1b8         and     $mask23to0, rhs
Source 1ba         mov     REGS(dst), WARM(rhs)
Source 1bd         mov     rhs, REGS(lhs)
Source 1bf         jmp     fetch
Source 1c1 posstu: mov     REGS(lhs), work0
Source 1c3         and     $mask23to0, work0 ;warm has effective address
Source 1c5         mov     REGS(dst), WARM(work0)
Source 1c8         add     work0, rhs
Source 1c9         and     $mask23to0, rhs
Source 1cb         mov     rhs, REGS(lhs)
Source 1cd         jmp     fetch
Source 1cf adr:    add     REGS(lhs), rhs
Source 1d1         and     $mask23to0, rhs
Source 1d3         mov     rhs, REGS(dst)
Source 1d5         jmp     fetch
Source 1d7 ldrCC:  add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 1d9         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 1db         mov     WARM(rhs), REGS(dst)    ;changed WARM(lhs, rhs) to WARM(rhs)
Source 1de         jmp     fetch3
Source 1e0 strCC:  add     REGS(lhs), rhs          ;ADDITION
Source 1e2         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 1e4         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 1e7         jmp     fetch3
Source 1e9 lduCC:  cmp     0, rhs                          ;
Source 1eb         jg      poslduCC
Source 1ed         add     REGS(lhs), rhs          ;ADDITION
Source 1ef         and     $mask23to0, rhs         ;ADDITION:Masking, rhs now has the modified address
Source 1f1         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 1f4         mov     rhs, REGS(lhs)
Source 1f6         jmp     fetch3
Source 1f8         mov     REGS(lhs), work0
Source 1fa         and     $mask23to0, work0
Source 1fc         mov     WARM(work0), REGS(dst) ;load base register
Source 1ff         add     REGS(lhs), rhs
Source 201         and     $mask23to0, rhs
Source 203         mov     rhs, REGS(lhs)
Source 205         jmp     fetch3          ;this was fetch2 i dont know why
Source 207 stuCC:  cmp     $0, rhs
Source 209         jg      posstuCC
Source 20b         add     REGS(lhs), rhs
Source 20d         and     $mask23to0, rhs
Source 20f         mov     REGS(dst), WARM(rhs)
Source 212         mov     rhs, REGS(lhs)
Source 214         jmp     fetch3
Source 216         mov     REGS(lhs), work0
Source 218         and     $mask23to0, work0 ;warm has effective address
Source 21a         mov     REGS(dst), WARM(work0)
Source 21d         add     work0, rhs
Source 21e         and     $mask23to0, rhs
Source 220         mov     rhs, REGS(lhs)
Source 222         jmp     fetch3
Source 224 b:      add     ci, wpc
Source 226         and     $mask23to0, wpc
Source 229         jmp     fetch
Source 22b bl:     mov     wpc, wlr
Source 22e         add     ci, wpc
Source 230         and     $mask23to0, wpc
Source 233         jmp     fetch
Source 235 soff:   and     $maskLow13, rhs ;need this line?
Source 237         shl     $18, rhs
Source 239         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 23b         mov     INSTR(op), rip
Source 23d no:     add     $1, wpc
Source 240         and     $mask23to0, wpc
Source 243         jmp     fetch
End
