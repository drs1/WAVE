WindObjectFile1
File wave2.s
Symbol ADDR 716
Symbol ALL3 49
Symbol COND 596
Symbol EQ 620
Symbol FETCHT 484
Symbol GE 684
Symbol GT 700
Symbol INSTR 432
Symbol LDMdone 238
Symbol LE 668
Symbol LT 652
Symbol NE 636
Symbol NEVER 604
Symbol REGS 416
Symbol SHOP 723
Symbol STMdone 274
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 536
Symbol WARM 732
Symbol adc 156
Symbol add 152
Symbol adr 384
Symbol and 181
Symbol asr 125
Symbol b 395
Symbol bl 392
Symbol cmpCC 278
Symbol div 189
Symbol eor 173
Symbol equal 30
Symbol fetch 9
Symbol fetch2 7
Symbol fetch3 6
Symbol flip -1
Symbol getop 21
Symbol greate 38
Symbol gt 40
Symbol imd 66
Symbol ldm 209
Symbol ldr 311
Symbol ldu 329
Symbol lesse 36
Symbol lesst 34
Symbol lloading 231
Symbol ls 294
Symbol lsADDR 727
Symbol lshifting 219
Symbol lsl 119
Symbol lsr 122
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 196
Symbol movCC 288
Symbol mul 185
Symbol mvn 198
Symbol ne 32
Symbol never 28
Symbol no 408
Symbol noDST 42
Symbol oDST 54
Symbol oRHS 59
Symbol orr 177
Symbol posldu 342
Symbol posstu 370
Symbol rim 79
Symbol ror 128
Symbol rpm 137
Symbol rsr 98
Symbol sloading 265
Symbol soff 399
Symbol sshifting 257
Symbol stm 242
Symbol str 320
Symbol stu 357
Symbol sub 166
Symbol swi 202
Symbol tstCC 284
Symbol wlr 430
Symbol wpc 431
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register work0 0
Register work1 1
Memory 1a0 0
Memory 1a1 0
Memory 1a2 0
Memory 1a3 0
Memory 1a4 0
Memory 1a5 0
Memory 1a6 0
Memory 1a7 0
Memory 1a8 0
Memory 1a9 0
Memory 1aa 0
Memory 1ab 0
Memory 1ac 0
Memory 1ad ffffff
Memory 1ae 0
Memory 1af 0
Memory 1b0 98
Memory 1b1 9c
Memory 1b2 a6
Memory 1b4 ad
Memory 1b5 b1
Memory 1b6 b5
Memory 1b8 b9
Memory 1ba bd
Memory 1bb c4
Memory 1bc c6
Memory 1bd ca
Memory 1be d1
Memory 1bf f2
Memory 1c0 137
Memory 1c1 140
Memory 1c2 149
Memory 1c3 165
Memory 1c4 180
Memory 1d0 98
Memory 1d1 9c
Memory 1d2 a6
Memory 1d3 116
Memory 1d4 ad
Memory 1d5 b1
Memory 1d6 b5
Memory 1d7 11c
Memory 1d8 b9
Memory 1da bd
Memory 1db 120
Memory 1dc c6
Memory 1dd ca
Memory 1de d1
Memory 1e0 137
Memory 1e1 140
Memory 1e2 149
Memory 1e3 165
Memory 1e4 7
Memory 1e5 7
Memory 1e6 9
Memory 1e8 7
Memory 1e9 7
Memory 1ea 7
Memory 1ec 7
Memory 1ed 7
Memory 1ee 9
Memory 1ef 7
Memory 1f0 7
Memory 1f1 9
Memory 1f2 9
Memory 1f3 9
Memory 1f4 9
Memory 1f5 9
Memory 1f6 9
Memory 1f7 9
Memory 1f8 9
Memory 204 6
Memory 205 6
Memory 206 9
Memory 207 9
Memory 208 6
Memory 209 6
Memory 20a 6
Memory 20b 6
Memory 20c 6
Memory 20e 9
Memory 20f 9
Memory 210 6
Memory 211 6
Memory 212 9
Memory 214 9
Memory 215 9
Memory 216 9
Memory 217 9
Memory 218 31
Memory 219 31
Memory 21a 31
Memory 21b 2a
Memory 21c 31
Memory 21d 31
Memory 21e 31
Memory 21f 2a
Memory 220 31
Memory 221 31
Memory 222 31
Memory 223 36
Memory 224 36
Memory 225 3b
Memory 226 31
Memory 227 36
Memory 228 126
Memory 229 126
Memory 22a 126
Memory 22b 126
Memory 22c 126
Memory 22d 0
Memory 22e 0
Memory 22f 0
Memory 230 18b
Memory 231 18b
Memory 232 188
Memory 233 188
Memory 234 0
Memory 235 0
Memory 236 0
Memory 237 0
Memory 238 31
Memory 239 31
Memory 23a 31
Memory 23b 2a
Memory 23c 31
Memory 23d 31
Memory 23e 2a
Memory 23f 31
Memory 240 31
Memory 241 0
Memory 242 31
Memory 243 36
Memory 244 36
Memory 245 3b
Memory 246 31
Memory 247 126
Memory 248 126
Memory 249 126
Memory 24a 126
Memory 24b 126
Memory 24c 126
Memory 24d 0
Memory 24e 0
Memory 24f 0
Memory 250 18b
Memory 251 18b
Memory 252 188
Memory 253 188
Memory 254 0
Memory 255 1c
Memory 256 1e
Memory 257 20
Memory 258 22
Memory 259 24
Memory 25a 26
Memory 25b 28
Memory 25c 198
Memory 25d 198
Memory 25e 198
Memory 25f 198
Memory 260 198
Memory 261 198
Memory 262 198
Memory 263 198
Memory 264 198
Memory 265 198
Memory 266 198
Memory 267 198
Memory 268 198
Memory 269 198
Memory 26a 198
Memory 26b 198
Memory 26c 198
Memory 26d 198
Memory 26e 198
Memory 26f 198
Memory 270 15
Memory 271 15
Memory 272 15
Memory 273 198
Memory 274 198
Memory 275 198
Memory 276 198
Memory 277 198
Memory 278 198
Memory 279 15
Memory 27a 15
Memory 27b 15
Memory 27c 15
Memory 27d 15
Memory 27e 15
Memory 27f 15
Memory 280 198
Memory 281 198
Memory 282 198
Memory 283 15
Memory 284 15
Memory 285 15
Memory 286 15
Memory 287 15
Memory 288 15
Memory 289 198
Memory 28a 198
Memory 28b 198
Memory 28c 198
Memory 28d 15
Memory 28e 198
Memory 28f 15
Memory 290 198
Memory 291 15
Memory 292 198
Memory 293 15
Memory 294 15
Memory 295 198
Memory 296 15
Memory 297 15
Memory 298 198
Memory 299 15
Memory 29a 198
Memory 29b 15
Memory 29c 198
Memory 29d 15
Memory 29e 198
Memory 29f 15
Memory 2a0 15
Memory 2a1 15
Memory 2a2 15
Memory 2a3 15
Memory 2a4 15
Memory 2a5 198
Memory 2a6 15
Memory 2a7 15
Memory 2a8 198
Memory 2a9 15
Memory 2aa 15
Memory 2ab 15
Memory 2ac 15
Memory 2ad 198
Memory 2ae 15
Memory 2af 198
Memory 2b0 15
Memory 2b1 198
Memory 2b2 15
Memory 2b3 198
Memory 2b4 15
Memory 2b5 198
Memory 2b6 15
Memory 2b7 198
Memory 2b8 15
Memory 2b9 198
Memory 2ba 15
Memory 2bb 198
Memory 2bc 15
Memory 2bd 198
Memory 2be 15
Memory 2bf 198
Memory 2c0 198
Memory 2c1 198
Memory 2c2 198
Memory 2c3 198
Memory 2c4 198
Memory 2c5 15
Memory 2c6 198
Memory 2c7 198
Memory 2c8 15
Memory 2c9 198
Memory 2ca 198
Memory 2cb 198
Memory 2cc 42
Memory 2cd 42
Memory 2ce 42
Memory 2cf 42
Memory 2d0 4f
Memory 2d1 62
Memory 2d2 89
Memory 2d3 77
Memory 2d4 7a
Memory 2d5 7d
Memory 2d6 80
Memory 2d7 18f
Memory 2d8 18f
Memory 2d9 18f
Memory 2da 18f
Memory 2db 4f
Memory 0 40198000 2db
Memory 2 180000 6
Memory 4 8198000 4
Memory 6 491a0000
Memory 7 4b670000 1a0
Memory 9 86780000 ffffff 1a4
Memory c 48598000 1a2
Memory e 49c90000 2dc
Memory 10 48070000
Memory 11 c8180000 1d
Memory 13 7e480000 254
Memory 15 49a70000
Memory 16 c1b80000 3
Memory 18 c9b80000 1a
Memory 1a 4e4e8000 218
Memory 1c 4e4c0000 25c
Memory 1e 4e4c0000 26c
Memory 20 4e4c0000 27c
Memory 22 4e4c0000 28c
Memory 24 4e4c0000 29c
Memory 26 4e4c0000 2ac
Memory 28 4e4c0000 2bc
Memory 2a 49470000
Memory 2b c9580000 f
Memory 2d 81580000 f
Memory 2f 8198000 b
Memory 31 49470000
Memory 32 c9580000 f
Memory 34 81580000 f
Memory 36 49670000
Memory 37 c9780000 13
Memory 39 81780000 f
Memory 3b 48180000 7800
Memory 3d 80070000
Memory 3e c8180000 c
Memory 40 4e480000 2cc
Memory 42 48070000
Memory 43 80180000 3e00
Memory 45 c8180000 9
Memory 47 81d80000 1ff
Memory 49 c1c00000
Memory 4a a6780000 1 163
Memory 4d 4e4e8000 1b0
Memory 4f 49270000
Memory 50 81380000 3f
Memory 52 48070000
Memory 53 c0180000 14
Memory 55 c8180000 1e
Memory 57 c1d80000 16
Memory 59 c9d80000 1c
Memory 5b 49cf0000 1a0
Memory 5d a6780000 1 150
Memory 60 4e480000 2d3
Memory 62 49380000 f
Memory 64 81270000
Memory 65 492c8000 1a0
Memory 67 48070000
Memory 68 c0180000 14
Memory 6a c8180000 1e
Memory 6c c1d80000 16
Memory 6e c9d80000 1c
Memory 70 49cf0000 1a0
Memory 72 a6780000 1 13b
Memory 75 4e480000 2d3
Memory 77 c1c48000
Memory 78 4e4e8000 1b0
Memory 7a c9c48000
Memory 7b 4e4e8000 1b0
Memory 7d d1c48000
Memory 7e 4e4e8000 1b0
Memory 80 48070000
Memory 81 48380000 20
Memory 83 a8248000
Memory 84 c0008000
Memory 85 c9c48000
Memory 86 a1c00000
Memory 87 4e4e8000 1b0
Memory 89 48180000 f
Memory 8b 80070000
Memory 8c c1d80000 16
Memory 8e c9d80000 1c
Memory 90 49cf0000 1a0
Memory 92 48080000 1a0
Memory 94 b1c00000
Memory 95 a6780000 1 118
Memory 98 a1cd0000 1a0
Memory 9a 4e4e8000 1e4
Memory 9c 48040000
Memory 9d c8180000 2
Memory 9f c0180000 1f
Memory a1 a1cd0000 1a0
Memory a3 a1c00000
Memory a4 4e4e8000 1e4
Memory a6 480d0000 1a0
Memory a8 a8070000
Memory a9 4b600000 1a0
Memory ab 4e4e8000 1e4
Memory ad 91cd0000 1a0
Memory af 4e4e8000 1e4
Memory b1 89cd0000 1a0
Memory b3 4e4e8000 1e4
Memory b5 81cd0000 1a0
Memory b7 4e4e8000 1e4
Memory b9 b1cd0000 1a0
Memory bb 4e4e8000 1e4
Memory bd 480d0000 1a0
Memory bf b8070000
Memory c0 4b600000 1a0
Memory c2 4e4e8000 1e4
Memory c4 4e4e8000 1e4
Memory c6 91d80000 ffffffff
Memory c8 4e4e8000 1e4
Memory ca 48198000 d5
Memory cc 70000
Memory cd 4e600000 d2
Memory cf 4e4e8000 1e4
Memory d1 494d8000 1a0
Memory d3 81580000 ffffff
Memory d5 48180000 0
Memory d7 d9d80000 1
Memory d9 28198000 d
Memory db a0180000 1
Memory dd c9d80000 1
Memory df 20198000 e
Memory e1 d9d80000 1
Memory e3 28198000 3
Memory e5 8198000 fffffff5
Memory e7 4a0d0000 2dc 1a0
Memory ea a1580000 1
Memory ec 8198000 ffffffee
Memory ee 4b650000 1a0
Memory f0 4e4e8000 1e4
Memory f2 48040000
Memory f3 c0180000 18
Memory f5 8e600000 b9
Memory f7 494d8000 1a0
Memory f9 81580000 ffffff
Memory fb 48180000 f
Memory fd c1d80000 10
Memory ff 10198000 9
Memory 101 a8180000 1
Memory 103 c1d80000 1
Memory 105 38198000 fffffffb
Memory 107 20198000 a
Memory 109 a9580000 1
Memory 10b 4b480000 1a0 2dc
Memory 10e 99d80000 0
Memory 110 28198000 fffffff0
Memory 112 4b650000 1a0
Memory 114 4e4e8000 1e4
Memory 116 480d0000 1a0
Memory 118 a8070000
Memory 119 491a0000
Memory 11a 8198000 fffffeee
Memory 11c d9cd0000 1a0
Memory 11e 8198000 fffffee7
Memory 120 4b670000 1a0
Memory 122 81c70000
Memory 123 491a0000
Memory 124 8198000 fffffee4
Memory 126 49470000
Memory 127 c9580000 f
Memory 129 81580000 f
Memory 12b 49670000
Memory 12c c9780000 13
Memory 12e 81780000 f
Memory 130 48180000 7800
Memory 132 80070000
Memory 133 c8180000 c
Memory 135 4e480000 2d7
Memory 137 a1cd0000 1a0
Memory 139 81d80000 ffffff
Memory 13b 4b6f0000 2dc 1a0
Memory 13e 4e4e8000 1e4
Memory 140 a1cd0000 1a0
Memory 142 81d80000 ffffff
Memory 144 4bcd8000 1a0 2dc
Memory 147 4e4e8000 1e4
Memory 149 30198000 c
Memory 14b a1cd0000 1a0
Memory 14d 81d80000 ffffff
Memory 14f 4b6f0000 2dc 1a0
Memory 152 4b470000 1a0
Memory 154 4e4e8000 1e4
Memory 156 480d0000 1a0
Memory 158 80180000 ffffff
Memory 15a 4b680000 2dc 1a0
Memory 15d a1cd0000 1a0
Memory 15f 81d80000 ffffff
Memory 161 4b470000 1a0
Memory 163 4e4e8000 1e4
Memory 165 30198000 c
Memory 167 a1cd0000 1a0
Memory 169 81d80000 ffffff
Memory 16b 4bcd8000 1a0 2dc
Memory 16e 4b470000 1a0
Memory 170 4e4e8000 1e4
Memory 172 480d0000 1a0
Memory 174 80180000 ffffff
Memory 176 4a0d8000 1a0 2dc
Memory 179 a1c00000
Memory 17a 81d80000 ffffff
Memory 17c 4b470000 1a0
Memory 17e 4e4e8000 1e4
Memory 180 a1cd0000 1a0
Memory 182 81d80000 ffffff
Memory 184 4b670000 1a0
Memory 186 4e4e8000 1e4
Memory 188 4e798000 26 24
Memory 18b a6670000 23
Memory 18d 8198000 fffffe7b
Memory 18f c1d80000 12
Memory 191 d1d80000 12
Memory 193 a6780000 1 1a
Memory 196 4e4e8000 1b0
Memory 198 a6780000 1 15
Memory 19b 86780000 ffffff 12
Memory 19e 8198000 fffffe6a
Source 0         lea     WARM, work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source 7 fetch2: mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source 9 fetch:  and     $mask23to0, wpc
Source c         mov     wpc, next
Source e         mov     WARM(next),ci
Source 10         mov     ci, work0
Source 11         shr     $29, work0      ;high 3 condition bits in work0
Source 13         cmovg   COND(work0), rip
Source 15 getop:  mov     ci,op
Source 16         shl     $3,op
Source 18         shr     $26,op
Source 1a         mov     TYPE(op), rip
Source 1c never:  mov     NEVER(wCCR),rip
Source 1e equal:  mov     EQ(wCCR),rip
Source 20 ne:     mov     NE(wCCR),rip
Source 22 lesst:  mov     LT(wCCR),rip
Source 24 lesse:  mov     LE(wCCR),rip
Source 26 greate: mov     GE(wCCR),rip
Source 28 gt:     mov     GT(wCCR),rip
Source 2a noDST:  mov     ci, lhs         
Source 2b         shr     $15, lhs
Source 2d         and     $maskLow4, lhs
Source 2f         jmp     oRHS
Source 31 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 32         shr     $15, lhs
Source 34         and     $maskLow4, lhs
Source 36 oDST:   mov     ci, dst
Source 37         shr     $19, dst
Source 39         and     $maskLow4, dst
Source 3b oRHS:   mov     $maskA, work0
Source 3d         and     ci,work0
Source 3e         shr     $12, work0      ;work 0 holds the addressing mode
Source 40         mov     ADDR(work0), rip
Source 42 imd:    mov     ci, work0
Source 43         and     $maskExp, work0 ;exponent
Source 45         shr     $9, work0
Source 47         and     $maskValue, rhs ;value
Source 49         shl     work0, rhs      ;shifted value in rhs
Source 4a         add     $1, wpc
Source 4d         mov     INSTR(op), rip
Source 4f rim:    mov     ci, shiftC
Source 50         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 52         mov     ci, work0
Source 53         shl     $20, work0
Source 55         shr     $30, work0      ;work0 now has the shop
Source 57         shl     $22, rhs
Source 59         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5b         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 5d         add     $1, wpc
Source 60         mov     SHOP(work0), rip
Source 62 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 64         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 65         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 67         mov     ci, work0
Source 68         shl     $20, work0
Source 6a         shr     $30, work0      ; work0 now has the shift op code
Source 6c         shl     $22, rhs
Source 6e         shr     $28, rhs        ; rhs has rhs register
Source 70         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 72         add     $1, wpc
Source 75         mov     SHOP(work0), rip
Source 77 lsl:    shl     shiftC, rhs
Source 78         mov     INSTR(op), rip
Source 7a lsr:    shr     shiftC, rhs
Source 7b         mov     INSTR(op), rip
Source 7d asr:    sar     shiftC, rhs
Source 7e         mov     INSTR(op), rip
Source 80 ror:    mov     rhs, work0
Source 81         mov     $32, work1      
Source 83         sub     shiftC, work1   ;work0 := 32-shr
Source 84         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 85         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 86         add     work0, rhs
Source 87         mov     INSTR(op), rip
Source 89 rpm:    mov     $maskLow4, work0
Source 8b         and     ci, work0       ;work0 now has src reg 3
Source 8c         shl     $22, rhs
Source 8e         shr     $28, rhs        ; rhs now has src reg 2
Source 90         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 92         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 94         mul     work0, rhs
Source 95         add     $1, wpc
Source 98 add:    add     REGS(lhs), rhs
Source 9a         mov     FETCHT(op), rip
Source 9c adc:    mov     wCCR, work0
Source 9d         shr     $2, work0
Source 9f         shl     $31, work0
Source a1         add     REGS(lhs), rhs
Source a3         add     work0, rhs
Source a4         mov     FETCHT(op), rip
Source a6 sub:    mov     REGS(lhs), work0
Source a8         sub     rhs, work0
Source a9         mov     work0, REGS(dst)
Source ab         mov     FETCHT(op), rip
Source ad eor:    xor     REGS(lhs), rhs
Source af         mov     FETCHT(op), rip
Source b1 orr:    or      REGS(lhs), rhs
Source b3         mov     FETCHT(op), rip
Source b5 and:    and     REGS(lhs), rhs
Source b7         mov     FETCHT(op), rip
Source b9 mul:    mul     REGS(lhs), rhs
Source bb         mov     FETCHT(op), rip
Source bd div:    mov     REGS(lhs), work0
Source bf         div     rhs, work0
Source c0         mov     work0, REGS(dst)
Source c2         mov     FETCHT(op), rip
Source c4 mov:    mov     FETCHT(op), rip
Source c6 mvn:    xor     $flip, rhs
Source c8         mov     FETCHT(op), rip
Source ca swi:    mov     REGS, work0
Source cc         trap    rhs
Source cd         mov     work0, REGS
Source cf         mov     FETCHT(op), rip
Source d1 ldm:    mov     REGS(dst), lhs
Source d3         and     $mask23to0, lhs ;lhs is base register
Source d5         mov     $0, work0       ;work0 holds reg number
Source d7         test    $1, rhs
Source d9         jne     lloading
Source db         add     $1, work0
Source dd         shr     $1, rhs
Source df         je      LDMdone
Source e1         test    $1, rhs
Source e3         jne     lloading
Source e5         jmp     lshifting
Source e7         mov     WARM(lhs), REGS(work0)
Source ea         add     $1, lhs
Source ec         jmp     lshifting
Source ee         mov     lhs, REGS(dst)
Source f0         mov     FETCHT(op), rip
Source f2 stm:    mov     wCCR, work0
Source f3         shl     $24, work0
Source f5         or      work0, wpc
Source f7         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source f9         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source fb         mov     $15, work0      ;work0 holds register number
Source fd         shl     $16, rhs
Source ff         jl      sloading
Source 101         sub     $1, work0       ;
Source 103         shl     $1, rhs         
Source 105         jg      sshifting       ;is the next bit set?
Source 107         je      STMdone
Source 109         sub     $1, lhs                         
Source 10b         mov     REGS(work0), WARM(lhs)
Source 10e         cmp     $0, rhs
Source 110         jne     sshifting
Source 112         mov     lhs, REGS(dst)
Source 114         mov     FETCHT(op), rip
Source 116 cmpCC:  mov     REGS(lhs), work0
Source 118         sub     rhs, work0
Source 119         mov     ccr, wCCR
Source 11a         jmp     fetch
Source 11c tstCC:  test    REGS(lhs), rhs
Source 11e         jmp     fetch3
Source 120 movCC:  mov     rhs, REGS(dst)
Source 122         and     rhs, rhs
Source 123         mov     ccr, wCCR
Source 124         jmp     fetch
Source 126 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 127         shr     $15, lhs
Source 129         and     $maskLow4, lhs  ;lhs now has base register in it
Source 12b         mov     ci, dst
Source 12c         shr     $19, dst
Source 12e         and     $maskLow4, dst  ;dst now has dst register
Source 130         mov     $maskA, work0
Source 132         and     ci, work0
Source 133         shr     $12, work0      ;work0 now has addressing mode
Source 135         mov     lsADDR(work0), rip
Source 137 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 139         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 13b         mov     WARM(rhs), REGS(dst)    ;changed WARM(lhs, rhs) to WARM(rhs)
Source 13e         mov     FETCHT(op), rip
Source 140 str:    add     REGS(lhs), rhs          ;ADDITION
Source 142         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 144         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 147         mov     FETCHT(op), rip
Source 149 ldu:    jge     posldu
Source 14b         add     REGS(lhs), rhs          ;ADDITION
Source 14d         and     $mask23to0, rhs         ;ADDITION:Masking, rhs now has the modified address
Source 14f         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 152         mov     rhs, REGS(lhs)
Source 154         mov     FETCHT(op), rip
Source 156 posldu: mov     REGS(lhs), work0
Source 158         and     $mask23to0, work0
Source 15a         mov     WARM(work0), REGS(dst) ;load base register
Source 15d         add     REGS(lhs), rhs
Source 15f         and     $mask23to0, rhs
Source 161         mov     rhs, REGS(lhs)
Source 163         mov     FETCHT(op), rip         ;this was fetch2 i dont know why
Source 165 stu:    jge     posstu
Source 167         add     REGS(lhs), rhs
Source 169         and     $mask23to0, rhs
Source 16b         mov     REGS(dst), WARM(rhs)
Source 16e         mov     rhs, REGS(lhs)
Source 170         mov     FETCHT(op), rip
Source 172 posstu: mov     REGS(lhs), work0
Source 174         and     $mask23to0, work0 ;warm has effective address
Source 176         mov     REGS(dst), WARM(work0)
Source 179         add     work0, rhs
Source 17a         and     $mask23to0, rhs
Source 17c         mov     rhs, REGS(lhs)
Source 17e         mov     FETCHT(op), rip 
Source 180 adr:    add     REGS(lhs), rhs
Source 182         and     $mask23to0, rhs
Source 184         mov     rhs, REGS(dst)
Source 186         mov     FETCHT(op), rip
Source 188 bl:     mov     wpc, wlr
Source 18b b:      add     ci, wpc
Source 18d         jmp     fetch
Source 18f soff:   shl     $18, rhs
Source 191         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 193         add     $1, wpc
Source 196         mov     INSTR(op), rip
Source 198 no:     add     $1, wpc
Source 19b         and     $mask23to0, wpc
Source 19e         jmp     fetch
End
