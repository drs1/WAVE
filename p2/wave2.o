WindObjectFile1
File wave2.s
Symbol ADDR 525
Symbol ALL3 44
Symbol COND 405
Symbol EQ 429
Symbol GE 493
Symbol GT 509
Symbol INSTR 293
Symbol LE 477
Symbol LT 461
Symbol NE 445
Symbol NEVER 413
Symbol REGS 277
Symbol SHOP 532
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 345
Symbol WARM 536
Symbol adc 154
Symbol adcCC 209
Symbol add 150
Symbol addCC 205
Symbol adr 205
Symbol and 179
Symbol andCC 241
Symbol asr 126
Symbol branch 63
Symbol cmpCC 227
Symbol div 187
Symbol divCC 253
Symbol eor 171
Symbol eorCC 233
Symbol equal 25
Symbol fetch 9
Symbol fetch2 7
Symbol fetch3 6
Symbol flip -1
Symbol getop 16
Symbol greate 33
Symbol gt 35
Symbol imd 76
Symbol ldm 205
Symbol ldmCC 273
Symbol ldr 205
Symbol ldrCC 273
Symbol ldu 205
Symbol lduCC 273
Symbol lesse 31
Symbol lesst 29
Symbol ls 63
Symbol lsl 120
Symbol lsr 123
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 7936
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 194
Symbol movCC 261
Symbol mul 183
Symbol mulCC 249
Symbol mvn 196
Symbol mvnCC 266
Symbol ne 27
Symbol never 23
Symbol next 273
Symbol noDST 37
Symbol oDST 49
Symbol oRHS 54
Symbol orr 175
Symbol orrCC 237
Symbol rim 86
Symbol ror 129
Symbol rpm 138
Symbol rsr 102
Symbol stm 205
Symbol str 205
Symbol strCC 273
Symbol stu 205
Symbol stuCC 273
Symbol sub 164
Symbol subCC 219
Symbol swi 200
Symbol swiCC 270
Symbol tstCC 245
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register wlr 4
Register work0 0
Register work1 1
Register wpc 15
Memory 115 0
Memory 116 0
Memory 117 0
Memory 118 0
Memory 119 0
Memory 11a 0
Memory 11b 0
Memory 11c 0
Memory 11d 0
Memory 11e 0
Memory 11f 0
Memory 120 0
Memory 121 0
Memory 122 ffffff
Memory 123 0
Memory 124 0
Memory 125 96
Memory 126 9a
Memory 127 a4
Memory 128 0
Memory 129 ab
Memory 12a af
Memory 12b b3
Memory 12c 0
Memory 12d b7
Memory 12e 0
Memory 12f bb
Memory 130 c2
Memory 131 c4
Memory 132 c8
Memory 133 cd
Memory 134 cd
Memory 135 cd
Memory 136 cd
Memory 137 cd
Memory 138 cd
Memory 139 cd
Memory 13a 0
Memory 13b 0
Memory 13c 0
Memory 13d 0
Memory 13e 0
Memory 13f 0
Memory 140 0
Memory 141 0
Memory 142 0
Memory 143 0
Memory 144 0
Memory 145 cd
Memory 146 d1
Memory 147 db
Memory 148 e3
Memory 149 e9
Memory 14a ed
Memory 14b f1
Memory 14c f5
Memory 14d f9
Memory 14e 0
Memory 14f fd
Memory 150 105
Memory 151 10a
Memory 152 10e
Memory 153 111
Memory 154 0
Memory 155 111
Memory 156 111
Memory 157 111
Memory 158 111
Memory 159 2c
Memory 15a 2c
Memory 15b 2c
Memory 15c 25
Memory 15d 2c
Memory 15e 2c
Memory 15f 2c
Memory 160 25
Memory 161 2c
Memory 162 2c
Memory 163 2c
Memory 164 31
Memory 165 31
Memory 166 36
Memory 167 2c
Memory 168 3f
Memory 169 3f
Memory 16a 3f
Memory 16b 3f
Memory 16c 3f
Memory 16d 3f
Memory 16e 0
Memory 16f 0
Memory 170 0
Memory 171 3f
Memory 172 3f
Memory 173 3f
Memory 174 3f
Memory 175 0
Memory 176 0
Memory 177 0
Memory 178 0
Memory 179 2c
Memory 17a 2c
Memory 17b 2c
Memory 17c 25
Memory 17d 2c
Memory 17e 2c
Memory 17f 25
Memory 180 2c
Memory 181 2c
Memory 182 0
Memory 183 2c
Memory 184 31
Memory 185 31
Memory 186 36
Memory 187 2c
Memory 188 3f
Memory 189 3f
Memory 18a 3f
Memory 18b 3f
Memory 18c 3f
Memory 18d 3f
Memory 18e 0
Memory 18f 0
Memory 190 0
Memory 191 3f
Memory 192 3f
Memory 193 3f
Memory 194 3f
Memory 195 0
Memory 196 17
Memory 197 19
Memory 198 1b
Memory 199 1d
Memory 19a 1f
Memory 19b 21
Memory 19c 23
Memory 19d 111
Memory 19e 111
Memory 19f 111
Memory 1a0 111
Memory 1a1 111
Memory 1a2 111
Memory 1a3 111
Memory 1a4 111
Memory 1a5 111
Memory 1a6 111
Memory 1a7 111
Memory 1a8 111
Memory 1a9 111
Memory 1aa 111
Memory 1ab 111
Memory 1ac 111
Memory 1ad 111
Memory 1ae 111
Memory 1af 111
Memory 1b0 111
Memory 1b1 10
Memory 1b2 10
Memory 1b3 10
Memory 1b4 111
Memory 1b5 111
Memory 1b6 111
Memory 1b7 111
Memory 1b8 111
Memory 1b9 111
Memory 1ba 10
Memory 1bb 10
Memory 1bc 10
Memory 1bd 10
Memory 1be 10
Memory 1bf 10
Memory 1c0 10
Memory 1c1 111
Memory 1c2 111
Memory 1c3 111
Memory 1c4 10
Memory 1c5 10
Memory 1c6 10
Memory 1c7 10
Memory 1c8 10
Memory 1c9 10
Memory 1ca 111
Memory 1cb 111
Memory 1cc 111
Memory 1cd 111
Memory 1ce 10
Memory 1cf 111
Memory 1d0 10
Memory 1d1 111
Memory 1d2 10
Memory 1d3 111
Memory 1d4 10
Memory 1d5 10
Memory 1d6 111
Memory 1d7 10
Memory 1d8 10
Memory 1d9 111
Memory 1da 10
Memory 1db 111
Memory 1dc 10
Memory 1dd 111
Memory 1de 10
Memory 1df 111
Memory 1e0 10
Memory 1e1 10
Memory 1e2 10
Memory 1e3 10
Memory 1e4 10
Memory 1e5 10
Memory 1e6 111
Memory 1e7 10
Memory 1e8 10
Memory 1e9 111
Memory 1ea 10
Memory 1eb 10
Memory 1ec 10
Memory 1ed 10
Memory 1ee 111
Memory 1ef 10
Memory 1f0 111
Memory 1f1 10
Memory 1f2 111
Memory 1f3 10
Memory 1f4 111
Memory 1f5 10
Memory 1f6 111
Memory 1f7 10
Memory 1f8 111
Memory 1f9 10
Memory 1fa 111
Memory 1fb 10
Memory 1fc 111
Memory 1fd 10
Memory 1fe 111
Memory 1ff 10
Memory 200 111
Memory 201 111
Memory 202 111
Memory 203 111
Memory 204 111
Memory 205 111
Memory 206 10
Memory 207 111
Memory 208 111
Memory 209 10
Memory 20a 111
Memory 20b 111
Memory 20c 111
Memory 20d 4c
Memory 20e 4c
Memory 20f 4c
Memory 210 4c
Memory 211 56
Memory 212 66
Memory 213 8a
Memory 214 78
Memory 215 7b
Memory 216 7e
Memory 217 81
Memory 0 40198000 217
Memory 2 180000 6
Memory 4 8198000 4
Memory 6 491a0000
Memory 7 4b670000 115
Memory 9 49cf8000 218
Memory b 48070000
Memory c c8180000 1d
Memory e 7e480000 195
Memory 10 49a70000
Memory 11 c1b80000 3
Memory 13 c9b80000 1a
Memory 15 4e4e8000 159
Memory 17 4e4c0000 19d
Memory 19 4e4c0000 1ad
Memory 1b 4e4c0000 1bd
Memory 1d 4e4c0000 1cd
Memory 1f 4e4c0000 1dd
Memory 21 4e4c0000 1ed
Memory 23 4e4c0000 1fd
Memory 25 49870000
Memory 26 c9980000 f
Memory 28 81980000 f
Memory 2a 8198000 b
Memory 2c 49870000
Memory 2d c9980000 f
Memory 2f 81980000 f
Memory 31 49670000
Memory 32 c9780000 13
Memory 34 81780000 f
Memory 36 48180000 7800
Memory 38 80070000
Memory 39 c8180000 c
Memory 3b a1f80000 1
Memory 3d 4e480000 20d
Memory 3f a1e70000
Memory 40 81f80000 ffffff
Memory 42 c9d80000 16
Memory 44 4e870000
Memory 45 28198000 ffffffc3
Memory 47 48878000
Memory 48 a0980000 1
Memory 4a 8198000 ffffffbe
Memory 4c 48070000
Memory 4d 80180000 1f00
Memory 4f c8180000 9
Memory 51 81d80000 1ff
Memory 53 c1c00000
Memory 54 4e4e8000 125
Memory 56 49270000
Memory 57 81380000 3f
Memory 59 48070000
Memory 5a c0180000 14
Memory 5c c8180000 1e
Memory 5e c1d80000 16
Memory 60 c9d80000 1c
Memory 62 49cf0000 115
Memory 64 4e480000 214
Memory 66 49380000 f
Memory 68 81270000
Memory 69 492c8000 115
Memory 6b 48070000
Memory 6c c0180000 14
Memory 6e c8180000 1e
Memory 70 c1d80000 16
Memory 72 c9d80000 1c
Memory 74 49cf0000 115
Memory 76 4e480000 214
Memory 78 c1c48000
Memory 79 4e4e8000 125
Memory 7b c9c48000
Memory 7c 4e4e8000 125
Memory 7e d1c48000
Memory 7f 4e4e8000 125
Memory 81 48070000
Memory 82 48380000 20
Memory 84 a8248000
Memory 85 c0008000
Memory 86 c9c48000
Memory 87 a1c00000
Memory 88 4e4e8000 125
Memory 8a 48180000 f
Memory 8c 80070000
Memory 8d c1d80000 16
Memory 8f c9d80000 1c
Memory 91 49cf0000 115
Memory 93 48080000 115
Memory 95 b1c00000
Memory 96 a1ce0000 115
Memory 98 8198000 ffffff6e
Memory 9a 48040000
Memory 9b c8180000 2
Memory 9d c0180000 1f
Memory 9f a1ce0000 115
Memory a1 a1c00000
Memory a2 8198000 ffffff64
Memory a4 480e0000 115
Memory a6 a8070000
Memory a7 4b600000 115
Memory a9 8198000 ffffff5f
Memory ab 91ce0000 115
Memory ad 8198000 ffffff59
Memory af 89ce0000 115
Memory b1 8198000 ffffff55
Memory b3 81ce0000 115
Memory b5 8198000 ffffff51
Memory b7 b1ce0000 115
Memory b9 8198000 ffffff4d
Memory bb 480e0000 115
Memory bd b8070000
Memory be 4b600000 115
Memory c0 8198000 ffffff48
Memory c2 8198000 ffffff44
Memory c4 91d80000 ffffffff
Memory c6 8198000 ffffff40
Memory c8 480a8000 115
Memory ca 70000
Memory cb 8198000 ffffff3d
Memory cd a1ce0000 115
Memory cf 8198000 ffffff36
Memory d1 48040000
Memory d2 c8180000 2
Memory d4 c0180000 1f
Memory d6 a1ce0000 115
Memory d8 a1c00000
Memory d9 8198000 ffffff2c
Memory db 480e0000 115
Memory dd a8070000
Memory de 491a0000
Memory df 4b600000 115
Memory e1 8198000 ffffff27
Memory e3 480e0000 115
Memory e5 a8070000
Memory e6 491a0000
Memory e7 8198000 ffffff21
Memory e9 91ce0000 115
Memory eb 8198000 ffffff1a
Memory ed 89ce0000 115
Memory ef 8198000 ffffff16
Memory f1 81ce0000 115
Memory f3 8198000 ffffff12
Memory f5 d9ce0000 115
Memory f7 8198000 ffffff0e
Memory f9 b1ce0000 115
Memory fb 8198000 ffffff0a
Memory fd 480e0000 115
Memory ff b8070000
Memory 100 491a0000
Memory 101 4b600000 115
Memory 103 8198000 ffffff05
Memory 105 4b670000 115
Memory 107 491a0000
Memory 108 8198000 ffffff00
Memory 10a 91d80000 ffffffff
Memory 10c 8198000 fffffef9
Memory 10e 70000
Memory 10f 8198000 fffffef6
Memory 111 a1f80000 1
Memory 113 8198000 fffffef5
Source 0         lea     WARM,work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch3: mov     ccr,wCCR        ;----------------------------TOP-------------------;
Source 7 fetch2: mov     rhs, REGS(dst)  ;----------------------------TOP-------------------;
Source 9 fetch:  mov     WARM(wpc),ci    ;----------------------------TOP-------------------;
Source b         mov     ci, work0
Source c         shr     $29, work0      ;high 3 condition bits in work0
Source e         cmovg   COND(work0), rip
Source 10 getop:  mov     ci,op
Source 11         shl     $3,op
Source 13         shr     $26,op
Source 15         mov     TYPE(op), rip
Source 17 never:  mov     NEVER(wCCR),rip
Source 19 equal:  mov     EQ(wCCR),rip
Source 1b ne:     mov     NE(wCCR),rip
Source 1d lesst:  mov     LT(wCCR),rip
Source 1f lesse:  mov     LE(wCCR),rip
Source 21 greate: mov     GE(wCCR),rip
Source 23 gt:     mov     GT(wCCR),rip
Source 25 noDST:  mov     ci, lhs         ;get dst and lhs
Source 26         shr     $15, lhs
Source 28         and     $maskLow4, lhs
Source 2a         jmp     oRHS
Source 2c ALL3:   mov     ci, lhs         ;get dst and lhs
Source 2d         shr     $15, lhs
Source 2f         and     $maskLow4, lhs
Source 31 oDST:   mov     ci, dst
Source 32         shr     $19, dst
Source 34         and     $maskLow4, dst
Source 36 oRHS:   mov     $maskA, work0
Source 38         and     ci,work0
Source 39         shr     $12, work0      ;work 0 holds the addressing mode
Source 3b         add     $1, wpc
Source 3d         mov     ADDR(work0), rip
Source 3f branch: add     ci, wpc
Source 40         and     $mask23to0, wpc
Source 42         shr     $22,ci
Source 44         mov     ci, ccr 
Source 45         jne     fetch
Source 47         mov     wpc, wlr
Source 48         add     $1, wlr
Source 4a         jmp     fetch
Source 4c imd:    mov     ci, work0
Source 4d         and     $maskExp, work0 ;exponent
Source 4f         shr     $9, work0
Source 51         and     $maskValue, rhs ;value
Source 53         shl     work0, rhs      ;shifted value in rhs
Source 54         mov     INSTR(op), rip
Source 56 rim:    mov     ci, shiftC
Source 57         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 59         mov     ci, work0
Source 5a         shl     $20, work0
Source 5c         shr     $30, work0      ;work0 now has the shop
Source 5e         shl     $22, rhs
Source 60         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 62         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 64         mov     SHOP(work0), rip
Source 66 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 68         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 69         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 6b         mov     ci, work0
Source 6c         shl     $20, work0
Source 6e         shr     $30, work0      ; work0 now has the shift op code
Source 70         shl     $22, rhs
Source 72         shr     $28, rhs        ; rhs has rhs register
Source 74         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 76         mov     SHOP(work0), rip
Source 78 lsl:    shl     shiftC, rhs
Source 79         mov     INSTR(op), rip
Source 7b lsr:    shr     shiftC, rhs
Source 7c         mov     INSTR(op), rip
Source 7e asr:    sar     shiftC, rhs
Source 7f         mov     INSTR(op), rip
Source 81 ror:    mov     rhs, work0
Source 82         mov     $32, work1      
Source 84         sub     shiftC, work1   ;work1 := 32-shr
Source 85         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source 86         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source 87         add     work0, rhs
Source 88         mov     INSTR(op), rip
Source 8a rpm:    mov     $maskLow4, work0
Source 8c         and     ci, work0       ;work0 now has src reg 3
Source 8d         shl     $22, rhs
Source 8f         shr     $28, rhs        ; rhs now has src reg 2
Source 91         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 93         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 95         mul     work0, rhs
Source 96 add:    add     REGS(lhs), rhs
Source 98         jmp     fetch2
Source 9a adc:    mov     wCCR, work0
Source 9b         shr     $2, work0
Source 9d         shl     $31, work0
Source 9f         add     REGS(lhs), rhs
Source a1         add     work0, rhs
Source a2         jmp     fetch2
Source a4 sub:    mov     REGS(lhs), work0
Source a6         sub     rhs, work0
Source a7         mov     work0, REGS(dst)
Source a9         jmp     fetch
Source ab eor:    xor     REGS(lhs), rhs
Source ad         jmp     fetch2
Source af orr:    or      REGS(lhs), rhs
Source b1         jmp     fetch2
Source b3 and:    and     REGS(lhs), rhs
Source b5         jmp     fetch2
Source b7 mul:    mul     REGS(lhs), rhs
Source b9         jmp     fetch2
Source bb div:    mov     REGS(lhs), work0
Source bd         div     rhs, work0
Source be         mov     work0, REGS(dst)
Source c0         jmp     fetch   
Source c2 mov:    jmp     fetch2
Source c4 mvn:    xor     $flip, rhs
Source c6         jmp     fetch2
Source c8 swi:    mov     REGS(alwaysZ), work0
Source ca         trap    rhs
Source cb         jmp     fetch
Source cd addCC:  add     REGS(lhs), rhs
Source cf         jmp     fetch3
Source d1 adcCC:  mov     wCCR, work0
Source d2         shr     $2, work0
Source d4         shl     $31, work0
Source d6         add     REGS(lhs), rhs
Source d8         add     work0, rhs
Source d9         jmp     fetch3
Source db subCC:  mov     REGS(lhs), work0
Source dd         sub     rhs, work0
Source de         mov     ccr,wCCR
Source df         mov     work0, REGS(dst)
Source e1         jmp     fetch
Source e3 cmpCC:  mov     REGS(lhs), work0
Source e5         sub     rhs, work0
Source e6         mov     ccr, wCCR
Source e7         jmp     fetch
Source e9 eorCC:  xor     REGS(lhs), rhs
Source eb         jmp     fetch3
Source ed orrCC:  or      REGS(lhs), rhs
Source ef         jmp     fetch3
Source f1 andCC:  and     REGS(lhs), rhs
Source f3         jmp     fetch3
Source f5 tstCC:  test    REGS(lhs), rhs
Source f7         jmp     fetch3
Source f9 mulCC:  mul     REGS(lhs), rhs
Source fb         jmp     fetch3
Source fd divCC:  mov     REGS(lhs), work0
Source ff         div     rhs, work0
Source 100         mov     ccr,wCCR                
Source 101         mov     work0, REGS(dst)
Source 103         jmp     fetch
Source 105 movCC:  mov     rhs, REGS(dst)
Source 107         mov     ccr,wCCR                        
Source 108         jmp     fetch
Source 10a mvnCC:  xor     $flip,rhs
Source 10c         jmp     fetch3
Source 10e swiCC:  trap    rhs
Source 10f         jmp     fetch3
Source 111 next:   add     $1, wpc
Source 113         jmp     fetch
End
