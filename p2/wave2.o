WindObjectFile1
File wave2.s
Symbol ADDR 827
Symbol ALL3 50
Symbol COND 707
Symbol EQ 731
Symbol GE 795
Symbol GT 811
Symbol INSTR 595
Symbol LDMdone 247
Symbol LE 779
Symbol LT 763
Symbol NE 747
Symbol NEVER 715
Symbol REGS 579
Symbol SHOP 834
Symbol STMdone 288
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 647
Symbol WARM 843
Symbol adc 169
Symbol adcCC 296
Symbol add 165
Symbol addCC 292
Symbol adr 461
Symbol and 194
Symbol andCC 328
Symbol asr 135
Symbol b 546
Symbol bl 553
Symbol cmpCC 314
Symbol div 202
Symbol divCC 340
Symbol eor 186
Symbol eorCC 320
Symbol equal 31
Symbol fetch 13
Symbol fetch2 11
Symbol fetch3 10
Symbol flip -1
Symbol getop 22
Symbol greate 39
Symbol gt 41
Symbol imd 67
Symbol ldm 220
Symbol ldmCC 361
Symbol ldr 384
Symbol ldrCC 469
Symbol ldu 402
Symbol lduCC 487
Symbol lesse 37
Symbol lesst 35
Symbol lloading 238
Symbol ls 361
Symbol lsADDR 838
Symbol lshifting 230
Symbol lsl 129
Symbol lsr 132
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 209
Symbol movCC 348
Symbol mul 198
Symbol mulCC 336
Symbol mvn 211
Symbol mvnCC 354
Symbol ne 33
Symbol never 29
Symbol no 571
Symbol noDST 43
Symbol oDST 55
Symbol oRHS 60
Symbol orr 190
Symbol orrCC 324
Symbol posldu 417
Symbol poslduCC 502
Symbol posstu 447
Symbol posstuCC 532
Symbol rim 83
Symbol ror 138
Symbol rpm 147
Symbol rsr 105
Symbol sloading 279
Symbol soff 563
Symbol sshifting 271
Symbol stm 256
Symbol str 393
Symbol strCC 478
Symbol stu 432
Symbol stuCC 517
Symbol sub 179
Symbol subCC 306
Symbol swi 215
Symbol swiCC 358
Symbol tstCC 332
Symbol wlr 593
Symbol wpc 594
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register work0 0
Register work1 1
Memory 243 0
Memory 244 0
Memory 245 0
Memory 246 0
Memory 247 0
Memory 248 0
Memory 249 0
Memory 24a 0
Memory 24b 0
Memory 24c 0
Memory 24d 0
Memory 24e 0
Memory 24f 0
Memory 250 ffffff
Memory 251 0
Memory 252 0
Memory 253 a5
Memory 254 a9
Memory 255 b3
Memory 256 0
Memory 257 ba
Memory 258 be
Memory 259 c2
Memory 25a 0
Memory 25b c6
Memory 25c 0
Memory 25d ca
Memory 25e d1
Memory 25f d3
Memory 260 d7
Memory 261 dc
Memory 262 100
Memory 263 180
Memory 264 189
Memory 265 192
Memory 266 1b0
Memory 267 1cd
Memory 268 0
Memory 269 0
Memory 26a 0
Memory 26b 0
Memory 26c 0
Memory 26d 0
Memory 26e 0
Memory 26f 0
Memory 270 0
Memory 271 0
Memory 272 0
Memory 273 124
Memory 274 128
Memory 275 132
Memory 276 13a
Memory 277 140
Memory 278 144
Memory 279 148
Memory 27a 14c
Memory 27b 150
Memory 27c 0
Memory 27d 154
Memory 27e 15c
Memory 27f 162
Memory 280 166
Memory 281 169
Memory 282 0
Memory 283 1d5
Memory 284 1de
Memory 285 1e7
Memory 286 205
Memory 287 32
Memory 288 32
Memory 289 32
Memory 28a 2b
Memory 28b 32
Memory 28c 32
Memory 28d 32
Memory 28e 2b
Memory 28f 32
Memory 290 32
Memory 291 32
Memory 292 37
Memory 293 37
Memory 294 3c
Memory 295 32
Memory 296 37
Memory 297 169
Memory 298 169
Memory 299 169
Memory 29a 169
Memory 29b 169
Memory 29c 0
Memory 29d 0
Memory 29e 0
Memory 29f 222
Memory 2a0 222
Memory 2a1 229
Memory 2a2 229
Memory 2a3 0
Memory 2a4 0
Memory 2a5 0
Memory 2a6 0
Memory 2a7 32
Memory 2a8 32
Memory 2a9 32
Memory 2aa 2b
Memory 2ab 32
Memory 2ac 32
Memory 2ad 2b
Memory 2ae 32
Memory 2af 32
Memory 2b0 0
Memory 2b1 32
Memory 2b2 37
Memory 2b3 37
Memory 2b4 3c
Memory 2b5 32
Memory 2b6 169
Memory 2b7 169
Memory 2b8 169
Memory 2b9 169
Memory 2ba 169
Memory 2bb 169
Memory 2bc 0
Memory 2bd 0
Memory 2be 0
Memory 2bf 222
Memory 2c0 222
Memory 2c1 229
Memory 2c2 229
Memory 2c3 0
Memory 2c4 1d
Memory 2c5 1f
Memory 2c6 21
Memory 2c7 23
Memory 2c8 25
Memory 2c9 27
Memory 2ca 29
Memory 2cb 23b
Memory 2cc 23b
Memory 2cd 23b
Memory 2ce 23b
Memory 2cf 23b
Memory 2d0 23b
Memory 2d1 23b
Memory 2d2 23b
Memory 2d3 23b
Memory 2d4 23b
Memory 2d5 23b
Memory 2d6 23b
Memory 2d7 23b
Memory 2d8 23b
Memory 2d9 23b
Memory 2da 23b
Memory 2db 23b
Memory 2dc 23b
Memory 2dd 23b
Memory 2de 23b
Memory 2df 16
Memory 2e0 16
Memory 2e1 16
Memory 2e2 23b
Memory 2e3 23b
Memory 2e4 23b
Memory 2e5 23b
Memory 2e6 23b
Memory 2e7 23b
Memory 2e8 16
Memory 2e9 16
Memory 2ea 16
Memory 2eb 16
Memory 2ec 16
Memory 2ed 16
Memory 2ee 16
Memory 2ef 23b
Memory 2f0 23b
Memory 2f1 23b
Memory 2f2 16
Memory 2f3 16
Memory 2f4 16
Memory 2f5 16
Memory 2f6 16
Memory 2f7 16
Memory 2f8 23b
Memory 2f9 23b
Memory 2fa 23b
Memory 2fb 23b
Memory 2fc 16
Memory 2fd 23b
Memory 2fe 16
Memory 2ff 23b
Memory 300 16
Memory 301 23b
Memory 302 16
Memory 303 16
Memory 304 23b
Memory 305 16
Memory 306 16
Memory 307 23b
Memory 308 16
Memory 309 23b
Memory 30a 16
Memory 30b 23b
Memory 30c 16
Memory 30d 23b
Memory 30e 16
Memory 30f 16
Memory 310 16
Memory 311 16
Memory 312 16
Memory 313 16
Memory 314 23b
Memory 315 16
Memory 316 16
Memory 317 23b
Memory 318 16
Memory 319 16
Memory 31a 16
Memory 31b 16
Memory 31c 23b
Memory 31d 16
Memory 31e 23b
Memory 31f 16
Memory 320 23b
Memory 321 16
Memory 322 23b
Memory 323 16
Memory 324 23b
Memory 325 16
Memory 326 23b
Memory 327 16
Memory 328 23b
Memory 329 16
Memory 32a 23b
Memory 32b 16
Memory 32c 23b
Memory 32d 16
Memory 32e 23b
Memory 32f 23b
Memory 330 23b
Memory 331 23b
Memory 332 23b
Memory 333 23b
Memory 334 16
Memory 335 23b
Memory 336 23b
Memory 337 16
Memory 338 23b
Memory 339 23b
Memory 33a 23b
Memory 33b 43
Memory 33c 43
Memory 33d 43
Memory 33e 43
Memory 33f 53
Memory 340 69
Memory 341 93
Memory 342 81
Memory 343 84
Memory 344 87
Memory 345 8a
Memory 346 233
Memory 347 233
Memory 348 233
Memory 349 233
Memory 34a 53
Memory 0 40198000 251
Memory 2 40198000 240
Memory 4 40198000 346
Memory 6 180000 6
Memory 8 8198000 4
Memory a 491a0000
Memory b 4b670000 243
Memory d 48598000 244
Memory f 49c90000 34b
Memory 11 48070000
Memory 12 c8180000 1d
Memory 14 7e480000 2c3
Memory 16 49a70000
Memory 17 c1b80000 3
Memory 19 c9b80000 1a
Memory 1b 4e4e8000 287
Memory 1d 4e4c0000 2cb
Memory 1f 4e4c0000 2db
Memory 21 4e4c0000 2eb
Memory 23 4e4c0000 2fb
Memory 25 4e4c0000 30b
Memory 27 4e4c0000 31b
Memory 29 4e4c0000 32b
Memory 2b 49470000
Memory 2c c9580000 f
Memory 2e 81580000 f
Memory 30 8198000 b
Memory 32 49470000
Memory 33 c9580000 f
Memory 35 81580000 f
Memory 37 49670000
Memory 38 c9780000 13
Memory 3a 81780000 f
Memory 3c 48180000 7800
Memory 3e 80070000
Memory 3f c8180000 c
Memory 41 4e480000 33b
Memory 43 48070000
Memory 44 80180000 3e00
Memory 46 c8180000 9
Memory 48 81d80000 1ff
Memory 4a c1c00000
Memory 4b a6780000 1 205
Memory 4e 86780000 ffffff 202
Memory 51 4e4e8000 253
Memory 53 49270000
Memory 54 81380000 3f
Memory 56 48070000
Memory 57 c0180000 14
Memory 59 c8180000 1e
Memory 5b c1d80000 16
Memory 5d c9d80000 1c
Memory 5f 49cf0000 243
Memory 61 a6780000 1 1ef
Memory 64 86780000 ffffff 1ec
Memory 67 4e480000 342
Memory 69 49380000 f
Memory 6b 81270000
Memory 6c 492c8000 243
Memory 6e 48070000
Memory 6f c0180000 14
Memory 71 c8180000 1e
Memory 73 c1d80000 16
Memory 75 c9d80000 1c
Memory 77 49cf0000 243
Memory 79 a6780000 1 1d7
Memory 7c 86780000 ffffff 1d4
Memory 7f 4e480000 342
Memory 81 c1c48000
Memory 82 4e4e8000 253
Memory 84 c9c48000
Memory 85 4e4e8000 253
Memory 87 d1c48000
Memory 88 4e4e8000 253
Memory 8a 48070000
Memory 8b 48380000 20
Memory 8d a8248000
Memory 8e c0008000
Memory 8f c9c48000
Memory 90 a1c00000
Memory 91 4e4e8000 253
Memory 93 48180000 f
Memory 95 80070000
Memory 96 c1d80000 16
Memory 98 c9d80000 1c
Memory 9a 49cf0000 243
Memory 9c 48080000 243
Memory 9e b1c00000
Memory 9f a6780000 1 1b1
Memory a2 86780000 ffffff 1ae
Memory a5 a1cd0000 243
Memory a7 8198000 ffffff63
Memory a9 48040000
Memory aa c8180000 2
Memory ac c0180000 1f
Memory ae a1cd0000 243
Memory b0 a1c00000
Memory b1 8198000 ffffff59
Memory b3 480d0000 243
Memory b5 a8070000
Memory b6 4b600000 243
Memory b8 8198000 ffffff54
Memory ba 91cd0000 243
Memory bc 8198000 ffffff4e
Memory be 89cd0000 243
Memory c0 8198000 ffffff4a
Memory c2 81cd0000 243
Memory c4 8198000 ffffff46
Memory c6 b1cd0000 243
Memory c8 8198000 ffffff42
Memory ca 480d0000 243
Memory cc b8070000
Memory cd 4b600000 243
Memory cf 8198000 ffffff3d
Memory d1 8198000 ffffff39
Memory d3 91d80000 ffffffff
Memory d5 8198000 ffffff35
Memory d7 480a8000 243
Memory d9 70000
Memory da 8198000 ffffff32
Memory dc 494d8000 243
Memory de 81580000 ffffff
Memory e0 48180000 f
Memory e2 c1d80000 10
Memory e4 10198000 9
Memory e6 a8180000 1
Memory e8 c1d80000 1
Memory ea 38198000 fffffffb
Memory ec 20198000 a
Memory ee a1580000 1
Memory f0 4a0d0000 34b 243
Memory f3 99d80000 0
Memory f5 28198000 fffffff0
Memory f7 4b650000 243
Memory f9 48198000 158
Memory fb c8180000 18
Memory fd 49000000
Memory fe 8198000 ffffff0e
Memory 100 48040000
Memory 101 c0180000 18
Memory 103 a6600000 14e
Memory 105 494d8000 243
Memory 107 81580000 ffffff
Memory 109 48180000 f
Memory 10b c1d80000 10
Memory 10d 10198000 9
Memory 10f a8180000 1
Memory 111 c1d80000 1
Memory 113 38198000 fffffffb
Memory 115 20198000 a
Memory 117 a9580000 1
Memory 119 4b480000 243 34b
Memory 11c 99d80000 0
Memory 11e 28198000 fffffff0
Memory 120 4b650000 243
Memory 122 8198000 fffffeea
Memory 124 a1cd0000 243
Memory 126 8198000 fffffee3
Memory 128 48040000
Memory 129 c8180000 2
Memory 12b c0180000 1f
Memory 12d a1cd0000 243
Memory 12f a1c00000
Memory 130 8198000 fffffed9
Memory 132 480d0000 243
Memory 134 a8070000
Memory 135 491a0000
Memory 136 4b600000 243
Memory 138 8198000 fffffed4
Memory 13a 480d0000 243
Memory 13c a8070000
Memory 13d 491a0000
Memory 13e 8198000 fffffece
Memory 140 91cd0000 243
Memory 142 8198000 fffffec7
Memory 144 89cd0000 243
Memory 146 8198000 fffffec3
Memory 148 81cd0000 243
Memory 14a 8198000 fffffebf
Memory 14c d9cd0000 243
Memory 14e 8198000 fffffebb
Memory 150 b1cd0000 243
Memory 152 8198000 fffffeb7
Memory 154 480d0000 243
Memory 156 b8070000
Memory 157 491a0000
Memory 158 4b600000 243
Memory 15a 8198000 fffffeb2
Memory 15c 4b670000 243
Memory 15e 81c70000
Memory 15f 491a0000
Memory 160 8198000 fffffeac
Memory 162 91d80000 ffffffff
Memory 164 8198000 fffffea5
Memory 166 70000
Memory 167 8198000 fffffea2
Memory 169 49470000
Memory 16a c9580000 f
Memory 16c 81580000 f
Memory 16e 49670000
Memory 16f c9780000 13
Memory 171 81780000 f
Memory 173 48180000 7800
Memory 175 80070000
Memory 176 c8180000 c
Memory 178 a6780000 1 d8
Memory 17b 86780000 ffffff d5
Memory 17e 4e480000 346
Memory 180 a1cd0000 243
Memory 182 81d80000 ffffff
Memory 184 4b6f0000 34b 243
Memory 187 8198000 fffffe85
Memory 189 a1cd0000 243
Memory 18b 81d80000 ffffff
Memory 18d 4bcd8000 243 34b
Memory 190 8198000 fffffe7c
Memory 192 99d88000 0
Memory 194 38198000 c
Memory 196 a1cd0000 243
Memory 198 81d80000 ffffff
Memory 19a 4b6f0000 34b 243
Memory 19d 4b470000 243
Memory 19f 8198000 fffffe6d
Memory 1a1 480d0000 243
Memory 1a3 80180000 ffffff
Memory 1a5 4b680000 34b 243
Memory 1a8 a1cd0000 243
Memory 1aa 81d80000 ffffff
Memory 1ac 4b470000 243
Memory 1ae 8198000 fffffe5e
Memory 1b0 99d80000 0
Memory 1b2 38198000 c
Memory 1b4 a1cd0000 243
Memory 1b6 81d80000 ffffff
Memory 1b8 4bcd8000 243 34b
Memory 1bb 4b470000 243
Memory 1bd 8198000 fffffe4f
Memory 1bf 480d0000 243
Memory 1c1 80180000 ffffff
Memory 1c3 4a0d8000 243 34b
Memory 1c6 a1c00000
Memory 1c7 81d80000 ffffff
Memory 1c9 4b470000 243
Memory 1cb 8198000 fffffe41
Memory 1cd a1cd0000 243
Memory 1cf 81d80000 ffffff
Memory 1d1 4b670000 243
Memory 1d3 8198000 fffffe39
Memory 1d5 a1cd0000 243
Memory 1d7 81d80000 ffffff
Memory 1d9 4b6f0000 34b 243
Memory 1dc 8198000 fffffe2d
Memory 1de a1cd0000 243
Memory 1e0 81d80000 ffffff
Memory 1e2 4bcd8000 243 34b
Memory 1e5 8198000 fffffe24
Memory 1e7 99d88000 0
Memory 1e9 38198000 c
Memory 1eb a1cd0000 243
Memory 1ed 81d80000 ffffff
Memory 1ef 4b6f0000 34b 243
Memory 1f2 4b470000 243
Memory 1f4 8198000 fffffe15
Memory 1f6 480d0000 243
Memory 1f8 80180000 ffffff
Memory 1fa 4b680000 34b 243
Memory 1fd a1cd0000 243
Memory 1ff 81d80000 ffffff
Memory 201 4b470000 243
Memory 203 8198000 fffffe06
Memory 205 99d80000 0
Memory 207 38198000 c
Memory 209 a1cd0000 243
Memory 20b 81d80000 ffffff
Memory 20d 4bcd8000 243 34b
Memory 210 4b470000 243
Memory 212 8198000 fffffdf7
Memory 214 480d0000 243
Memory 216 80180000 ffffff
Memory 218 4a0d8000 243 34b
Memory 21b a1c00000
Memory 21c 81d80000 ffffff
Memory 21e 4b470000 243
Memory 220 8198000 fffffde9
Memory 222 a6670000 2f
Memory 224 86780000 ffffff 2c
Memory 227 8198000 fffffde5
Memory 229 4e798000 28 26
Memory 22c a6670000 25
Memory 22e 86780000 ffffff 22
Memory 231 8198000 fffffddb
Memory 233 81d80000 3fff
Memory 235 c1d80000 12
Memory 237 d1d80000 12
Memory 239 4e4e8000 253
Memory 23b a6780000 1 15
Memory 23e 86780000 ffffff 12
Memory 241 8198000 fffffdcb
Source 0         lea     wpc, work0
Source 2         lea     REGS, work0
Source 4         lea     WARM, work0
Source 6         trap    $SysOverlay
Source 8         jmp     fetch
Source a fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source b fetch2: mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source d fetch:  mov     wpc,next        ;--------------------TOP-------------------;
Source f         mov     WARM(next),ci
Source 11         mov     ci, work0
Source 12         shr     $29, work0      ;high 3 condition bits in work0
Source 14         cmovg   COND(work0), rip
Source 16 getop:  mov     ci,op
Source 17         shl     $3,op
Source 19         shr     $26,op
Source 1b         mov     TYPE(op), rip
Source 1d never:  mov     NEVER(wCCR),rip
Source 1f equal:  mov     EQ(wCCR),rip
Source 21 ne:     mov     NE(wCCR),rip
Source 23 lesst:  mov     LT(wCCR),rip
Source 25 lesse:  mov     LE(wCCR),rip
Source 27 greate: mov     GE(wCCR),rip
Source 29 gt:     mov     GT(wCCR),rip
Source 2b noDST:  mov     ci, lhs         ;get dst and lhs
Source 2c         shr     $15, lhs
Source 2e         and     $maskLow4, lhs
Source 30         jmp     oRHS
Source 32 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 33         shr     $15, lhs
Source 35         and     $maskLow4, lhs
Source 37 oDST:   mov     ci, dst
Source 38         shr     $19, dst
Source 3a         and     $maskLow4, dst
Source 3c oRHS:   mov     $maskA, work0
Source 3e         and     ci,work0
Source 3f         shr     $12, work0      ;work 0 holds the addressing mode
Source 41         mov     ADDR(work0), rip
Source 43 imd:    mov     ci, work0
Source 44         and     $maskExp, work0 ;exponent
Source 46         shr     $9, work0
Source 48         and     $maskValue, rhs ;value
Source 4a         shl     work0, rhs      ;shifted value in rhs
Source 4b         add     $1, wpc
Source 4e         and     $mask23to0, wpc
Source 51         mov     INSTR(op), rip
Source 53 rim:    mov     ci, shiftC
Source 54         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 56         mov     ci, work0
Source 57         shl     $20, work0
Source 59         shr     $30, work0      ;work0 now has the shop
Source 5b         shl     $22, rhs
Source 5d         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5f         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 61         add     $1, wpc
Source 64         and     $mask23to0, wpc
Source 67         mov     SHOP(work0), rip
Source 69 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 6b         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 6c         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 6e         mov     ci, work0
Source 6f         shl     $20, work0
Source 71         shr     $30, work0      ; work0 now has the shift op code
Source 73         shl     $22, rhs
Source 75         shr     $28, rhs        ; rhs has rhs register
Source 77         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 79         add     $1, wpc
Source 7c         and     $mask23to0, wpc
Source 7f         mov     SHOP(work0), rip
Source 81 lsl:    shl     shiftC, rhs
Source 82         mov     INSTR(op), rip
Source 84 lsr:    shr     shiftC, rhs
Source 85         mov     INSTR(op), rip
Source 87 asr:    sar     shiftC, rhs
Source 88         mov     INSTR(op), rip
Source 8a ror:    mov     rhs, work0
Source 8b         mov     $32, work1      
Source 8d         sub     shiftC, work1   ;work0 := 32-shr
Source 8e         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 8f         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 90         add     work0, rhs
Source 91         mov     INSTR(op), rip
Source 93 rpm:    mov     $maskLow4, work0
Source 95         and     ci, work0       ;work0 now has src reg 3
Source 96         shl     $22, rhs
Source 98         shr     $28, rhs        ; rhs now has src reg 2
Source 9a         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 9c         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 9e         mul     work0, rhs
Source 9f         add     $1, wpc
Source a2         and     $mask23to0, wpc
Source a5 add:    add     REGS(lhs), rhs
Source a7         jmp     fetch2
Source a9 adc:    mov     wCCR, work0
Source aa         shr     $2, work0
Source ac         shl     $31, work0
Source ae         add     REGS(lhs), rhs
Source b0         add     work0, rhs
Source b1         jmp     fetch2
Source b3 sub:    mov     REGS(lhs), work0
Source b5         sub     rhs, work0
Source b6         mov     work0, REGS(dst)
Source b8         jmp     fetch
Source ba eor:    xor     REGS(lhs), rhs
Source bc         jmp     fetch2
Source be orr:    or      REGS(lhs), rhs
Source c0         jmp     fetch2
Source c2 and:    and     REGS(lhs), rhs
Source c4         jmp     fetch2
Source c6 mul:    mul     REGS(lhs), rhs
Source c8         jmp     fetch2
Source ca div:    mov     REGS(lhs), work0
Source cc         div     rhs, work0
Source cd         mov     work0, REGS(dst)
Source cf         jmp     fetch
Source d1 mov:    jmp     fetch2
Source d3 mvn:    xor     $flip, rhs
Source d5         jmp     fetch2
Source d7 swi:    mov     REGS(alwaysZ), work0
Source d9         trap    rhs
Source da         jmp     fetch
Source dc ldm:    mov     REGS(dst), lhs
Source de         and     $mask23to0, lhs ;lhs is base pointer
Source e0         mov     $15, work0      ;work0 holds reg number
Source e2         shl     $16, rhs
Source e4         jl      lloading
Source e6         sub     $1, work0
Source e8         shl     $1, rhs
Source ea         jg      lshifting
Source ec         je      LDMdone
Source ee         add     $1, lhs
Source f0         mov     WARM(lhs), REGS(work0)
Source f3         cmp     $0, rhs
Source f5         jne     lshifting
Source f7         mov     lhs, REGS(dst)
Source f9         mov     wpc, work0
Source fb         shr     $24, work0
Source fd         mov     work0, wCCR
Source fe         jmp     fetch
Source 100 stm:    mov     wCCR, work0
Source 101         shl     $24, work0
Source 103         add     work0, wpc
Source 105         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source 107         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source 109         mov     $15, work0      ;work0 holds register number
Source 10b         shl     $16, rhs
Source 10d         jl      sloading
Source 10f         sub     $1, work0       ;
Source 111         shl     $1, rhs         
Source 113         jg      sshifting       ;is the next bit set?
Source 115         je      STMdone
Source 117         sub     $1, lhs
Source 119         mov     REGS(work0), WARM(lhs)
Source 11c         cmp     $0, rhs
Source 11e         jne     sshifting
Source 120         mov     lhs, REGS(dst)
Source 122         jmp     fetch
Source 124 addCC:  add     REGS(lhs), rhs
Source 126         jmp     fetch3
Source 128 adcCC:  mov     wCCR, work0
Source 129         shr     $2, work0
Source 12b         shl     $31, work0
Source 12d         add     REGS(lhs), rhs
Source 12f         add     work0, rhs
Source 130         jmp     fetch3
Source 132 subCC:  mov     REGS(lhs), work0
Source 134         sub     rhs, work0
Source 135         mov     ccr,wCCR
Source 136         mov     work0, REGS(dst)
Source 138         jmp     fetch
Source 13a cmpCC:  mov     REGS(lhs), work0
Source 13c         sub     rhs, work0
Source 13d         mov     ccr, wCCR
Source 13e         jmp     fetch
Source 140 eorCC:  xor     REGS(lhs), rhs
Source 142         jmp     fetch3
Source 144 orrCC:  or      REGS(lhs), rhs
Source 146         jmp     fetch3
Source 148 andCC:  and     REGS(lhs), rhs
Source 14a         jmp     fetch3
Source 14c tstCC:  test    REGS(lhs), rhs
Source 14e         jmp     fetch3
Source 150 mulCC:  mul     REGS(lhs), rhs
Source 152         jmp     fetch3
Source 154 divCC:  mov     REGS(lhs), work0
Source 156         div     rhs, work0
Source 157         mov     ccr,wCCR                
Source 158         mov     work0, REGS(dst)
Source 15a         jmp     fetch
Source 15c movCC:  mov     rhs, REGS(dst)
Source 15e         and     rhs,rhs
Source 15f         mov     ccr,wCCR                        
Source 160         jmp     fetch
Source 162 mvnCC:  xor     $flip,rhs
Source 164         jmp     fetch3
Source 166 swiCC:  trap    rhs
Source 167         jmp     fetch3
Source 169 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 16a         shr     $15, lhs
Source 16c         and     $maskLow4, lhs  ;lhs now has base register in it
Source 16e         mov     ci, dst
Source 16f         shr     $19, dst
Source 171         and     $maskLow4, dst  ;dst now has dst register
Source 173         mov     $maskA, work0
Source 175         and     ci, work0
Source 176         shr     $12, work0      ;work0 now has addressing mode
Source 178         add     $1, wpc
Source 17b         and     $mask23to0, wpc 
Source 17e         mov     lsADDR(work0), rip
Source 180 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 182         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 184         mov     WARM(rhs), REGS(dst)    ;changed WARM(lhs, rhs) to WARM(rhs)
Source 187         jmp     fetch
Source 189 str:    add     REGS(lhs), rhs          ;ADDITION
Source 18b         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 18d         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 190         jmp     fetch
Source 192 ldu:    cmp     0, rhs                          ;
Source 194         jg      posldu
Source 196         add     REGS(lhs), rhs          ;ADDITION
Source 198         and     $mask23to0, rhs         ;ADDITION:Masking, rhs now has the modified address
Source 19a         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 19d         mov     rhs, REGS(lhs)
Source 19f         jmp     fetch
Source 1a1 posldu: mov     REGS(lhs), work0
Source 1a3         and     $mask23to0, work0
Source 1a5         mov     WARM(work0), REGS(dst) ;load base register
Source 1a8         add     REGS(lhs), rhs
Source 1aa         and     $mask23to0, rhs
Source 1ac         mov     rhs, REGS(lhs)
Source 1ae         jmp     fetch           ;this was fetch2 i dont know why
Source 1b0 stu:    cmp     $0, rhs
Source 1b2         jg      posstu
Source 1b4         add     REGS(lhs), rhs
Source 1b6         and     $mask23to0, rhs
Source 1b8         mov     REGS(dst), WARM(rhs)
Source 1bb         mov     rhs, REGS(lhs)
Source 1bd         jmp     fetch
Source 1bf posstu: mov     REGS(lhs), work0
Source 1c1         and     $mask23to0, work0 ;warm has effective address
Source 1c3         mov     REGS(dst), WARM(work0)
Source 1c6         add     work0, rhs
Source 1c7         and     $mask23to0, rhs
Source 1c9         mov     rhs, REGS(lhs)
Source 1cb         jmp     fetch
Source 1cd adr:    add     REGS(lhs), rhs
Source 1cf         and     $mask23to0, rhs
Source 1d1         mov     rhs, REGS(dst)
Source 1d3         jmp     fetch
Source 1d5 ldrCC:  add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 1d7         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 1d9         mov     WARM(rhs), REGS(dst)    ;changed WARM(lhs, rhs) to WARM(rhs)
Source 1dc         jmp     fetch3
Source 1de strCC:  add     REGS(lhs), rhs          ;ADDITION
Source 1e0         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 1e2         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 1e5         jmp     fetch3
Source 1e7 lduCC:  cmp     0, rhs                          ;
Source 1e9         jg      poslduCC
Source 1eb         add     REGS(lhs), rhs          ;ADDITION
Source 1ed         and     $mask23to0, rhs         ;ADDITION:Masking, rhs now has the modified address
Source 1ef         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 1f2         mov     rhs, REGS(lhs)
Source 1f4         jmp     fetch3
Source 1f6         mov     REGS(lhs), work0
Source 1f8         and     $mask23to0, work0
Source 1fa         mov     WARM(work0), REGS(dst) ;load base register
Source 1fd         add     REGS(lhs), rhs
Source 1ff         and     $mask23to0, rhs
Source 201         mov     rhs, REGS(lhs)
Source 203         jmp     fetch3          ;this was fetch2 i dont know why
Source 205 stuCC:  cmp     $0, rhs
Source 207         jg      posstuCC
Source 209         add     REGS(lhs), rhs
Source 20b         and     $mask23to0, rhs
Source 20d         mov     REGS(dst), WARM(rhs)
Source 210         mov     rhs, REGS(lhs)
Source 212         jmp     fetch3
Source 214         mov     REGS(lhs), work0
Source 216         and     $mask23to0, work0 ;warm has effective address
Source 218         mov     REGS(dst), WARM(work0)
Source 21b         add     work0, rhs
Source 21c         and     $mask23to0, rhs
Source 21e         mov     rhs, REGS(lhs)
Source 220         jmp     fetch3
Source 222 b:      add     ci, wpc
Source 224         and     $mask23to0, wpc
Source 227         jmp     fetch
Source 229 bl:     mov     wpc, wlr
Source 22c         add     ci, wpc
Source 22e         and     $mask23to0, wpc
Source 231         jmp     fetch
Source 233 soff:   and     $maskLow13, rhs ;need this line?
Source 235         shl     $18, rhs
Source 237         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 239         mov     INSTR(op), rip
Source 23b no:     add     $1, wpc
Source 23e         and     $mask23to0, wpc
Source 241         jmp     fetch
End
