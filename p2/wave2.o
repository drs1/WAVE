WindObjectFile1
File wave2.s
Symbol ADDR 680
Symbol ALL3 46
Symbol COND 560
Symbol EQ 584
Symbol GE 648
Symbol GT 664
Symbol INSTR 448
Symbol LE 632
Symbol LT 616
Symbol NE 600
Symbol NEVER 568
Symbol REGS 432
Symbol SHOP 687
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 500
Symbol WARM 696
Symbol adc 183
Symbol adcCC 364
Symbol add 179
Symbol addCC 360
Symbol adr 355
Symbol and 208
Symbol andCC 396
Symbol asr 155
Symbol branch 84
Symbol cmpCC 382
Symbol div 216
Symbol divCC 408
Symbol eor 200
Symbol eorCC 388
Symbol equal 27
Symbol fetch 11
Symbol fetch2 9
Symbol fetch3 8
Symbol flip -1
Symbol getop 18
Symbol greate 35
Symbol gt 37
Symbol imd 105
Symbol ldm 234
Symbol ldmCC 428
Symbol ldr 291
Symbol ldrCC 428
Symbol ldu 311
Symbol lduCC 428
Symbol lesse 33
Symbol lesst 31
Symbol lloading 248
Symbol ls 65
Symbol lsADDR 691
Symbol lshifting 242
Symbol lsl 149
Symbol lsr 152
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 223
Symbol movCC 416
Symbol mul 212
Symbol mulCC 404
Symbol mvn 225
Symbol mvnCC 421
Symbol ne 29
Symbol never 25
Symbol next 428
Symbol noDST 39
Symbol oDST 51
Symbol oRHS 56
Symbol orr 204
Symbol orrCC 392
Symbol posldu 325
Symbol posstu 347
Symbol rim 115
Symbol ror 158
Symbol rpm 167
Symbol rsr 131
Symbol sloading 282
Symbol soff 97
Symbol sshifting 276
Symbol stm 259
Symbol str 301
Symbol strCC 428
Symbol stu 333
Symbol stuCC 428
Symbol sub 193
Symbol subCC 374
Symbol swi 229
Symbol swiCC 425
Symbol tstCC 400
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register wlr 4
Register work0 0
Register work1 1
Register wpc 15
Memory 1b0 0
Memory 1b1 0
Memory 1b2 0
Memory 1b3 0
Memory 1b4 0
Memory 1b5 0
Memory 1b6 0
Memory 1b7 0
Memory 1b8 0
Memory 1b9 0
Memory 1ba 0
Memory 1bb 0
Memory 1bc 0
Memory 1bd ffffff
Memory 1be 0
Memory 1bf 0
Memory 1c0 b3
Memory 1c1 b7
Memory 1c2 c1
Memory 1c3 0
Memory 1c4 c8
Memory 1c5 cc
Memory 1c6 d0
Memory 1c7 0
Memory 1c8 d4
Memory 1c9 0
Memory 1ca d8
Memory 1cb df
Memory 1cc e1
Memory 1cd e5
Memory 1ce ea
Memory 1cf 103
Memory 1d0 123
Memory 1d1 12d
Memory 1d2 137
Memory 1d3 14d
Memory 1d4 163
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd 0
Memory 1de 0
Memory 1df 0
Memory 1e0 168
Memory 1e1 16c
Memory 1e2 176
Memory 1e3 17e
Memory 1e4 184
Memory 1e5 188
Memory 1e6 18c
Memory 1e7 190
Memory 1e8 194
Memory 1e9 0
Memory 1ea 198
Memory 1eb 1a0
Memory 1ec 1a5
Memory 1ed 1a9
Memory 1ee 1ac
Memory 1ef 0
Memory 1f0 1ac
Memory 1f1 1ac
Memory 1f2 1ac
Memory 1f3 1ac
Memory 1f4 2e
Memory 1f5 2e
Memory 1f6 2e
Memory 1f7 27
Memory 1f8 2e
Memory 1f9 2e
Memory 1fa 2e
Memory 1fb 27
Memory 1fc 2e
Memory 1fd 2e
Memory 1fe 2e
Memory 1ff 33
Memory 200 33
Memory 201 38
Memory 202 2e
Memory 203 41
Memory 204 41
Memory 205 41
Memory 206 41
Memory 207 41
Memory 208 41
Memory 209 0
Memory 20a 0
Memory 20b 0
Memory 20c 54
Memory 20d 54
Memory 20e 54
Memory 20f 54
Memory 210 0
Memory 211 0
Memory 212 0
Memory 213 0
Memory 214 2e
Memory 215 2e
Memory 216 2e
Memory 217 27
Memory 218 2e
Memory 219 2e
Memory 21a 27
Memory 21b 2e
Memory 21c 2e
Memory 21d 0
Memory 21e 2e
Memory 21f 33
Memory 220 33
Memory 221 38
Memory 222 2e
Memory 223 41
Memory 224 41
Memory 225 41
Memory 226 41
Memory 227 41
Memory 228 41
Memory 229 0
Memory 22a 0
Memory 22b 0
Memory 22c 54
Memory 22d 54
Memory 22e 54
Memory 22f 54
Memory 230 0
Memory 231 19
Memory 232 1b
Memory 233 1d
Memory 234 1f
Memory 235 21
Memory 236 23
Memory 237 25
Memory 238 1ac
Memory 239 1ac
Memory 23a 1ac
Memory 23b 1ac
Memory 23c 1ac
Memory 23d 1ac
Memory 23e 1ac
Memory 23f 1ac
Memory 240 1ac
Memory 241 1ac
Memory 242 1ac
Memory 243 1ac
Memory 244 1ac
Memory 245 1ac
Memory 246 1ac
Memory 247 1ac
Memory 248 1ac
Memory 249 1ac
Memory 24a 1ac
Memory 24b 1ac
Memory 24c 12
Memory 24d 12
Memory 24e 12
Memory 24f 1ac
Memory 250 1ac
Memory 251 1ac
Memory 252 1ac
Memory 253 1ac
Memory 254 1ac
Memory 255 12
Memory 256 12
Memory 257 12
Memory 258 12
Memory 259 12
Memory 25a 12
Memory 25b 12
Memory 25c 1ac
Memory 25d 1ac
Memory 25e 1ac
Memory 25f 12
Memory 260 12
Memory 261 12
Memory 262 12
Memory 263 12
Memory 264 12
Memory 265 1ac
Memory 266 1ac
Memory 267 1ac
Memory 268 1ac
Memory 269 12
Memory 26a 1ac
Memory 26b 12
Memory 26c 1ac
Memory 26d 12
Memory 26e 1ac
Memory 26f 12
Memory 270 12
Memory 271 1ac
Memory 272 12
Memory 273 12
Memory 274 1ac
Memory 275 12
Memory 276 1ac
Memory 277 12
Memory 278 1ac
Memory 279 12
Memory 27a 1ac
Memory 27b 12
Memory 27c 12
Memory 27d 12
Memory 27e 12
Memory 27f 12
Memory 280 12
Memory 281 1ac
Memory 282 12
Memory 283 12
Memory 284 1ac
Memory 285 12
Memory 286 12
Memory 287 12
Memory 288 12
Memory 289 1ac
Memory 28a 12
Memory 28b 1ac
Memory 28c 12
Memory 28d 1ac
Memory 28e 12
Memory 28f 1ac
Memory 290 12
Memory 291 1ac
Memory 292 12
Memory 293 1ac
Memory 294 12
Memory 295 1ac
Memory 296 12
Memory 297 1ac
Memory 298 12
Memory 299 1ac
Memory 29a 12
Memory 29b 1ac
Memory 29c 1ac
Memory 29d 1ac
Memory 29e 1ac
Memory 29f 1ac
Memory 2a0 1ac
Memory 2a1 12
Memory 2a2 1ac
Memory 2a3 1ac
Memory 2a4 12
Memory 2a5 1ac
Memory 2a6 1ac
Memory 2a7 1ac
Memory 2a8 69
Memory 2a9 69
Memory 2aa 69
Memory 2ab 69
Memory 2ac 73
Memory 2ad 83
Memory 2ae a7
Memory 2af 95
Memory 2b0 98
Memory 2b1 9b
Memory 2b2 9e
Memory 2b3 61
Memory 2b4 61
Memory 2b5 61
Memory 2b6 61
Memory 2b7 73
Memory 0 40198000 1af
Memory 2 40198000 2b5
Memory 4 180000 6
Memory 6 8198000 4
Memory 8 491a0000
Memory 9 4b670000 1b0
Memory b 49cf8000 2b8
Memory d 48070000
Memory e c8180000 1d
Memory 10 7e480000 230
Memory 12 49a70000
Memory 13 c1b80000 3
Memory 15 c9b80000 1a
Memory 17 4e4e8000 1f4
Memory 19 4e4c0000 238
Memory 1b 4e4c0000 248
Memory 1d 4e4c0000 258
Memory 1f 4e4c0000 268
Memory 21 4e4c0000 278
Memory 23 4e4c0000 288
Memory 25 4e4c0000 298
Memory 27 49870000
Memory 28 c9980000 f
Memory 2a 81980000 f
Memory 2c 8198000 b
Memory 2e 49870000
Memory 2f c9980000 f
Memory 31 81980000 f
Memory 33 49670000
Memory 34 c9780000 13
Memory 36 81780000 f
Memory 38 48180000 7800
Memory 3a 80070000
Memory 3b c8180000 c
Memory 3d a1f80000 1
Memory 3f 4e480000 2a8
Memory 41 49870000
Memory 42 c9980000 f
Memory 44 81980000 f
Memory 46 49670000
Memory 47 c9780000 13
Memory 49 81780000 f
Memory 4b 48180000 7800
Memory 4d 80070000
Memory 4e c8180000 c
Memory 50 a1f80000 1
Memory 52 4e480000 2b3
Memory 54 a1e70000
Memory 55 81f80000 ffffff
Memory 57 c9d80000 16
Memory 59 4e870000
Memory 5a 28198000 ffffffb0
Memory 5c 48878000
Memory 5d a0980000 1
Memory 5f 8198000 ffffffab
Memory 61 81d80000 3fff
Memory 63 c1d80000 12
Memory 65 d1d80000 12
Memory 67 4e4e8000 1c0
Memory 69 48070000
Memory 6a 80180000 3e00
Memory 6c c8180000 9
Memory 6e 81d80000 1ff
Memory 70 c1c00000
Memory 71 4e4e8000 1c0
Memory 73 49270000
Memory 74 81380000 3f
Memory 76 48070000
Memory 77 c0180000 14
Memory 79 c8180000 1e
Memory 7b c1d80000 16
Memory 7d c9d80000 1c
Memory 7f 49cf0000 1b0
Memory 81 4e480000 2af
Memory 83 49380000 f
Memory 85 81270000
Memory 86 492c8000 1b0
Memory 88 48070000
Memory 89 c0180000 14
Memory 8b c8180000 1e
Memory 8d c1d80000 16
Memory 8f c9d80000 1c
Memory 91 49cf0000 1b0
Memory 93 4e480000 2af
Memory 95 c1c48000
Memory 96 4e4e8000 1c0
Memory 98 c9c48000
Memory 99 4e4e8000 1c0
Memory 9b d1c48000
Memory 9c 4e4e8000 1c0
Memory 9e 48070000
Memory 9f 48380000 20
Memory a1 a8248000
Memory a2 c0008000
Memory a3 c9c48000
Memory a4 a1c00000
Memory a5 4e4e8000 1c0
Memory a7 48180000 f
Memory a9 80070000
Memory aa c1d80000 16
Memory ac c9d80000 1c
Memory ae 49cf0000 1b0
Memory b0 48080000 1b0
Memory b2 b1c00000
Memory b3 a1ce0000 1b0
Memory b5 8198000 ffffff53
Memory b7 48040000
Memory b8 c8180000 2
Memory ba c0180000 1f
Memory bc a1ce0000 1b0
Memory be a1c00000
Memory bf 8198000 ffffff49
Memory c1 480e0000 1b0
Memory c3 a8070000
Memory c4 4b600000 1b0
Memory c6 8198000 ffffff44
Memory c8 91ce0000 1b0
Memory ca 8198000 ffffff3e
Memory cc 89ce0000 1b0
Memory ce 8198000 ffffff3a
Memory d0 81ce0000 1b0
Memory d2 8198000 ffffff36
Memory d4 b1ce0000 1b0
Memory d6 8198000 ffffff32
Memory d8 480e0000 1b0
Memory da b8070000
Memory db 4b600000 1b0
Memory dd 8198000 ffffff2d
Memory df 8198000 ffffff29
Memory e1 91d80000 ffffffff
Memory e3 8198000 ffffff25
Memory e5 480a8000 1b0
Memory e7 70000
Memory e8 8198000 ffffff22
Memory ea 48180000 f
Memory ec 48380000 0
Memory ee c1d80000 10
Memory f0 10198000 7
Memory f2 c1d80000 1
Memory f4 a8180000 1
Memory f6 38198000 fffffffb
Memory f8 4a158000 1 1b0
Memory fb a0380000 1
Memory fd 99d80000 0
Memory ff 28198000 fffffff2
Memory 101 8198000 ffffff09
Memory 103 48380000 0
Memory 105 496d8000 1b0
Memory 107 81780000 ffffff
Memory 109 c9780000 1
Memory 10b 40198000 1ac
Memory 10d a1600000
Memory 10e 48180000 0
Memory 110 99d80000 0
Memory 112 38198000 7
Memory 114 a0180000 1
Memory 116 c9d80000 1
Memory 118 20198000 fffffef2
Memory 11a 4d680000 1b0 1
Memory 11d a0380000 1
Memory 11f 99d80000 0
Memory 121 28198000 fffffff2
Memory 123 498e0000 1b0
Memory 125 40198000 192
Memory 127 a1800000
Memory 128 4b760000 e 1b0
Memory 12b 8198000 fffffedf
Memory 12d 498e0000 1b0
Memory 12f 40198000 188
Memory 131 a1800000
Memory 132 4d8d8000 1b0 e
Memory 135 8198000 fffffed5
Memory 137 498e0000 1b0
Memory 139 99d88000 0
Memory 13b 38198000 9
Memory 13d 4b760000 e 1b0
Memory 140 43960000 e 1b0
Memory 143 8198000 fffffec7
Memory 145 4b6e0000 1b0 1b0
Memory 148 43960000 e 1b0
Memory 14b 8198000 fffffebf
Memory 14d 498e0000 1b0
Memory 14f 99d80000 0
Memory 151 38198000 9
Memory 153 4d8d8000 1b0 e
Memory 156 43960000 e 1b0
Memory 159 8198000 fffffeb1
Memory 15b 4b8d8000 1b0 1b0
Memory 15e 43960000 e 1b0
Memory 161 8198000 fffffea9
Memory 163 43760000 e 1b0
Memory 166 8198000 fffffea4
Memory 168 a1ce0000 1b0
Memory 16a 8198000 fffffe9d
Memory 16c 48040000
Memory 16d c8180000 2
Memory 16f c0180000 1f
Memory 171 a1ce0000 1b0
Memory 173 a1c00000
Memory 174 8198000 fffffe93
Memory 176 480e0000 1b0
Memory 178 a8070000
Memory 179 491a0000
Memory 17a 4b600000 1b0
Memory 17c 8198000 fffffe8e
Memory 17e 480e0000 1b0
Memory 180 a8070000
Memory 181 491a0000
Memory 182 8198000 fffffe88
Memory 184 91ce0000 1b0
Memory 186 8198000 fffffe81
Memory 188 89ce0000 1b0
Memory 18a 8198000 fffffe7d
Memory 18c 81ce0000 1b0
Memory 18e 8198000 fffffe79
Memory 190 d9ce0000 1b0
Memory 192 8198000 fffffe75
Memory 194 b1ce0000 1b0
Memory 196 8198000 fffffe71
Memory 198 480e0000 1b0
Memory 19a b8070000
Memory 19b 491a0000
Memory 19c 4b600000 1b0
Memory 19e 8198000 fffffe6c
Memory 1a0 4b670000 1b0
Memory 1a2 491a0000
Memory 1a3 8198000 fffffe67
Memory 1a5 91d80000 ffffffff
Memory 1a7 8198000 fffffe60
Memory 1a9 70000
Memory 1aa 8198000 fffffe5d
Memory 1ac a1f80000 1
Memory 1ae 8198000 fffffe5c
Source 0         lea     REGS, work0
Source 2         lea     WARM,work0
Source 4         trap    $SysOverlay
Source 6         jmp     fetch
Source 8 fetch3: mov     ccr,wCCR        
Source 9 fetch2: mov     rhs, REGS(dst)
Source b fetch:  mov     WARM(wpc),ci
Source d         mov     ci, work0
Source e         shr     $29, work0      ;high 3 condition bits in work0
Source 10         cmovg   COND(work0), rip
Source 12 getop:  mov     ci,op
Source 13         shl     $3,op
Source 15         shr     $26,op
Source 17         mov     TYPE(op), rip
Source 19 never:  mov     NEVER(wCCR),rip
Source 1b equal:  mov     EQ(wCCR),rip
Source 1d ne:     mov     NE(wCCR),rip
Source 1f lesst:  mov     LT(wCCR),rip
Source 21 lesse:  mov     LE(wCCR),rip
Source 23 greate: mov     GE(wCCR),rip
Source 25 gt:     mov     GT(wCCR),rip
Source 27 noDST:  mov     ci, lhs         ;get dst and lhs
Source 28         shr     $15, lhs
Source 2a         and     $maskLow4, lhs
Source 2c         jmp     oRHS
Source 2e ALL3:   mov     ci, lhs         ;get dst and lhs
Source 2f         shr     $15, lhs
Source 31         and     $maskLow4, lhs
Source 33 oDST:   mov     ci, dst
Source 34         shr     $19, dst
Source 36         and     $maskLow4, dst
Source 38 oRHS:   mov     $maskA, work0
Source 3a         and     ci,work0
Source 3b         shr     $12, work0      ;work 0 holds the addressing mode
Source 3d         add     $1, wpc
Source 3f         mov     ADDR(work0), rip
Source 41 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 42         shr     $15, lhs
Source 44         and     $maskLow4, lhs  ;lhs now has base register in it
Source 46         mov     ci, dst
Source 47         shr     $19, dst
Source 49         and     $maskLow4, dst  ;dst now has dst register
Source 4b         mov     $maskA, work0
Source 4d         and     ci, work0
Source 4e         shr     $12, work0      ;work0 now has addressing mode
Source 50         add     $1, wpc
Source 52         mov     lsADDR(work0), rip 
Source 54 branch: add     ci, wpc
Source 55         and     $mask23to0, wpc
Source 57         shr     $22,ci
Source 59         mov     ci, ccr 
Source 5a         jne     fetch
Source 5c         mov     wpc, wlr
Source 5d         add     $1, wlr
Source 5f         jmp     fetch
Source 61 soff:   and $maskLow13, rhs
Source 63         shl     $18, rhs
Source 65         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 67         mov     INSTR(op), rip
Source 69 imd:    mov     ci, work0
Source 6a         and     $maskExp, work0 ;exponent
Source 6c         shr     $9, work0
Source 6e         and     $maskValue, rhs ;value
Source 70         shl     work0, rhs      ;shifted value in rhs
Source 71         mov     INSTR(op), rip
Source 73 rim:    mov     ci, shiftC
Source 74         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 76         mov     ci, work0
Source 77         shl     $20, work0
Source 79         shr     $30, work0      ;work0 now has the shop
Source 7b         shl     $22, rhs
Source 7d         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 7f         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 81         mov     SHOP(work0), rip
Source 83 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 85         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 86         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 88         mov     ci, work0
Source 89         shl     $20, work0
Source 8b         shr     $30, work0      ; work0 now has the shift op code
Source 8d         shl     $22, rhs
Source 8f         shr     $28, rhs        ; rhs has rhs register
Source 91         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 93         mov     SHOP(work0), rip
Source 95 lsl:    shl     shiftC, rhs
Source 96         mov     INSTR(op), rip
Source 98 lsr:    shr     shiftC, rhs
Source 99         mov     INSTR(op), rip
Source 9b asr:    sar     shiftC, rhs
Source 9c         mov     INSTR(op), rip
Source 9e ror:    mov     rhs, work0
Source 9f         mov     $32, work1      
Source a1         sub     shiftC, work1   ;work1 := 32-shr
Source a2         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source a3         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source a4         add     work0, rhs
Source a5         mov     INSTR(op), rip
Source a7 rpm:    mov     $maskLow4, work0
Source a9         and     ci, work0       ;work0 now has src reg 3
Source aa         shl     $22, rhs
Source ac         shr     $28, rhs        ; rhs now has src reg 2
Source ae         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source b0         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source b2         mul     work0, rhs
Source b3 add:    add     REGS(lhs), rhs
Source b5         jmp     fetch2
Source b7 adc:    mov     wCCR, work0
Source b8         shr     $2, work0
Source ba         shl     $31, work0
Source bc         add     REGS(lhs), rhs
Source be         add     work0, rhs
Source bf         jmp     fetch2
Source c1 sub:    mov     REGS(lhs), work0
Source c3         sub     rhs, work0
Source c4         mov     work0, REGS(dst)
Source c6         jmp     fetch
Source c8 eor:    xor     REGS(lhs), rhs
Source ca         jmp     fetch2
Source cc orr:    or      REGS(lhs), rhs
Source ce         jmp     fetch2
Source d0 and:    and     REGS(lhs), rhs
Source d2         jmp     fetch2
Source d4 mul:    mul     REGS(lhs), rhs
Source d6         jmp     fetch2
Source d8 div:    mov     REGS(lhs), work0
Source da         div     rhs, work0
Source db         mov     work0, REGS(dst)
Source dd         jmp     fetch   
Source df mov:    jmp     fetch2
Source e1 mvn:    xor     $flip, rhs
Source e3         jmp     fetch2
Source e5 swi:    mov     REGS(alwaysZ), work0
Source e7         trap    rhs
Source e8         jmp     fetch
Source ea ldm:    mov     $15, work0      ;work0 holds reg number
Source ec         mov     $0, work1       ;work1 holds memory number
Source ee         shl     $16, ci
Source f0         jl      lloading
Source f2         shl     $1, ci
Source f4         sub     $1, work0
Source f6         jg      lshifting
Source f8         mov     0(dst, work1), REGS(work0)
Source fb         add     $1, work1
Source fd         cmp     $0, ci
Source ff         jne     lshifting
Source 101         jmp     fetch
Source 103 stm:    mov     $0, work1               ;work1 holds memory offset
Source 105         mov     REGS(dst), dst
Source 107         and     $0xffffff, dst
Source 109         shr     $1, dst
Source 10b         lea     WARM, work0
Source 10d         add     work0, dst
Source 10e         mov     $0, work0       ;work0 holds register number
Source 110         cmp     $0, ci
Source 112         jg      sloading
Source 114         add     $1, work0
Source 116         shr     $1, ci
Source 118         je      fetch
Source 11a         mov     REGS(work0), 0(dst, work1)
Source 11d         add     $1, work1
Source 11f         cmp     $0, ci
Source 121         jne     sshifting
Source 123 ldr:    mov     REGS(lhs), lhs
Source 125         lea     WARM, work0
Source 127         add     work0, lhs
Source 128         mov     0(lhs, rhs), REGS(dst)
Source 12b         jmp     fetch
Source 12d str:    mov     REGS(lhs), lhs
Source 12f         lea     WARM, work0
Source 131         add     work0, lhs
Source 132         mov     REGS(dst), 0(lhs, rhs)
Source 135         jmp     fetch
Source 137 ldu:    mov     REGS(lhs), lhs
Source 139         cmp     0, rhs
Source 13b         jg      posldu
Source 13d         mov     0(lhs, rhs), REGS(dst)
Source 140         lea     0(lhs, rhs), REGS(lhs)
Source 143         jmp     fetch
Source 145 posldu: mov     REGS(lhs), REGS(dst)
Source 148         lea     0(lhs, rhs), REGS(lhs)
Source 14b         jmp     fetch
Source 14d stu:    mov     REGS(lhs), lhs
Source 14f         cmp     $0, rhs
Source 151         jg      posstu
Source 153         mov     REGS(dst), 0(lhs, rhs)
Source 156         lea     0(lhs, rhs), REGS(lhs)
Source 159         jmp     fetch
Source 15b posstu: mov     REGS(dst), REGS(lhs)
Source 15e         lea     0(lhs, rhs), REGS(lhs)
Source 161         jmp     fetch
Source 163 adr:    lea     0(lhs, rhs), REGS(dst)
Source 166         jmp     fetch
Source 168 addCC:  add     REGS(lhs), rhs
Source 16a         jmp     fetch3
Source 16c adcCC:  mov     wCCR, work0
Source 16d         shr     $2, work0
Source 16f         shl     $31, work0
Source 171         add     REGS(lhs), rhs
Source 173         add     work0, rhs
Source 174         jmp     fetch3
Source 176 subCC:  mov     REGS(lhs), work0
Source 178         sub     rhs, work0
Source 179         mov     ccr,wCCR
Source 17a         mov     work0, REGS(dst)
Source 17c         jmp     fetch
Source 17e cmpCC:  mov     REGS(lhs), work0
Source 180         sub     rhs, work0
Source 181         mov     ccr, wCCR
Source 182         jmp     fetch
Source 184 eorCC:  xor     REGS(lhs), rhs
Source 186         jmp     fetch3
Source 188 orrCC:  or      REGS(lhs), rhs
Source 18a         jmp     fetch3
Source 18c andCC:  and     REGS(lhs), rhs
Source 18e         jmp     fetch3
Source 190 tstCC:  test    REGS(lhs), rhs
Source 192         jmp     fetch3
Source 194 mulCC:  mul     REGS(lhs), rhs
Source 196         jmp     fetch3
Source 198 divCC:  mov     REGS(lhs), work0
Source 19a         div     rhs, work0
Source 19b         mov     ccr,wCCR                
Source 19c         mov     work0, REGS(dst)
Source 19e         jmp     fetch
Source 1a0 movCC:  mov     rhs, REGS(dst)
Source 1a2         mov     ccr,wCCR                        
Source 1a3         jmp     fetch
Source 1a5 mvnCC:  xor     $flip,rhs
Source 1a7         jmp     fetch3
Source 1a9 swiCC:  trap    rhs
Source 1aa         jmp     fetch3
Source 1ac next:   add     $1, wpc
Source 1ae         jmp     fetch
End
