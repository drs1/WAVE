WindObjectFile1
File wave2.s
Symbol ADDR 1350564291
Symbol ALL3 53
Symbol COND 1350564171
Symbol EQ 1350564195
Symbol FETCHT 427819489
Symbol GE 1350564259
Symbol GT 1350564275
Symbol INSTR 480
Symbol LDMdone 241
Symbol LE 1350564243
Symbol LT 1350564227
Symbol NE 1350564211
Symbol NEVER 1350564179
Symbol REGS 464
Symbol SHOP 1350564298
Symbol STMdone 277
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 855638498
Symbol WARM 1350567376
Symbol adc 144
Symbol add 140
Symbol adr 426
Symbol and 172
Symbol asr 116
Symbol b 446
Symbol bl 437
Symbol cmpCC 284
Symbol div 180
Symbol eor 164
Symbol equal 34
Symbol fetch 15
Symbol fetch2 10
Symbol fetch3 9
Symbol fetch4 6
Symbol flip -1
Symbol getop 27
Symbol greate 42
Symbol gt 44
Symbol imd 70
Symbol ldm 209
Symbol ldr 323
Symbol ldu 347
Symbol lesse 40
Symbol lesst 38
Symbol lloading 234
Symbol ls 306
Symbol lsADDR 1350567371
Symbol lshifting 222
Symbol lsl 110
Symbol lsr 113
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 190
Symbol movCC 297
Symbol mul 176
Symbol mvn 192
Symbol ne 36
Symbol never 32
Symbol no 456
Symbol noDST 46
Symbol oDST 58
Symbol oRHS 63
Symbol opMask 528482304
Symbol orr 168
Symbol posldu 366
Symbol posstu 406
Symbol rim 80
Symbol ror 119
Symbol rpm 128
Symbol rsr 94
Symbol shopMask 3072
Symbol sloading 268
Symbol soff 450
Symbol sshifting 260
Symbol stm 245
Symbol str 335
Symbol stu 387
Symbol sub 154
Symbol swi 196
Symbol tstCC 293
Symbol wlr 478
Symbol wpc 479
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register temp 3
Register wCCR 8
Register work0 0
Register work1 1
Memory 1d0 0
Memory 1d1 0
Memory 1d2 0
Memory 1d3 0
Memory 1d4 0
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd ffffff
Memory 1de 0
Memory 1df 0
Memory 1e0 8c
Memory 8001e0 90
Memory 10001e0 9a
Memory 20001e0 a4
Memory 28001e0 a8
Memory 30001e0 ac
Memory 40001e0 b0
Memory 50001e0 b4
Memory 58001e0 be
Memory 60001e0 c0
Memory 68001e0 c4
Memory 70001e0 d1
Memory 78001e0 f5
Memory 80001e0 143
Memory 88001e0 14f
Memory 90001e0 15b
Memory 98001e0 183
Memory a0001e0 1aa
Memory 100001e0 8c
Memory 108001e0 90
Memory 110001e0 9a
Memory 118001e0 11c
Memory 120001e0 a4
Memory 128001e0 a8
Memory 130001e0 ac
Memory 138001e0 125
Memory 140001e0 b0
Memory 150001e0 b4
Memory 158001e0 129
Memory 160001e0 c0
Memory 168001e0 c4
Memory 170001e0 d1
Memory 180001e0 143
Memory 188001e0 14f
Memory 190001e0 15b
Memory 198001e0 183
Memory 198001e1 a
Memory 1a0001e1 a
Memory 1a8001e1 f
Memory 1b8001e1 a
Memory 1c0001e1 a
Memory 1c8001e1 a
Memory 1d8001e1 a
Memory 1e0001e1 a
Memory 1e8001e1 f
Memory 1f0001e1 a
Memory 1f8001e1 a
Memory 200001e1 f
Memory 208001e1 f
Memory 210001e1 f
Memory 218001e1 f
Memory 220001e1 f
Memory 228001e1 f
Memory 230001e1 f
Memory 238001e1 f
Memory 298001e1 9
Memory 2a0001e1 9
Memory 2a8001e1 6
Memory 2b0001e1 f
Memory 2b8001e1 9
Memory 2c0001e1 9
Memory 2c8001e1 9
Memory 2d0001e1 9
Memory 2d8001e1 9
Memory 2e8001e1 f
Memory 2f0001e1 f
Memory 2f8001e1 9
Memory 300001e1 6
Memory 308001e1 f
Memory 318001e1 6
Memory 320001e1 6
Memory 328001e1 6
Memory 330001e1 6
Memory 330001e2 35
Memory 338001e2 35
Memory 340001e2 35
Memory 348001e2 2e
Memory 350001e2 35
Memory 358001e2 35
Memory 360001e2 35
Memory 368001e2 2e
Memory 370001e2 35
Memory 378001e2 35
Memory 380001e2 35
Memory 388001e2 3a
Memory 390001e2 3a
Memory 398001e2 3f
Memory 3a0001e2 35
Memory 3a8001e2 3a
Memory 3b0001e2 132
Memory 3b8001e2 132
Memory 3c0001e2 132
Memory 3c8001e2 132
Memory 3d0001e2 132
Memory 3f0001e2 1be
Memory 3f8001e2 1be
Memory 400001e2 1b5
Memory 408001e2 1b5
Memory 430001e2 35
Memory 438001e2 35
Memory 440001e2 35
Memory 448001e2 2e
Memory 450001e2 35
Memory 458001e2 35
Memory 460001e2 2e
Memory 468001e2 35
Memory 470001e2 35
Memory 480001e2 35
Memory 488001e2 3a
Memory 490001e2 3a
Memory 498001e2 3f
Memory 4a0001e2 35
Memory 4a8001e2 132
Memory 4b0001e2 132
Memory 4b8001e2 132
Memory 4c0001e2 132
Memory 4c8001e2 132
Memory 4d0001e2 132
Memory 4efff94a 1be
Memory 4f7ff94a 1be
Memory 4ffff94a 1b5
Memory 507ff94a 1b5
Memory 507ff94b 0
Memory 507ff94c 20
Memory 507ff94d 22
Memory 507ff94e 24
Memory 507ff94f 26
Memory 507ff950 28
Memory 507ff951 2a
Memory 507ff952 2c
Memory 507ff953 1c8
Memory 507ff954 1c8
Memory 507ff955 1c8
Memory 507ff956 1c8
Memory 507ff957 1c8
Memory 507ff958 1c8
Memory 507ff959 1c8
Memory 507ff95a 1c8
Memory 507ff95b 1c8
Memory 507ff95c 1c8
Memory 507ff95d 1c8
Memory 507ff95e 1c8
Memory 507ff95f 1c8
Memory 507ff960 1c8
Memory 507ff961 1c8
Memory 507ff962 1c8
Memory 507ff963 1c8
Memory 507ff964 1c8
Memory 507ff965 1c8
Memory 507ff966 1c8
Memory 507ff967 1b
Memory 507ff968 1b
Memory 507ff969 1b
Memory 507ff96a 1c8
Memory 507ff96b 1c8
Memory 507ff96c 1c8
Memory 507ff96d 1c8
Memory 507ff96e 1c8
Memory 507ff96f 1c8
Memory 507ff970 1b
Memory 507ff971 1b
Memory 507ff972 1b
Memory 507ff973 1b
Memory 507ff974 1b
Memory 507ff975 1b
Memory 507ff976 1b
Memory 507ff977 1c8
Memory 507ff978 1c8
Memory 507ff979 1c8
Memory 507ff97a 1b
Memory 507ff97b 1b
Memory 507ff97c 1b
Memory 507ff97d 1b
Memory 507ff97e 1b
Memory 507ff97f 1b
Memory 507ff980 1c8
Memory 507ff981 1c8
Memory 507ff982 1c8
Memory 507ff983 1c8
Memory 507ff984 1b
Memory 507ff985 1c8
Memory 507ff986 1b
Memory 507ff987 1c8
Memory 507ff988 1b
Memory 507ff989 1c8
Memory 507ff98a 1b
Memory 507ff98b 1b
Memory 507ff98c 1c8
Memory 507ff98d 1b
Memory 507ff98e 1b
Memory 507ff98f 1c8
Memory 507ff990 1b
Memory 507ff991 1c8
Memory 507ff992 1b
Memory 507ff993 1c8
Memory 507ff994 1b
Memory 507ff995 1c8
Memory 507ff996 1b
Memory 507ff997 1b
Memory 507ff998 1b
Memory 507ff999 1b
Memory 507ff99a 1b
Memory 507ff99b 1b
Memory 507ff99c 1c8
Memory 507ff99d 1b
Memory 507ff99e 1b
Memory 507ff99f 1c8
Memory 507ff9a0 1b
Memory 507ff9a1 1b
Memory 507ff9a2 1b
Memory 507ff9a3 1b
Memory 507ff9a4 1c8
Memory 507ff9a5 1b
Memory 507ff9a6 1c8
Memory 507ff9a7 1b
Memory 507ff9a8 1c8
Memory 507ff9a9 1b
Memory 507ff9aa 1c8
Memory 507ff9ab 1c8
Memory 507ff9ac 1c8
Memory 507ff9ad 1b
Memory 507ff9ae 1c8
Memory 507ff9af 1b
Memory 507ff9b0 1c8
Memory 507ff9b1 1b
Memory 507ff9b2 1c8
Memory 507ff9b3 1b
Memory 507ff9b4 1c8
Memory 507ff9b5 1b
Memory 507ff9b6 1c8
Memory 507ff9b7 1c8
Memory 507ff9b8 1c8
Memory 507ff9b9 1c8
Memory 507ff9ba 1c8
Memory 507ff9bb 1c8
Memory 507ff9bc 1b
Memory 507ff9bd 1c8
Memory 507ff9be 1c8
Memory 507ff9bf 1b
Memory 507ff9c0 1c8
Memory 507ff9c1 1c8
Memory 507ff9c2 1c8
Memory 507ff9c3 46
Memory 507ff9c4 46
Memory 507ff9c5 46
Memory 507ff9c6 46
Memory 507ff9c7 50
Memory 507ff9c8 5e
Memory 507ff9c9 80
Memory 507ff9ca 6e
Memory 507ffdca 71
Memory 508001ca 74
Memory 508005ca 77
Memory 508005cb 1c2
Memory 508005cc 1c2
Memory 508005cd 1c2
Memory 508005ce 1c2
Memory 508005cf 50
Memory 0 40198000 508005cf
Memory 2 180000 6
Memory 4 8198000 a
Memory 6 491a0000
Memory 7 8198000 7
Memory 9 491a0000
Memory a a6780000 1 1d3
Memory d 4b670000 1d0
Memory f 86780000 ffffff 1ce
Memory 12 48598000 1cc
Memory 14 49c90000 508005d0
Memory 16 48070000
Memory 17 c8180000 1d
Memory 19 7e480000 507ff94b
Memory 1b 49a70000
Memory 1c 81b80000 1f800000
Memory 1e 4e4e8000 330001e2
Memory 20 4e4c0000 507ff953
Memory 22 4e4c0000 507ff963
Memory 24 4e4c0000 507ff973
Memory 26 4e4c0000 507ff983
Memory 28 4e4c0000 507ff993
Memory 2a 4e4c0000 507ff9a3
Memory 2c 4e4c0000 507ff9b3
Memory 2e 49470000
Memory 2f c9580000 f
Memory 31 81580000 f
Memory 33 8198000 b
Memory 35 49470000
Memory 36 c9580000 f
Memory 38 81580000 f
Memory 3a 49670000
Memory 3b c9780000 13
Memory 3d 81780000 f
Memory 3f 48180000 7800
Memory 41 80070000
Memory 42 c8180000 c
Memory 44 4e480000 507ff9c3
Memory 46 48070000
Memory 47 80180000 3e00
Memory 49 c8180000 9
Memory 4b 81d80000 1ff
Memory 4d c1c00000
Memory 4e 4e4e8000 1e0
Memory 50 49270000
Memory 51 81380000 3f
Memory 53 48070000
Memory 54 80180000 c00
Memory 56 c1d80000 16
Memory 58 c9d80000 1c
Memory 5a 49cf0000 1d0
Memory 5c 4e480000 507ff9ca
Memory 5e 49380000 f
Memory 60 81270000
Memory 61 492c8000 1d0
Memory 63 48070000
Memory 64 80180000 c00
Memory 66 c1d80000 16
Memory 68 c9d80000 1c
Memory 6a 49cf0000 1d0
Memory 6c 4e480000 507ff9ca
Memory 6e c1c48000
Memory 6f 4e4e8000 1e0
Memory 71 c9c48000
Memory 72 4e4e8000 1e0
Memory 74 d1c48000
Memory 75 4e4e8000 1e0
Memory 77 48070000
Memory 78 48380000 20
Memory 7a a8248000
Memory 7b c0008000
Memory 7c c9c48000
Memory 7d a1c00000
Memory 7e 4e4e8000 1e0
Memory 80 48180000 f
Memory 82 80070000
Memory 83 c1d80000 16
Memory 85 c9d80000 1c
Memory 87 49cf0000 1d0
Memory 89 48080000 1d0
Memory 8b b1c00000
Memory 8c a1cd0000 1d0
Memory 8e 4e4e8000 198001e1
Memory 90 48040000
Memory 91 c8180000 2
Memory 93 c0180000 1f
Memory 95 a1cd0000 1d0
Memory 97 a1c00000
Memory 98 4e4e8000 198001e1
Memory 9a 480d0000 1d0
Memory 9c a6780000 1 141
Memory 9f a8070000
Memory a0 4b600000 1d0
Memory a2 4e4e8000 198001e1
Memory a4 91cd0000 1d0
Memory a6 4e4e8000 198001e1
Memory a8 89cd0000 1d0
Memory aa 4e4e8000 198001e1
Memory ac 81cd0000 1d0
Memory ae 4e4e8000 198001e1
Memory b0 b1cd0000 1d0
Memory b2 4e4e8000 198001e1
Memory b4 480d0000 1d0
Memory b6 b8070000
Memory b7 a6780000 1 126
Memory ba 4b600000 1d0
Memory bc 4e4e8000 198001e1
Memory be 4e4e8000 198001e1
Memory c0 91d80000 ffffffff
Memory c2 4e4e8000 198001e1
Memory c4 48198000 10b
Memory c6 70000
Memory c7 a6780000 1 116
Memory ca 4e600000 105
Memory cc 86798000 103 102
Memory cf 4e4e8000 198001e1
Memory d1 494d8000 1d0
Memory d3 a6780000 1 10a
Memory d6 81580000 ffffff
Memory d8 48180000 0
Memory da d9d80000 1
Memory dc 28198000 d
Memory de a0180000 1
Memory e0 c9d80000 1
Memory e2 20198000 e
Memory e4 d9d80000 1
Memory e6 28198000 3
Memory e8 8198000 fffffff5
Memory ea 4a0d0000 508005d0 1d0
Memory ed a1580000 1
Memory ef 8198000 ffffffee
Memory f1 4b650000 1d0
Memory f3 4e4e8000 198001e1
Memory f5 48040000
Memory f6 c0180000 18
Memory f8 8e600000 e6
Memory fa 494d8000 1d0
Memory fc 81580000 ffffff
Memory fe 48180000 f
Memory 100 c1d80000 10
Memory 102 10198000 9
Memory 104 a8180000 1
Memory 106 c1d80000 1
Memory 108 38198000 fffffffb
Memory 10a 20198000 a
Memory 10c a9580000 1
Memory 10e 4b480000 1d0 508005d0
Memory 111 99d80000 0
Memory 113 28198000 fffffff0
Memory 115 a6780000 1 c8
Memory 118 4b650000 1d0
Memory 11a 4e4e8000 198001e1
Memory 11c 480d0000 1d0
Memory 11e a6780000 1 bf
Memory 121 a8070000
Memory 122 491a0000
Memory 123 8198000 fffffeeb
Memory 125 d9cd0000 1d0
Memory 127 8198000 fffffee1
Memory 129 4b670000 1d0
Memory 12b a6780000 1 b2
Memory 12e 81c70000
Memory 12f 491a0000
Memory 130 8198000 fffffede
Memory 132 49470000
Memory 133 c9580000 f
Memory 135 81580000 f
Memory 137 49670000
Memory 138 c9780000 13
Memory 13a 81780000 f
Memory 13c 48180000 7800
Memory 13e 80070000
Memory 13f c8180000 c
Memory 141 4e480000 508005cb
Memory 143 a1cd0000 1d0
Memory 145 81d80000 ffffff
Memory 147 4b6f0000 508005d0 1d0
Memory 14a a6780000 1 93
Memory 14d 8198000 fffffec1
Memory 14f a1cd0000 1d0
Memory 151 81d80000 ffffff
Memory 153 4bcd8000 1d0 508005d0
Memory 156 a6780000 1 87
Memory 159 8198000 fffffeb5
Memory 15b 30198000 12
Memory 15d a1cd0000 1d0
Memory 15f 81d80000 ffffff
Memory 161 a6780000 1 7c
Memory 164 4b6f0000 508005d0 1d0
Memory 167 4b470000 1d0
Memory 169 836d8000 1d0 1d0
Memory 16c 4e4e8000 198001e1
Memory 16e 480d0000 1d0
Memory 170 80180000 ffffff
Memory 172 a1cd0000 1d0
Memory 174 a6780000 1 69
Memory 177 81d80000 ffffff
Memory 179 4b470000 1d0
Memory 17b 4b680000 508005d0 1d0
Memory 17e 836d8000 1d0 1d0
Memory 181 4e4e8000 198001e1
Memory 183 30198000 12
Memory 185 a1cd0000 1d0
Memory 187 81d80000 ffffff
Memory 189 4bcd8000 1d0 508005d0
Memory 18c a6780000 1 51
Memory 18f 4b470000 1d0
Memory 191 83cf0000 508005d0 508005d0
Memory 194 4e4e8000 198001e1
Memory 196 480d0000 1d0
Memory 198 80180000 ffffff
Memory 19a 4a0d8000 1d0 508005d0
Memory 19d a6780000 1 40
Memory 1a0 a1c00000
Memory 1a1 81d80000 ffffff
Memory 1a3 4b470000 1d0
Memory 1a5 83cf0000 508005d0 508005d0
Memory 1a8 4e4e8000 198001e1
Memory 1aa a1cd0000 1d0
Memory 1ac 81d80000 ffffff
Memory 1ae a6780000 1 2f
Memory 1b1 4b670000 1d0
Memory 1b3 4e4e8000 198001e1
Memory 1b5 4e798000 29 27
Memory 1b8 a6780000 1 24
Memory 1bb 86780000 ffffff 21
Memory 1be a6670000 20
Memory 1c0 8198000 fffffe4e
Memory 1c2 c1d80000 12
Memory 1c4 d1d80000 12
Memory 1c6 4e4e8000 1e0
Memory 1c8 a6780000 1 15
Memory 1cb 86780000 ffffff 12
Memory 1ce 8198000 fffffe40
Source 0         lea     WARM, work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch4: mov     ccr,wCCR
Source 7         jmp     fetch
Source 9 fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source a fetch2: add     $1, wpc
Source d         mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source f fetch:  and     $mask23to0, wpc
Source 12         mov     wpc, next
Source 14         mov     WARM(next),ci
Source 16         mov     ci, work0
Source 17         shr     $29, work0      ;high 3 condition bits in work0
Source 19         cmovg   COND(work0), rip
Source 1b getop:  mov     ci,op
Source 1c         and     $opMask, op
Source 1e         mov     TYPE(op), rip
Source 20 never:  mov     NEVER(wCCR),rip
Source 22 equal:  mov     EQ(wCCR),rip
Source 24 ne:     mov     NE(wCCR),rip
Source 26 lesst:  mov     LT(wCCR),rip
Source 28 lesse:  mov     LE(wCCR),rip
Source 2a greate: mov     GE(wCCR),rip
Source 2c gt:     mov     GT(wCCR),rip
Source 2e noDST:  mov     ci, lhs         
Source 2f         shr     $15, lhs
Source 31         and     $maskLow4, lhs
Source 33         jmp     oRHS
Source 35 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 36         shr     $15, lhs
Source 38         and     $maskLow4, lhs
Source 3a oDST:   mov     ci, dst
Source 3b         shr     $19, dst
Source 3d         and     $maskLow4, dst
Source 3f oRHS:   mov     $maskA, work0
Source 41         and     ci,work0
Source 42         shr     $12, work0      ;work 0 holds the addressing mode
Source 44         mov     ADDR(work0), rip
Source 46 imd:    mov     ci, work0
Source 47         and     $maskExp, work0 ;exponent
Source 49         shr     $9, work0
Source 4b         and     $maskValue, rhs ;value
Source 4d         shl     work0, rhs      ;shifted value in rhs
Source 4e         mov     INSTR(op), rip
Source 50 rim:    mov     ci, shiftC
Source 51         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 53         mov     ci, work0
Source 54         and     $shopMask, work0        ;work0 now has the shop
Source 56         shl     $22, rhs
Source 58         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5a         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 5c         mov     SHOP(work0), rip
Source 5e rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 60         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 61         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 63         mov     ci, work0
Source 64         and     $shopMask, work0        ; work0 now has the shift op code
Source 66         shl     $22, rhs
Source 68         shr     $28, rhs        ; rhs has rhs register
Source 6a         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 6c         mov     SHOP(work0), rip
Source 6e lsl:    shl     shiftC, rhs
Source 6f         mov     INSTR(op), rip
Source 71 lsr:    shr     shiftC, rhs
Source 72         mov     INSTR(op), rip
Source 74 asr:    sar     shiftC, rhs
Source 75         mov     INSTR(op), rip
Source 77 ror:    mov     rhs, work0
Source 78         mov     $32, work1      
Source 7a         sub     shiftC, work1   ;work0 := 32-shr
Source 7b         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 7c         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 7d         add     work0, rhs
Source 7e         mov     INSTR(op), rip
Source 80 rpm:    mov     $maskLow4, work0
Source 82         and     ci, work0       ;work0 now has src reg 3
Source 83         shl     $22, rhs
Source 85         shr     $28, rhs        ; rhs now has src reg 2
Source 87         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 89         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 8b         mul     work0, rhs
Source 8c add:    add     REGS(lhs), rhs
Source 8e         mov     FETCHT(op), rip
Source 90 adc:    mov     wCCR, work0
Source 91         shr     $2, work0
Source 93         shl     $31, work0
Source 95         add     REGS(lhs), rhs
Source 97         add     work0, rhs
Source 98         mov     FETCHT(op), rip
Source 9a sub:    mov     REGS(lhs), work0
Source 9c         add     $1, wpc
Source 9f         sub     rhs, work0      
Source a0         mov     work0, REGS(dst)
Source a2         mov     FETCHT(op), rip
Source a4 eor:    xor     REGS(lhs), rhs
Source a6         mov     FETCHT(op), rip
Source a8 orr:    or      REGS(lhs), rhs
Source aa         mov     FETCHT(op), rip
Source ac and:    and     REGS(lhs), rhs
Source ae         mov     FETCHT(op), rip
Source b0 mul:    mul     REGS(lhs), rhs
Source b2         mov     FETCHT(op), rip
Source b4 div:    mov     REGS(lhs), work0
Source b6         div     rhs, work0
Source b7         add     $1, wpc
Source ba         mov     work0, REGS(dst)
Source bc         mov     FETCHT(op), rip
Source be mov:    mov     FETCHT(op), rip
Source c0 mvn:    xor     $flip, rhs
Source c2         mov     FETCHT(op), rip
Source c4 swi:    mov     REGS, work0
Source c6         trap    rhs
Source c7         add     $1, wpc
Source ca         mov     work0, REGS
Source cc         and     REGS, REGS
Source cf         mov     FETCHT(op), rip
Source d1 ldm:    mov     REGS(dst), lhs
Source d3         add     $1, wpc
Source d6         and     $mask23to0, lhs ;lhs is base register
Source d8         mov     $0, work0       ;work0 holds reg number
Source da         test    $1, rhs
Source dc         jne     lloading
Source de         add     $1, work0
Source e0         shr     $1, rhs
Source e2         je      LDMdone
Source e4         test    $1, rhs
Source e6         jne     lloading
Source e8         jmp     lshifting
Source ea         mov     WARM(lhs), REGS(work0)
Source ed         add     $1, lhs
Source ef         jmp     lshifting
Source f1         mov     lhs, REGS(dst)
Source f3         mov     FETCHT(op), rip
Source f5 stm:    mov     wCCR, work0
Source f6         shl     $24, work0
Source f8         or      work0, wpc
Source fa         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source fc         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source fe         mov     $15, work0      ;work0 holds register number
Source 100         shl     $16, rhs
Source 102         jl      sloading
Source 104         sub     $1, work0       ;
Source 106         shl     $1, rhs         
Source 108         jg      sshifting       ;is the next bit set?
Source 10a         je      STMdone
Source 10c         sub     $1, lhs                         
Source 10e         mov     REGS(work0), WARM(lhs)
Source 111         cmp     $0, rhs
Source 113         jne     sshifting
Source 115         add     $1, wpc
Source 118         mov     lhs, REGS(dst)
Source 11a         mov     FETCHT(op), rip
Source 11c cmpCC:  mov     REGS(lhs), work0
Source 11e         add     $1, wpc 
Source 121         sub     rhs, work0
Source 122         mov     ccr, wCCR
Source 123         jmp     fetch
Source 125 tstCC:  test    REGS(lhs), rhs
Source 127         jmp     fetch3
Source 129 movCC:  mov     rhs, REGS(dst)
Source 12b         add     $1, wpc 
Source 12e         and     rhs, rhs
Source 12f         mov     ccr, wCCR
Source 130         jmp     fetch
Source 132 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 133         shr     $15, lhs
Source 135         and     $maskLow4, lhs  ;lhs now has base register in it
Source 137         mov     ci, dst
Source 138         shr     $19, dst
Source 13a         and     $maskLow4, dst  ;dst now has dst register
Source 13c         mov     $maskA, work0
Source 13e         and     ci, work0
Source 13f         shr     $12, work0      ;work0 now has addressing mode
Source 141         mov     lsADDR(work0), rip
Source 143 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 145         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 147         mov     WARM(rhs), REGS(dst)
Source 14a         add     $1, wpc                 ;changed WARM(lhs, rhs) to WARM(rhs)
Source 14d         jmp     fetch
Source 14f str:    add     REGS(lhs), rhs          ;ADDITION
Source 151         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 153         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 156         add     $1, wpc
Source 159         jmp     fetch
Source 15b ldu:    jge     posldu
Source 15d         add     REGS(lhs), rhs          ;ADDITION
Source 15f         and     $mask23to0, rhs
Source 161         add     $1, wpc                 ;ADDITION:Masking, rhs now has the modified address
Source 164         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 167         mov     rhs, REGS(lhs)  
Source 169         and     REGS(dst), REGS(dst)
Source 16c         mov     FETCHT(op), rip
Source 16e posldu: mov     REGS(lhs), work0
Source 170         and     $mask23to0, work0
Source 172         add     REGS(lhs), rhs
Source 174         add     $1, wpc
Source 177         and     $mask23to0, rhs
Source 179         mov     rhs, REGS(lhs)
Source 17b         mov     WARM(work0),REGS(dst)
Source 17e         and     REGS(dst),REGS(dst)
Source 181         mov     FETCHT(op), rip         ;this was fetch2 i dont know why
Source 183 stu:    jge     posstu
Source 185         add     REGS(lhs), rhs
Source 187         and     $mask23to0, rhs
Source 189         mov     REGS(dst), WARM(rhs)
Source 18c         add     $1, wpc
Source 18f         mov     rhs, REGS(lhs)
Source 191         and     WARM(rhs),WARM(rhs)
Source 194         mov     FETCHT(op), rip
Source 196 posstu: mov     REGS(lhs), work0
Source 198         and     $mask23to0, work0 ;warm has effective address
Source 19a         mov     REGS(dst), WARM(work0)
Source 19d         add     $1, wpc
Source 1a0         add     work0, rhs
Source 1a1         and     $mask23to0, rhs
Source 1a3         mov     rhs, REGS(lhs)
Source 1a5         and     WARM(rhs),WARM(rhs)
Source 1a8         mov     FETCHT(op), rip 
Source 1aa adr:    add     REGS(lhs), rhs
Source 1ac         and     $mask23to0, rhs 
Source 1ae         add     $1, wpc
Source 1b1         mov     rhs, REGS(dst)
Source 1b3         mov     FETCHT(op), rip
Source 1b5 bl:     mov     wpc, wlr
Source 1b8         add     $1, wlr
Source 1bb         and     $mask23to0, wlr
Source 1be b:      add     ci, wpc
Source 1c0         jmp     fetch
Source 1c2 soff:   shl     $18, rhs
Source 1c4         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 1c6         mov     INSTR(op), rip
Source 1c8 no:     add     $1, wpc
Source 1cb         and     $mask23to0, wpc
Source 1ce         jmp     fetch
End
