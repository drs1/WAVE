WindObjectFile1
File wave2.s
Symbol ADDR 688
Symbol ALL3 46
Symbol COND 568
Symbol EQ 592
Symbol GE 656
Symbol GT 672
Symbol INSTR 456
Symbol LE 640
Symbol LT 624
Symbol NE 608
Symbol NEVER 576
Symbol REGS 440
Symbol SHOP 695
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 508
Symbol WARM 704
Symbol adc 183
Symbol adcCC 372
Symbol add 179
Symbol addCC 368
Symbol adr 363
Symbol and 208
Symbol andCC 404
Symbol asr 155
Symbol branch 84
Symbol cmpCC 390
Symbol div 216
Symbol divCC 416
Symbol done 291
Symbol eor 200
Symbol eorCC 396
Symbol equal 27
Symbol fetch 11
Symbol fetch2 9
Symbol fetch3 8
Symbol flip -1
Symbol getop 18
Symbol greate 35
Symbol gt 37
Symbol imd 105
Symbol ldm 234
Symbol ldmCC 436
Symbol ldr 298
Symbol ldrCC 436
Symbol ldu 319
Symbol lduCC 436
Symbol lesse 33
Symbol lesst 31
Symbol lloading 248
Symbol ls 65
Symbol lsADDR 699
Symbol lshifting 242
Symbol lsl 149
Symbol lsr 152
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 223
Symbol movCC 424
Symbol mul 212
Symbol mulCC 412
Symbol mvn 225
Symbol mvnCC 429
Symbol ne 29
Symbol never 25
Symbol next 436
Symbol noDST 39
Symbol oDST 51
Symbol oRHS 56
Symbol orr 204
Symbol orrCC 400
Symbol posldu 333
Symbol posstu 355
Symbol rim 115
Symbol ror 158
Symbol rpm 167
Symbol rsr 131
Symbol sloading 282
Symbol soff 97
Symbol sshifting 274
Symbol stm 259
Symbol str 309
Symbol strCC 436
Symbol stu 341
Symbol stuCC 436
Symbol sub 193
Symbol subCC 382
Symbol swi 229
Symbol swiCC 433
Symbol tstCC 408
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register wlr 4
Register work0 0
Register work1 1
Register wpc 15
Memory 1b8 0
Memory 1b9 0
Memory 1ba 0
Memory 1bb 0
Memory 1bc 0
Memory 1bd 0
Memory 1be 0
Memory 1bf 0
Memory 1c0 0
Memory 1c1 0
Memory 1c2 0
Memory 1c3 0
Memory 1c4 0
Memory 1c5 ffffff
Memory 1c6 0
Memory 1c7 0
Memory 1c8 b3
Memory 1c9 b7
Memory 1ca c1
Memory 1cb 0
Memory 1cc c8
Memory 1cd cc
Memory 1ce d0
Memory 1cf 0
Memory 1d0 d4
Memory 1d1 0
Memory 1d2 d8
Memory 1d3 df
Memory 1d4 e1
Memory 1d5 e5
Memory 1d6 ea
Memory 1d7 103
Memory 1d8 12a
Memory 1d9 135
Memory 1da 13f
Memory 1db 155
Memory 1dc 16b
Memory 1dd 0
Memory 1de 0
Memory 1df 0
Memory 1e0 0
Memory 1e1 0
Memory 1e2 0
Memory 1e3 0
Memory 1e4 0
Memory 1e5 0
Memory 1e6 0
Memory 1e7 0
Memory 1e8 170
Memory 1e9 174
Memory 1ea 17e
Memory 1eb 186
Memory 1ec 18c
Memory 1ed 190
Memory 1ee 194
Memory 1ef 198
Memory 1f0 19c
Memory 1f1 0
Memory 1f2 1a0
Memory 1f3 1a8
Memory 1f4 1ad
Memory 1f5 1b1
Memory 1f6 1b4
Memory 1f7 0
Memory 1f8 1b4
Memory 1f9 1b4
Memory 1fa 1b4
Memory 1fb 1b4
Memory 1fc 2e
Memory 1fd 2e
Memory 1fe 2e
Memory 1ff 27
Memory 200 2e
Memory 201 2e
Memory 202 2e
Memory 203 27
Memory 204 2e
Memory 205 2e
Memory 206 2e
Memory 207 33
Memory 208 33
Memory 209 38
Memory 20a 2e
Memory 20b 41
Memory 20c 41
Memory 20d 41
Memory 20e 41
Memory 20f 41
Memory 210 41
Memory 211 0
Memory 212 0
Memory 213 0
Memory 214 54
Memory 215 54
Memory 216 54
Memory 217 54
Memory 218 0
Memory 219 0
Memory 21a 0
Memory 21b 0
Memory 21c 2e
Memory 21d 2e
Memory 21e 2e
Memory 21f 27
Memory 220 2e
Memory 221 2e
Memory 222 27
Memory 223 2e
Memory 224 2e
Memory 225 0
Memory 226 2e
Memory 227 33
Memory 228 33
Memory 229 38
Memory 22a 2e
Memory 22b 41
Memory 22c 41
Memory 22d 41
Memory 22e 41
Memory 22f 41
Memory 230 41
Memory 231 0
Memory 232 0
Memory 233 0
Memory 234 54
Memory 235 54
Memory 236 54
Memory 237 54
Memory 238 0
Memory 239 19
Memory 23a 1b
Memory 23b 1d
Memory 23c 1f
Memory 23d 21
Memory 23e 23
Memory 23f 25
Memory 240 1b4
Memory 241 1b4
Memory 242 1b4
Memory 243 1b4
Memory 244 1b4
Memory 245 1b4
Memory 246 1b4
Memory 247 1b4
Memory 248 1b4
Memory 249 1b4
Memory 24a 1b4
Memory 24b 1b4
Memory 24c 1b4
Memory 24d 1b4
Memory 24e 1b4
Memory 24f 1b4
Memory 250 1b4
Memory 251 1b4
Memory 252 1b4
Memory 253 1b4
Memory 254 12
Memory 255 12
Memory 256 12
Memory 257 1b4
Memory 258 1b4
Memory 259 1b4
Memory 25a 1b4
Memory 25b 1b4
Memory 25c 1b4
Memory 25d 12
Memory 25e 12
Memory 25f 12
Memory 260 12
Memory 261 12
Memory 262 12
Memory 263 12
Memory 264 1b4
Memory 265 1b4
Memory 266 1b4
Memory 267 12
Memory 268 12
Memory 269 12
Memory 26a 12
Memory 26b 12
Memory 26c 12
Memory 26d 1b4
Memory 26e 1b4
Memory 26f 1b4
Memory 270 1b4
Memory 271 12
Memory 272 1b4
Memory 273 12
Memory 274 1b4
Memory 275 12
Memory 276 1b4
Memory 277 12
Memory 278 12
Memory 279 1b4
Memory 27a 12
Memory 27b 12
Memory 27c 1b4
Memory 27d 12
Memory 27e 1b4
Memory 27f 12
Memory 280 1b4
Memory 281 12
Memory 282 1b4
Memory 283 12
Memory 284 12
Memory 285 12
Memory 286 12
Memory 287 12
Memory 288 12
Memory 289 1b4
Memory 28a 12
Memory 28b 12
Memory 28c 1b4
Memory 28d 12
Memory 28e 12
Memory 28f 12
Memory 290 12
Memory 291 1b4
Memory 292 12
Memory 293 1b4
Memory 294 12
Memory 295 1b4
Memory 296 12
Memory 297 1b4
Memory 298 12
Memory 299 1b4
Memory 29a 12
Memory 29b 1b4
Memory 29c 12
Memory 29d 1b4
Memory 29e 12
Memory 29f 1b4
Memory 2a0 12
Memory 2a1 1b4
Memory 2a2 12
Memory 2a3 1b4
Memory 2a4 1b4
Memory 2a5 1b4
Memory 2a6 1b4
Memory 2a7 1b4
Memory 2a8 1b4
Memory 2a9 12
Memory 2aa 1b4
Memory 2ab 1b4
Memory 2ac 12
Memory 2ad 1b4
Memory 2ae 1b4
Memory 2af 1b4
Memory 2b0 69
Memory 2b1 69
Memory 2b2 69
Memory 2b3 69
Memory 2b4 73
Memory 2b5 83
Memory 2b6 a7
Memory 2b7 95
Memory 2b8 98
Memory 2b9 9b
Memory 2ba 9e
Memory 2bb 61
Memory 2bc 61
Memory 2bd 61
Memory 2be 61
Memory 2bf 73
Memory 0 40198000 1b7
Memory 2 40198000 2bd
Memory 4 180000 6
Memory 6 8198000 4
Memory 8 491a0000
Memory 9 4b670000 1b8
Memory b 49cf8000 2c0
Memory d 48070000
Memory e c8180000 1d
Memory 10 7e480000 238
Memory 12 49a70000
Memory 13 c1b80000 3
Memory 15 c9b80000 1a
Memory 17 4e4e8000 1fc
Memory 19 4e4c0000 240
Memory 1b 4e4c0000 250
Memory 1d 4e4c0000 260
Memory 1f 4e4c0000 270
Memory 21 4e4c0000 280
Memory 23 4e4c0000 290
Memory 25 4e4c0000 2a0
Memory 27 49870000
Memory 28 c9980000 f
Memory 2a 81980000 f
Memory 2c 8198000 b
Memory 2e 49870000
Memory 2f c9980000 f
Memory 31 81980000 f
Memory 33 49670000
Memory 34 c9780000 13
Memory 36 81780000 f
Memory 38 48180000 7800
Memory 3a 80070000
Memory 3b c8180000 c
Memory 3d a1f80000 1
Memory 3f 4e480000 2b0
Memory 41 49870000
Memory 42 c9980000 f
Memory 44 81980000 f
Memory 46 49670000
Memory 47 c9780000 13
Memory 49 81780000 f
Memory 4b 48180000 7800
Memory 4d 80070000
Memory 4e c8180000 c
Memory 50 a1f80000 1
Memory 52 4e480000 2bb
Memory 54 a1e70000
Memory 55 81f80000 ffffff
Memory 57 c9d80000 16
Memory 59 4e870000
Memory 5a 28198000 ffffffb0
Memory 5c 48878000
Memory 5d a0980000 1
Memory 5f 8198000 ffffffab
Memory 61 81d80000 3fff
Memory 63 c1d80000 12
Memory 65 d1d80000 12
Memory 67 4e4e8000 1c8
Memory 69 48070000
Memory 6a 80180000 3e00
Memory 6c c8180000 9
Memory 6e 81d80000 1ff
Memory 70 c1c00000
Memory 71 4e4e8000 1c8
Memory 73 49270000
Memory 74 81380000 3f
Memory 76 48070000
Memory 77 c0180000 14
Memory 79 c8180000 1e
Memory 7b c1d80000 16
Memory 7d c9d80000 1c
Memory 7f 49cf0000 1b8
Memory 81 4e480000 2b7
Memory 83 49380000 f
Memory 85 81270000
Memory 86 492c8000 1b8
Memory 88 48070000
Memory 89 c0180000 14
Memory 8b c8180000 1e
Memory 8d c1d80000 16
Memory 8f c9d80000 1c
Memory 91 49cf0000 1b8
Memory 93 4e480000 2b7
Memory 95 c1c48000
Memory 96 4e4e8000 1c8
Memory 98 c9c48000
Memory 99 4e4e8000 1c8
Memory 9b d1c48000
Memory 9c 4e4e8000 1c8
Memory 9e 48070000
Memory 9f 48380000 20
Memory a1 a8248000
Memory a2 c0008000
Memory a3 c9c48000
Memory a4 a1c00000
Memory a5 4e4e8000 1c8
Memory a7 48180000 f
Memory a9 80070000
Memory aa c1d80000 16
Memory ac c9d80000 1c
Memory ae 49cf0000 1b8
Memory b0 48080000 1b8
Memory b2 b1c00000
Memory b3 a1ce0000 1b8
Memory b5 8198000 ffffff53
Memory b7 48040000
Memory b8 c8180000 2
Memory ba c0180000 1f
Memory bc a1ce0000 1b8
Memory be a1c00000
Memory bf 8198000 ffffff49
Memory c1 480e0000 1b8
Memory c3 a8070000
Memory c4 4b600000 1b8
Memory c6 8198000 ffffff44
Memory c8 91ce0000 1b8
Memory ca 8198000 ffffff3e
Memory cc 89ce0000 1b8
Memory ce 8198000 ffffff3a
Memory d0 81ce0000 1b8
Memory d2 8198000 ffffff36
Memory d4 b1ce0000 1b8
Memory d6 8198000 ffffff32
Memory d8 480e0000 1b8
Memory da b8070000
Memory db 4b600000 1b8
Memory dd 8198000 ffffff2d
Memory df 8198000 ffffff29
Memory e1 91d80000 ffffffff
Memory e3 8198000 ffffff25
Memory e5 480a8000 1b8
Memory e7 70000
Memory e8 8198000 ffffff22
Memory ea 48180000 f
Memory ec 48380000 0
Memory ee c1d80000 10
Memory f0 10198000 7
Memory f2 c1d80000 1
Memory f4 a8180000 1
Memory f6 38198000 fffffffb
Memory f8 4a158000 1 1b8
Memory fb a0380000 1
Memory fd 99d80000 0
Memory ff 28198000 fffffff2
Memory 101 8198000 ffffff09
Memory 103 498d8000 1b8
Memory 105 81980000 ffffff
Memory 107 40198000 1b8
Memory 109 a1800000
Memory 10a 48180000 f
Memory 10c 48380000 0
Memory 10e c1d80000 10
Memory 110 10198000 9
Memory 112 a8180000 1
Memory 114 c1d80000 1
Memory 116 38198000 fffffffb
Memory 118 20198000 a
Memory 11a a9980000 1
Memory 11c 4d880000 1b8 1
Memory 11f 99d80000 0
Memory 121 28198000 fffffff0
Memory 123 40198000 19c
Memory 125 a9800000
Memory 126 4b660000 1b8
Memory 128 8198000 fffffee2
Memory 12a 49878000
Memory 12b a9980000 1
Memory 12d a1c60000
Memory 12e 41998000 191
Memory 130 4b760000 e 1b8
Memory 133 8198000 fffffed7
Memory 135 498e0000 1b8
Memory 137 40198000 188
Memory 139 a1800000
Memory 13a 4d8d8000 1b8 e
Memory 13d 8198000 fffffecd
Memory 13f 498e0000 1b8
Memory 141 99d88000 0
Memory 143 38198000 9
Memory 145 4b760000 e 1b8
Memory 148 43960000 e 1b8
Memory 14b 8198000 fffffebf
Memory 14d 4b6e0000 1b8 1b8
Memory 150 43960000 e 1b8
Memory 153 8198000 fffffeb7
Memory 155 498e0000 1b8
Memory 157 99d80000 0
Memory 159 38198000 9
Memory 15b 4d8d8000 1b8 e
Memory 15e 43960000 e 1b8
Memory 161 8198000 fffffea9
Memory 163 4b8d8000 1b8 1b8
Memory 166 43960000 e 1b8
Memory 169 8198000 fffffea1
Memory 16b 43760000 e 1b8
Memory 16e 8198000 fffffe9c
Memory 170 a1ce0000 1b8
Memory 172 8198000 fffffe95
Memory 174 48040000
Memory 175 c8180000 2
Memory 177 c0180000 1f
Memory 179 a1ce0000 1b8
Memory 17b a1c00000
Memory 17c 8198000 fffffe8b
Memory 17e 480e0000 1b8
Memory 180 a8070000
Memory 181 491a0000
Memory 182 4b600000 1b8
Memory 184 8198000 fffffe86
Memory 186 480e0000 1b8
Memory 188 a8070000
Memory 189 491a0000
Memory 18a 8198000 fffffe80
Memory 18c 91ce0000 1b8
Memory 18e 8198000 fffffe79
Memory 190 89ce0000 1b8
Memory 192 8198000 fffffe75
Memory 194 81ce0000 1b8
Memory 196 8198000 fffffe71
Memory 198 d9ce0000 1b8
Memory 19a 8198000 fffffe6d
Memory 19c b1ce0000 1b8
Memory 19e 8198000 fffffe69
Memory 1a0 480e0000 1b8
Memory 1a2 b8070000
Memory 1a3 491a0000
Memory 1a4 4b600000 1b8
Memory 1a6 8198000 fffffe64
Memory 1a8 4b670000 1b8
Memory 1aa 491a0000
Memory 1ab 8198000 fffffe5f
Memory 1ad 91d80000 ffffffff
Memory 1af 8198000 fffffe58
Memory 1b1 70000
Memory 1b2 8198000 fffffe55
Memory 1b4 a1f80000 1
Memory 1b6 8198000 fffffe54
Source 0         lea     REGS, work0
Source 2         lea     WARM, work0
Source 4         trap    $SysOverlay
Source 6         jmp     fetch
Source 8 fetch3: mov     ccr,wCCR        
Source 9 fetch2: mov     rhs, REGS(dst)
Source b fetch:  mov     WARM(wpc),ci 
Source d         mov     ci, work0
Source e         shr     $29, work0      ;high 3 condition bits in work0
Source 10         cmovg   COND(work0), rip
Source 12 getop:  mov     ci,op
Source 13         shl     $3,op
Source 15         shr     $26,op
Source 17         mov     TYPE(op), rip
Source 19 never:  mov     NEVER(wCCR),rip
Source 1b equal:  mov     EQ(wCCR),rip
Source 1d ne:     mov     NE(wCCR),rip
Source 1f lesst:  mov     LT(wCCR),rip
Source 21 lesse:  mov     LE(wCCR),rip
Source 23 greate: mov     GE(wCCR),rip
Source 25 gt:     mov     GT(wCCR),rip
Source 27 noDST:  mov     ci, lhs         ;get dst and lhs
Source 28         shr     $15, lhs
Source 2a         and     $maskLow4, lhs
Source 2c         jmp     oRHS
Source 2e ALL3:   mov     ci, lhs         ;get dst and lhs
Source 2f         shr     $15, lhs
Source 31         and     $maskLow4, lhs
Source 33 oDST:   mov     ci, dst
Source 34         shr     $19, dst
Source 36         and     $maskLow4, dst
Source 38 oRHS:   mov     $maskA, work0
Source 3a         and     ci,work0
Source 3b         shr     $12, work0      ;work 0 holds the addressing mode
Source 3d         add     $1, wpc
Source 3f         mov     ADDR(work0), rip
Source 41 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 42         shr     $15, lhs
Source 44         and     $maskLow4, lhs  ;lhs now has base register in it
Source 46         mov     ci, dst
Source 47         shr     $19, dst
Source 49         and     $maskLow4, dst  ;dst now has dst register
Source 4b         mov     $maskA, work0
Source 4d         and     ci, work0
Source 4e         shr     $12, work0      ;work0 now has addressing mode
Source 50         add     $1, wpc
Source 52         mov     lsADDR(work0), rip 
Source 54 branch: add     ci, wpc
Source 55         and     $mask23to0, wpc
Source 57         shr     $22,ci
Source 59         mov     ci, ccr 
Source 5a         jne     fetch
Source 5c         mov     wpc, wlr
Source 5d         add     $1, wlr
Source 5f         jmp     fetch
Source 61 soff:   and $maskLow13, rhs
Source 63         shl     $18, rhs
Source 65         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 67         mov     INSTR(op), rip
Source 69 imd:    mov     ci, work0
Source 6a         and     $maskExp, work0 ;exponent
Source 6c         shr     $9, work0
Source 6e         and     $maskValue, rhs ;value
Source 70         shl     work0, rhs      ;shifted value in rhs
Source 71         mov     INSTR(op), rip
Source 73 rim:    mov     ci, shiftC
Source 74         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 76         mov     ci, work0
Source 77         shl     $20, work0
Source 79         shr     $30, work0      ;work0 now has the shop
Source 7b         shl     $22, rhs
Source 7d         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 7f         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 81         mov     SHOP(work0), rip
Source 83 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 85         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 86         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 88         mov     ci, work0
Source 89         shl     $20, work0
Source 8b         shr     $30, work0      ; work0 now has the shift op code
Source 8d         shl     $22, rhs
Source 8f         shr     $28, rhs        ; rhs has rhs register
Source 91         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 93         mov     SHOP(work0), rip
Source 95 lsl:    shl     shiftC, rhs
Source 96         mov     INSTR(op), rip
Source 98 lsr:    shr     shiftC, rhs
Source 99         mov     INSTR(op), rip
Source 9b asr:    sar     shiftC, rhs
Source 9c         mov     INSTR(op), rip
Source 9e ror:    mov     rhs, work0
Source 9f         mov     $32, work1      
Source a1         sub     shiftC, work1   ;work1 := 32-shr
Source a2         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source a3         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source a4         add     work0, rhs
Source a5         mov     INSTR(op), rip
Source a7 rpm:    mov     $maskLow4, work0
Source a9         and     ci, work0       ;work0 now has src reg 3
Source aa         shl     $22, rhs
Source ac         shr     $28, rhs        ; rhs now has src reg 2
Source ae         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source b0         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source b2         mul     work0, rhs
Source b3 add:    add     REGS(lhs), rhs
Source b5         jmp     fetch2
Source b7 adc:    mov     wCCR, work0
Source b8         shr     $2, work0
Source ba         shl     $31, work0
Source bc         add     REGS(lhs), rhs
Source be         add     work0, rhs
Source bf         jmp     fetch2
Source c1 sub:    mov     REGS(lhs), work0
Source c3         sub     rhs, work0
Source c4         mov     work0, REGS(dst)
Source c6         jmp     fetch
Source c8 eor:    xor     REGS(lhs), rhs
Source ca         jmp     fetch2
Source cc orr:    or      REGS(lhs), rhs
Source ce         jmp     fetch2
Source d0 and:    and     REGS(lhs), rhs
Source d2         jmp     fetch2
Source d4 mul:    mul     REGS(lhs), rhs
Source d6         jmp     fetch2
Source d8 div:    mov     REGS(lhs), work0
Source da         div     rhs, work0
Source db         mov     work0, REGS(dst)
Source dd         jmp     fetch   
Source df mov:    jmp     fetch2
Source e1 mvn:    xor     $flip, rhs
Source e3         jmp     fetch2
Source e5 swi:    mov     REGS(alwaysZ), work0
Source e7         trap    rhs
Source e8         jmp     fetch
Source ea ldm:    mov     $15, work0      ;work0 holds reg number
Source ec         mov     $0, work1       ;work1 holds memory number
Source ee         shl     $16, ci
Source f0         jl      lloading
Source f2         shl     $1, ci
Source f4         sub     $1, work0
Source f6         jg      lshifting
Source f8         mov     0(dst, work1), REGS(work0)
Source fb         add     $1, work1
Source fd         cmp     $0, ci
Source ff         jne     lshifting
Source 101         jmp     fetch
Source 103 stm:    mov     REGS(dst), lhs
Source 105         and     $0xffffff, lhs
Source 107         lea     WARM, work0
Source 109         add     work0, lhs
Source 10a         mov     $15, work0      ;work0 holds register number
Source 10c         mov     $0, work1
Source 10e         shl     $16, ci
Source 110         jl      sloading
Source 112         sub     $1, work0
Source 114         shl     $1, ci
Source 116         jg      sshifting
Source 118         je      done
Source 11a         sub     $1, lhs
Source 11c         mov     REGS(work0), 0(lhs, work1)
Source 11f         cmp     $0, ci
Source 121         jne     sshifting
Source 123 done:   lea     WARM, work0
Source 125         sub     work0, lhs
Source 126         mov     lhs, REGS(dst)
Source 128         jmp     fetch
Source 12a ldr:    mov     wpc, lhs
Source 12b         sub     $1, lhs
Source 12d         add     lhs, rhs
Source 12e         lea     WARM, lhs
Source 130         mov     0(lhs, rhs), REGS(dst)
Source 133         jmp     fetch
Source 135 str:    mov     REGS(lhs), lhs
Source 137         lea     WARM, work0
Source 139         add     work0, lhs
Source 13a         mov     REGS(dst), 0(lhs, rhs)
Source 13d         jmp     fetch
Source 13f ldu:    mov     REGS(lhs), lhs
Source 141         cmp     0, rhs
Source 143         jg      posldu
Source 145         mov     0(lhs, rhs), REGS(dst)
Source 148         lea     0(lhs, rhs), REGS(lhs)
Source 14b         jmp     fetch
Source 14d posldu: mov     REGS(lhs), REGS(dst)
Source 150         lea     0(lhs, rhs), REGS(lhs)
Source 153         jmp     fetch
Source 155 stu:    mov     REGS(lhs), lhs
Source 157         cmp     $0, rhs
Source 159         jg      posstu
Source 15b         mov     REGS(dst), 0(lhs, rhs)
Source 15e         lea     0(lhs, rhs), REGS(lhs)
Source 161         jmp     fetch
Source 163 posstu: mov     REGS(dst), REGS(lhs)
Source 166         lea     0(lhs, rhs), REGS(lhs)
Source 169         jmp     fetch
Source 16b adr:    lea     0(lhs, rhs), REGS(dst)
Source 16e         jmp     fetch
Source 170 addCC:  add     REGS(lhs), rhs
Source 172         jmp     fetch3
Source 174 adcCC:  mov     wCCR, work0
Source 175         shr     $2, work0
Source 177         shl     $31, work0
Source 179         add     REGS(lhs), rhs
Source 17b         add     work0, rhs
Source 17c         jmp     fetch3
Source 17e subCC:  mov     REGS(lhs), work0
Source 180         sub     rhs, work0
Source 181         mov     ccr,wCCR
Source 182         mov     work0, REGS(dst)
Source 184         jmp     fetch
Source 186 cmpCC:  mov     REGS(lhs), work0
Source 188         sub     rhs, work0
Source 189         mov     ccr, wCCR
Source 18a         jmp     fetch
Source 18c eorCC:  xor     REGS(lhs), rhs
Source 18e         jmp     fetch3
Source 190 orrCC:  or      REGS(lhs), rhs
Source 192         jmp     fetch3
Source 194 andCC:  and     REGS(lhs), rhs
Source 196         jmp     fetch3
Source 198 tstCC:  test    REGS(lhs), rhs
Source 19a         jmp     fetch3
Source 19c mulCC:  mul     REGS(lhs), rhs
Source 19e         jmp     fetch3
Source 1a0 divCC:  mov     REGS(lhs), work0
Source 1a2         div     rhs, work0
Source 1a3         mov     ccr,wCCR                
Source 1a4         mov     work0, REGS(dst)
Source 1a6         jmp     fetch
Source 1a8 movCC:  mov     rhs, REGS(dst)
Source 1aa         mov     ccr,wCCR                        
Source 1ab         jmp     fetch
Source 1ad mvnCC:  xor     $flip,rhs
Source 1af         jmp     fetch3
Source 1b1 swiCC:  trap    rhs
Source 1b2         jmp     fetch3
Source 1b4 next:   add     $1, wpc
Source 1b6         jmp     fetch
End
