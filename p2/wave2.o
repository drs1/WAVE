WindObjectFile1
File wave2.s
Symbol ADDR 679
Symbol ALL3 48
Symbol COND 559
Symbol EQ 583
Symbol GE 647
Symbol GT 663
Symbol INSTR 447
Symbol LE 631
Symbol LT 615
Symbol NE 599
Symbol NEVER 567
Symbol REGS 431
Symbol SHOP 686
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 499
Symbol WARM 695
Symbol adc 187
Symbol adcCC 363
Symbol add 183
Symbol addCC 359
Symbol adr 354
Symbol and 212
Symbol andCC 395
Symbol asr 159
Symbol branch 88
Symbol cmpCC 381
Symbol div 220
Symbol divCC 407
Symbol done 293
Symbol eor 204
Symbol eorCC 387
Symbol equal 29
Symbol fetch 13
Symbol fetch2 11
Symbol fetch3 10
Symbol flip -1
Symbol getop 20
Symbol greate 37
Symbol gt 39
Symbol imd 109
Symbol ldm 238
Symbol ldmCC 427
Symbol ldr 298
Symbol ldrCC 427
Symbol ldu 310
Symbol lduCC 427
Symbol lesse 35
Symbol lesst 33
Symbol lloading 252
Symbol ls 67
Symbol lsADDR 690
Symbol lshifting 246
Symbol lsl 153
Symbol lsr 156
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 227
Symbol movCC 415
Symbol mul 216
Symbol mulCC 403
Symbol mvn 229
Symbol mvnCC 420
Symbol ne 31
Symbol never 27
Symbol next 427
Symbol noDST 41
Symbol oDST 53
Symbol oRHS 58
Symbol orr 208
Symbol orrCC 391
Symbol posldu 324
Symbol posstu 346
Symbol rim 119
Symbol ror 162
Symbol rpm 171
Symbol rsr 135
Symbol sloading 284
Symbol soff 101
Symbol sshifting 276
Symbol stm 263
Symbol str 304
Symbol strCC 427
Symbol stu 332
Symbol stuCC 427
Symbol sub 197
Symbol subCC 373
Symbol swi 233
Symbol swiCC 424
Symbol tstCC 399
Register WARMad 2
Register alwaysZ 5
Register ci 14
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register wlr 4
Register work0 0
Register work1 1
Register wpc 15
Memory 1af 0
Memory 1b0 0
Memory 1b1 0
Memory 1b2 0
Memory 1b3 0
Memory 1b4 0
Memory 1b5 0
Memory 1b6 0
Memory 1b7 0
Memory 1b8 0
Memory 1b9 0
Memory 1ba 0
Memory 1bb 0
Memory 1bc ffffff
Memory 1bd 0
Memory 1be 0
Memory 1bf b7
Memory 1c0 bb
Memory 1c1 c5
Memory 1c2 0
Memory 1c3 cc
Memory 1c4 d0
Memory 1c5 d4
Memory 1c6 0
Memory 1c7 d8
Memory 1c8 0
Memory 1c9 dc
Memory 1ca e3
Memory 1cb e5
Memory 1cc e9
Memory 1cd ee
Memory 1ce 107
Memory 1cf 12a
Memory 1d0 130
Memory 1d1 136
Memory 1d2 14c
Memory 1d3 162
Memory 1d4 0
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd 0
Memory 1de 0
Memory 1df 167
Memory 1e0 16b
Memory 1e1 175
Memory 1e2 17d
Memory 1e3 183
Memory 1e4 187
Memory 1e5 18b
Memory 1e6 18f
Memory 1e7 193
Memory 1e8 0
Memory 1e9 197
Memory 1ea 19f
Memory 1eb 1a4
Memory 1ec 1a8
Memory 1ed 1ab
Memory 1ee 0
Memory 1ef 1ab
Memory 1f0 1ab
Memory 1f1 1ab
Memory 1f2 1ab
Memory 1f3 30
Memory 1f4 30
Memory 1f5 30
Memory 1f6 29
Memory 1f7 30
Memory 1f8 30
Memory 1f9 30
Memory 1fa 29
Memory 1fb 30
Memory 1fc 30
Memory 1fd 30
Memory 1fe 35
Memory 1ff 35
Memory 200 3a
Memory 201 30
Memory 202 43
Memory 203 43
Memory 204 43
Memory 205 43
Memory 206 43
Memory 207 43
Memory 208 0
Memory 209 0
Memory 20a 0
Memory 20b 58
Memory 20c 58
Memory 20d 58
Memory 20e 58
Memory 20f 0
Memory 210 0
Memory 211 0
Memory 212 0
Memory 213 30
Memory 214 30
Memory 215 30
Memory 216 29
Memory 217 30
Memory 218 30
Memory 219 29
Memory 21a 30
Memory 21b 30
Memory 21c 0
Memory 21d 30
Memory 21e 35
Memory 21f 35
Memory 220 3a
Memory 221 30
Memory 222 43
Memory 223 43
Memory 224 43
Memory 225 43
Memory 226 43
Memory 227 43
Memory 228 0
Memory 229 0
Memory 22a 0
Memory 22b 58
Memory 22c 58
Memory 22d 58
Memory 22e 58
Memory 22f 0
Memory 230 1b
Memory 231 1d
Memory 232 1f
Memory 233 21
Memory 234 23
Memory 235 25
Memory 236 27
Memory 237 1ab
Memory 238 1ab
Memory 239 1ab
Memory 23a 1ab
Memory 23b 1ab
Memory 23c 1ab
Memory 23d 1ab
Memory 23e 1ab
Memory 23f 1ab
Memory 240 1ab
Memory 241 1ab
Memory 242 1ab
Memory 243 1ab
Memory 244 1ab
Memory 245 1ab
Memory 246 1ab
Memory 247 1ab
Memory 248 1ab
Memory 249 1ab
Memory 24a 1ab
Memory 24b 14
Memory 24c 14
Memory 24d 14
Memory 24e 1ab
Memory 24f 1ab
Memory 250 1ab
Memory 251 1ab
Memory 252 1ab
Memory 253 1ab
Memory 254 14
Memory 255 14
Memory 256 14
Memory 257 14
Memory 258 14
Memory 259 14
Memory 25a 14
Memory 25b 1ab
Memory 25c 1ab
Memory 25d 1ab
Memory 25e 14
Memory 25f 14
Memory 260 14
Memory 261 14
Memory 262 14
Memory 263 14
Memory 264 1ab
Memory 265 1ab
Memory 266 1ab
Memory 267 1ab
Memory 268 14
Memory 269 1ab
Memory 26a 14
Memory 26b 1ab
Memory 26c 14
Memory 26d 1ab
Memory 26e 14
Memory 26f 14
Memory 270 1ab
Memory 271 14
Memory 272 14
Memory 273 1ab
Memory 274 14
Memory 275 1ab
Memory 276 14
Memory 277 1ab
Memory 278 14
Memory 279 1ab
Memory 27a 14
Memory 27b 14
Memory 27c 14
Memory 27d 14
Memory 27e 14
Memory 27f 14
Memory 280 1ab
Memory 281 14
Memory 282 14
Memory 283 1ab
Memory 284 14
Memory 285 14
Memory 286 14
Memory 287 14
Memory 288 1ab
Memory 289 14
Memory 28a 1ab
Memory 28b 14
Memory 28c 1ab
Memory 28d 14
Memory 28e 1ab
Memory 28f 14
Memory 290 1ab
Memory 291 14
Memory 292 1ab
Memory 293 14
Memory 294 1ab
Memory 295 14
Memory 296 1ab
Memory 297 14
Memory 298 1ab
Memory 299 14
Memory 29a 1ab
Memory 29b 1ab
Memory 29c 1ab
Memory 29d 1ab
Memory 29e 1ab
Memory 29f 1ab
Memory 2a0 14
Memory 2a1 1ab
Memory 2a2 1ab
Memory 2a3 14
Memory 2a4 1ab
Memory 2a5 1ab
Memory 2a6 1ab
Memory 2a7 6d
Memory 2a8 6d
Memory 2a9 6d
Memory 2aa 6d
Memory 2ab 77
Memory 2ac 87
Memory 2ad ab
Memory 2ae 99
Memory 2af 9c
Memory 2b0 9f
Memory 2b1 a2
Memory 2b2 65
Memory 2b3 65
Memory 2b4 65
Memory 2b5 65
Memory 2b6 77
Memory 0 40198000 1ae
Memory 2 40598000 2b4
Memory 4 40198000 2b2
Memory 6 180000 6
Memory 8 8198000 4
Memory a 491a0000
Memory b 4b670000 1af
Memory d 49cf8000 2b7
Memory f 48070000
Memory 10 c8180000 1d
Memory 12 7e480000 22f
Memory 14 49a70000
Memory 15 c1b80000 3
Memory 17 c9b80000 1a
Memory 19 4e4e8000 1f3
Memory 1b 4e4c0000 237
Memory 1d 4e4c0000 247
Memory 1f 4e4c0000 257
Memory 21 4e4c0000 267
Memory 23 4e4c0000 277
Memory 25 4e4c0000 287
Memory 27 4e4c0000 297
Memory 29 49870000
Memory 2a c9980000 f
Memory 2c 81980000 f
Memory 2e 8198000 b
Memory 30 49870000
Memory 31 c9980000 f
Memory 33 81980000 f
Memory 35 49670000
Memory 36 c9780000 13
Memory 38 81780000 f
Memory 3a 48180000 7800
Memory 3c 80070000
Memory 3d c8180000 c
Memory 3f a1f80000 1
Memory 41 4e480000 2a7
Memory 43 49870000
Memory 44 c9980000 f
Memory 46 81980000 f
Memory 48 498e0000 1af
Memory 4a 49670000
Memory 4b c9780000 13
Memory 4d 81780000 f
Memory 4f 48180000 7800
Memory 51 80070000
Memory 52 c8180000 c
Memory 54 a1f80000 1
Memory 56 4e480000 2b2
Memory 58 a1e70000
Memory 59 81f80000 ffffff
Memory 5b c9d80000 16
Memory 5d 4e870000
Memory 5e 28198000 ffffffae
Memory 60 48878000
Memory 61 a0980000 1
Memory 63 8198000 ffffffa9
Memory 65 81d80000 3fff
Memory 67 c1d80000 12
Memory 69 d1d80000 12
Memory 6b 4e4e8000 1bf
Memory 6d 48070000
Memory 6e 80180000 3e00
Memory 70 c8180000 9
Memory 72 81d80000 1ff
Memory 74 c1c00000
Memory 75 4e4e8000 1bf
Memory 77 49270000
Memory 78 81380000 3f
Memory 7a 48070000
Memory 7b c0180000 14
Memory 7d c8180000 1e
Memory 7f c1d80000 16
Memory 81 c9d80000 1c
Memory 83 49cf0000 1af
Memory 85 4e480000 2ae
Memory 87 49380000 f
Memory 89 81270000
Memory 8a 492c8000 1af
Memory 8c 48070000
Memory 8d c0180000 14
Memory 8f c8180000 1e
Memory 91 c1d80000 16
Memory 93 c9d80000 1c
Memory 95 49cf0000 1af
Memory 97 4e480000 2ae
Memory 99 c1c48000
Memory 9a 4e4e8000 1bf
Memory 9c c9c48000
Memory 9d 4e4e8000 1bf
Memory 9f d1c48000
Memory a0 4e4e8000 1bf
Memory a2 48070000
Memory a3 48380000 20
Memory a5 a8248000
Memory a6 c0008000
Memory a7 c9c48000
Memory a8 a1c00000
Memory a9 4e4e8000 1bf
Memory ab 48180000 f
Memory ad 80070000
Memory ae c1d80000 16
Memory b0 c9d80000 1c
Memory b2 49cf0000 1af
Memory b4 48080000 1af
Memory b6 b1c00000
Memory b7 a1ce0000 1af
Memory b9 8198000 ffffff51
Memory bb 48040000
Memory bc c8180000 2
Memory be c0180000 1f
Memory c0 a1ce0000 1af
Memory c2 a1c00000
Memory c3 8198000 ffffff47
Memory c5 480e0000 1af
Memory c7 a8070000
Memory c8 4b600000 1af
Memory ca 8198000 ffffff42
Memory cc 91ce0000 1af
Memory ce 8198000 ffffff3c
Memory d0 89ce0000 1af
Memory d2 8198000 ffffff38
Memory d4 81ce0000 1af
Memory d6 8198000 ffffff34
Memory d8 b1ce0000 1af
Memory da 8198000 ffffff30
Memory dc 480e0000 1af
Memory de b8070000
Memory df 4b600000 1af
Memory e1 8198000 ffffff2b
Memory e3 8198000 ffffff27
Memory e5 91d80000 ffffffff
Memory e7 8198000 ffffff23
Memory e9 480a8000 1af
Memory eb 70000
Memory ec 8198000 ffffff20
Memory ee 48180000 f
Memory f0 48380000 0
Memory f2 c1d80000 10
Memory f4 10198000 7
Memory f6 c1d80000 1
Memory f8 a8180000 1
Memory fa 38198000 fffffffb
Memory fc 4a158000 1 1af
Memory ff a0380000 1
Memory 101 99d80000 0
Memory 103 28198000 fffffff2
Memory 105 8198000 ffffff07
Memory 107 498d8000 1af
Memory 109 81980000 ffffff
Memory 10b a1810000
Memory 10c 48180000 f
Memory 10e 48380000 0
Memory 110 c1d80000 10
Memory 112 10198000 9
Memory 114 a8180000 1
Memory 116 c1d80000 1
Memory 118 38198000 fffffffb
Memory 11a 20198000 a
Memory 11c a9980000 1
Memory 11e 4d880000 1af 1
Memory 121 99d80000 0
Memory 123 28198000 fffffff0
Memory 125 a9810000
Memory 126 4b660000 1af
Memory 128 8198000 fffffee4
Memory 12a a1c60000
Memory 12b 4b710000 e 1af
Memory 12e 8198000 fffffede
Memory 130 a1c60000
Memory 131 4c4d8000 1af e
Memory 134 8198000 fffffed8
Memory 136 498e0000 1af
Memory 138 99d88000 0
Memory 13a 38198000 9
Memory 13c 4b760000 e 1af
Memory 13f 43960000 e 1af
Memory 142 8198000 fffffeca
Memory 144 4b6e0000 1af 1af
Memory 147 43960000 e 1af
Memory 14a 8198000 fffffec2
Memory 14c 498e0000 1af
Memory 14e 99d80000 0
Memory 150 38198000 9
Memory 152 4d8d8000 1af e
Memory 155 43960000 e 1af
Memory 158 8198000 fffffeb4
Memory 15a 4b8d8000 1af 1af
Memory 15d 43960000 e 1af
Memory 160 8198000 fffffeac
Memory 162 43760000 e 1af
Memory 165 8198000 fffffea7
Memory 167 a1ce0000 1af
Memory 169 8198000 fffffea0
Memory 16b 48040000
Memory 16c c8180000 2
Memory 16e c0180000 1f
Memory 170 a1ce0000 1af
Memory 172 a1c00000
Memory 173 8198000 fffffe96
Memory 175 480e0000 1af
Memory 177 a8070000
Memory 178 491a0000
Memory 179 4b600000 1af
Memory 17b 8198000 fffffe91
Memory 17d 480e0000 1af
Memory 17f a8070000
Memory 180 491a0000
Memory 181 8198000 fffffe8b
Memory 183 91ce0000 1af
Memory 185 8198000 fffffe84
Memory 187 89ce0000 1af
Memory 189 8198000 fffffe80
Memory 18b 81ce0000 1af
Memory 18d 8198000 fffffe7c
Memory 18f d9ce0000 1af
Memory 191 8198000 fffffe78
Memory 193 b1ce0000 1af
Memory 195 8198000 fffffe74
Memory 197 480e0000 1af
Memory 199 b8070000
Memory 19a 491a0000
Memory 19b 4b600000 1af
Memory 19d 8198000 fffffe6f
Memory 19f 4b670000 1af
Memory 1a1 491a0000
Memory 1a2 8198000 fffffe6a
Memory 1a4 91d80000 ffffffff
Memory 1a6 8198000 fffffe63
Memory 1a8 70000
Memory 1a9 8198000 fffffe60
Memory 1ab a1f80000 1
Memory 1ad 8198000 fffffe5f
Source 0         lea     REGS, work0
Source 2         lea     WARM, WARMad
Source 4         lea     WARM, work0
Source 6         trap    $SysOverlay
Source 8         jmp     fetch
Source a fetch3: mov     ccr,wCCR        ;----------------------------TOP-------------------;
Source b fetch2: mov     rhs, REGS(dst)  ;----------------------------TOP-------------------;
Source d fetch:  mov     WARM(wpc),ci    ;----------------------------TOP-------------------;
Source f         mov     ci, work0
Source 10         shr     $29, work0      ;high 3 condition bits in work0
Source 12         cmovg   COND(work0), rip
Source 14 getop:  mov     ci,op
Source 15         shl     $3,op
Source 17         shr     $26,op
Source 19         mov     TYPE(op), rip
Source 1b never:  mov     NEVER(wCCR),rip
Source 1d equal:  mov     EQ(wCCR),rip
Source 1f ne:     mov     NE(wCCR),rip
Source 21 lesst:  mov     LT(wCCR),rip
Source 23 lesse:  mov     LE(wCCR),rip
Source 25 greate: mov     GE(wCCR),rip
Source 27 gt:     mov     GT(wCCR),rip
Source 29 noDST:  mov     ci, lhs         ;get dst and lhs
Source 2a         shr     $15, lhs
Source 2c         and     $maskLow4, lhs
Source 2e         jmp     oRHS
Source 30 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 31         shr     $15, lhs
Source 33         and     $maskLow4, lhs
Source 35 oDST:   mov     ci, dst
Source 36         shr     $19, dst
Source 38         and     $maskLow4, dst
Source 3a oRHS:   mov     $maskA, work0
Source 3c         and     ci,work0
Source 3d         shr     $12, work0      ;work 0 holds the addressing mode
Source 3f         add     $1, wpc
Source 41         mov     ADDR(work0), rip
Source 43 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 44         shr     $15, lhs
Source 46         and     $maskLow4, lhs  ;lhs now has base register in it
Source 48         mov     REGS(lhs), lhs  ;lhs now has whatever was stored in lhs
Source 4a         mov     ci, dst
Source 4b         shr     $19, dst
Source 4d         and     $maskLow4, dst  ;dst now has dst register
Source 4f         mov     $maskA, work0
Source 51         and     ci, work0
Source 52         shr     $12, work0      ;work0 now has addressing mode
Source 54         add     $1, wpc
Source 56         mov     lsADDR(work0), rip 
Source 58 branch: add     ci, wpc
Source 59         and     $mask23to0, wpc
Source 5b         shr     $22,ci
Source 5d         mov     ci, ccr 
Source 5e         jne     fetch
Source 60         mov     wpc, wlr
Source 61         add     $1, wlr
Source 63         jmp     fetch
Source 65 soff:   and     $maskLow13, rhs
Source 67         shl     $18, rhs
Source 69         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 6b         mov     INSTR(op), rip
Source 6d imd:    mov     ci, work0
Source 6e         and     $maskExp, work0 ;exponent
Source 70         shr     $9, work0
Source 72         and     $maskValue, rhs ;value
Source 74         shl     work0, rhs      ;shifted value in rhs
Source 75         mov     INSTR(op), rip
Source 77 rim:    mov     ci, shiftC
Source 78         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 7a         mov     ci, work0
Source 7b         shl     $20, work0
Source 7d         shr     $30, work0      ;work0 now has the shop
Source 7f         shl     $22, rhs
Source 81         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 83         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 85         mov     SHOP(work0), rip
Source 87 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 89         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 8a         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 8c         mov     ci, work0
Source 8d         shl     $20, work0
Source 8f         shr     $30, work0      ; work0 now has the shift op code
Source 91         shl     $22, rhs
Source 93         shr     $28, rhs        ; rhs has rhs register
Source 95         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 97         mov     SHOP(work0), rip
Source 99 lsl:    shl     shiftC, rhs
Source 9a         mov     INSTR(op), rip
Source 9c lsr:    shr     shiftC, rhs
Source 9d         mov     INSTR(op), rip
Source 9f asr:    sar     shiftC, rhs
Source a0         mov     INSTR(op), rip
Source a2 ror:    mov     rhs, work0
Source a3         mov     $32, work1      
Source a5         sub     shiftC, work1   ;work1 := 32-shr
Source a6         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source a7         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source a8         add     work0, rhs
Source a9         mov     INSTR(op), rip
Source ab rpm:    mov     $maskLow4, work0
Source ad         and     ci, work0       ;work0 now has src reg 3
Source ae         shl     $22, rhs
Source b0         shr     $28, rhs        ; rhs now has src reg 2
Source b2         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source b4         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source b6         mul     work0, rhs
Source b7 add:    add     REGS(lhs), rhs
Source b9         jmp     fetch2
Source bb adc:    mov     wCCR, work0
Source bc         shr     $2, work0
Source be         shl     $31, work0
Source c0         add     REGS(lhs), rhs
Source c2         add     work0, rhs
Source c3         jmp     fetch2
Source c5 sub:    mov     REGS(lhs), work0
Source c7         sub     rhs, work0
Source c8         mov     work0, REGS(dst)
Source ca         jmp     fetch
Source cc eor:    xor     REGS(lhs), rhs
Source ce         jmp     fetch2
Source d0 orr:    or      REGS(lhs), rhs
Source d2         jmp     fetch2
Source d4 and:    and     REGS(lhs), rhs
Source d6         jmp     fetch2
Source d8 mul:    mul     REGS(lhs), rhs
Source da         jmp     fetch2
Source dc div:    mov     REGS(lhs), work0
Source de         div     rhs, work0
Source df         mov     work0, REGS(dst)
Source e1         jmp     fetch   
Source e3 mov:    jmp     fetch2
Source e5 mvn:    xor     $flip, rhs
Source e7         jmp     fetch2
Source e9 swi:    mov     REGS(alwaysZ), work0
Source eb         trap    rhs
Source ec         jmp     fetch
Source ee ldm:    mov     $15, work0      ;work0 holds reg number
Source f0         mov     $0, work1       ;work1 holds memory number
Source f2         shl     $16, ci
Source f4         jl      lloading
Source f6         shl     $1, ci
Source f8         sub     $1, work0
Source fa         jg      lshifting
Source fc         mov     0(dst, work1), REGS(work0)
Source ff         add     $1, work1
Source 101         cmp     $0, ci
Source 103         jne     lshifting
Source 105         jmp     fetch
Source 107 stm:    mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source 109         and     $0xffffff, lhs  ;mask low 24 bits because memory in WARM is 24-bit addressable
Source 10b         add     WARMad, lhs     ;offset is from WARM, not wind
Source 10c         mov     $15, work0      ;work0 holds register number
Source 10e         mov     $0, work1
Source 110         shl     $16, ci
Source 112         jl      sloading
Source 114         sub     $1, work0
Source 116         shl     $1, ci
Source 118         jg      sshifting
Source 11a         je      done
Source 11c         sub     $1, lhs
Source 11e         mov     REGS(work0), 0(lhs, work1)
Source 121         cmp     $0, ci
Source 123         jne     sshifting
Source 125 done:   sub     WARMad, lhs
Source 126         mov     lhs, REGS(dst)
Source 128         jmp     fetch
Source 12a ldr:    add     lhs, rhs        ;lhs has value to offset from in warm, rhs has offset
Source 12b         mov     0(WARMad, rhs), REGS(dst)
Source 12e         jmp     fetch
Source 130 str:    add     lhs, rhs
Source 131         mov     REGS(dst), 0(WARMad, rhs)
Source 134         jmp     fetch
Source 136 ldu:    mov     REGS(lhs), lhs
Source 138         cmp     0, rhs
Source 13a         jg      posldu
Source 13c         mov     0(lhs, rhs), REGS(dst)
Source 13f         lea     0(lhs, rhs), REGS(lhs)
Source 142         jmp     fetch
Source 144 posldu: mov     REGS(lhs), REGS(dst)
Source 147         lea     0(lhs, rhs), REGS(lhs)
Source 14a         jmp     fetch
Source 14c stu:    mov     REGS(lhs), lhs
Source 14e         cmp     $0, rhs
Source 150         jg      posstu
Source 152         mov     REGS(dst), 0(lhs, rhs)
Source 155         lea     0(lhs, rhs), REGS(lhs)
Source 158         jmp     fetch
Source 15a posstu: mov     REGS(dst), REGS(lhs)
Source 15d         lea     0(lhs, rhs), REGS(lhs)
Source 160         jmp     fetch
Source 162 adr:    lea     0(lhs, rhs), REGS(dst)
Source 165         jmp     fetch
Source 167 addCC:  add     REGS(lhs), rhs
Source 169         jmp     fetch3
Source 16b adcCC:  mov     wCCR, work0
Source 16c         shr     $2, work0
Source 16e         shl     $31, work0
Source 170         add     REGS(lhs), rhs
Source 172         add     work0, rhs
Source 173         jmp     fetch3
Source 175 subCC:  mov     REGS(lhs), work0
Source 177         sub     rhs, work0
Source 178         mov     ccr,wCCR
Source 179         mov     work0, REGS(dst)
Source 17b         jmp     fetch
Source 17d cmpCC:  mov     REGS(lhs), work0
Source 17f         sub     rhs, work0
Source 180         mov     ccr, wCCR
Source 181         jmp     fetch
Source 183 eorCC:  xor     REGS(lhs), rhs
Source 185         jmp     fetch3
Source 187 orrCC:  or      REGS(lhs), rhs
Source 189         jmp     fetch3
Source 18b andCC:  and     REGS(lhs), rhs
Source 18d         jmp     fetch3
Source 18f tstCC:  test    REGS(lhs), rhs
Source 191         jmp     fetch3
Source 193 mulCC:  mul     REGS(lhs), rhs
Source 195         jmp     fetch3
Source 197 divCC:  mov     REGS(lhs), work0
Source 199         div     rhs, work0
Source 19a         mov     ccr,wCCR                
Source 19b         mov     work0, REGS(dst)
Source 19d         jmp     fetch
Source 19f movCC:  mov     rhs, REGS(dst)
Source 1a1         mov     ccr,wCCR                        
Source 1a2         jmp     fetch
Source 1a4 mvnCC:  xor     $flip,rhs
Source 1a6         jmp     fetch3
Source 1a8 swiCC:  trap    rhs
Source 1a9         jmp     fetch3
Source 1ab next:   add     $1, wpc
Source 1ad         jmp     fetch
End
