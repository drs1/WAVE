Debugging.  Type "help" for more help. 
[0x0]	         lea     wpc, work0
[0x2]	         lea     REGS, work0
[0x4]	         lea     WARM, work0
[0x6]	         trap    $SysOverlay
[0x8]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x37]	 oDST:   mov     ci, dst
[0x38]	         shr     $19, dst
[0x3a]	         and     $maskLow4, dst
[0x3c]	 oRHS:   mov     $maskA, work0
[0x3e]	         and     ci,work0
[0x3f]	         shr     $12, work0      ;work 0 holds the addressing mode
[0x41]	         mov     ADDR(work0), rip
[0x43]	 imd:    mov     ci, work0
[0x44]	         and     $maskExp, work0 ;exponent
[0x46]	         shr     $9, work0
[0x48]	         and     $maskValue, rhs ;value
[0x4a]	         shl     work0, rhs      ;shifted value in rhs
[0x4b]	         add     $1, wpc
[0x4e]	         and     $mask23to0, wpc
[0x51]	         mov     INSTR(op), rip
[0x15c]	 movCC:  mov     rhs, REGS(dst)
[0x15e]	         and     rhs,rhs
[0x15f]	         mov     ccr,wCCR                        
[0x160]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x21]	 ne:     mov     NE(wCCR),rip
[0x23b]	 no:     add     $1, wpc
[0x23e]	         and     $mask23to0, wpc
[0x241]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x37]	 oDST:   mov     ci, dst
[0x38]	         shr     $19, dst
[0x3a]	         and     $maskLow4, dst
[0x3c]	 oRHS:   mov     $maskA, work0
[0x3e]	         and     ci,work0
[0x3f]	         shr     $12, work0      ;work 0 holds the addressing mode
[0x41]	         mov     ADDR(work0), rip
[0x43]	 imd:    mov     ci, work0
[0x44]	         and     $maskExp, work0 ;exponent
[0x46]	         shr     $9, work0
[0x48]	         and     $maskValue, rhs ;value
[0x4a]	         shl     work0, rhs      ;shifted value in rhs
[0x4b]	         add     $1, wpc
[0x4e]	         and     $mask23to0, wpc
[0x51]	         mov     INSTR(op), rip
[0x15c]	 movCC:  mov     rhs, REGS(dst)
[0x15e]	         and     rhs,rhs
[0x15f]	         mov     ccr,wCCR                        
[0x160]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x222]	 b:      add     ci, wpc
[0x224]	         and     $mask23to0, wpc
[0x227]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x21]	 ne:     mov     NE(wCCR),rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x222]	 b:      add     ci, wpc
[0x224]	         and     $mask23to0, wpc
[0x227]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x3c]	 oRHS:   mov     $maskA, work0
[0x3e]	         and     ci,work0
[0x3f]	         shr     $12, work0      ;work 0 holds the addressing mode
[0x41]	         mov     ADDR(work0), rip
[0x43]	 imd:    mov     ci, work0
[0x44]	         and     $maskExp, work0 ;exponent
[0x46]	         shr     $9, work0
[0x48]	         and     $maskValue, rhs ;value
[0x4a]	         shl     work0, rhs      ;shifted value in rhs
[0x4b]	         add     $1, wpc
[0x4e]	         and     $mask23to0, wpc
[0x51]	         mov     INSTR(op), rip
[0xd7]	 swi:    mov     REGS(alwaysZ), work0
[0xd9]	         trap    rhs
[0xda]	         jmp     fetch
[0xd]	 fetch:  mov     wpc,next        ;--------------------TOP-------------------;
[0xf]	         mov     WARM(next),ci
[0x11]	         mov     ci, work0
[0x12]	         shr     $29, work0      ;high 3 condition bits in work0
[0x14]	         cmovg   COND(work0), rip
[0x16]	 getop:  mov     ci,op
[0x17]	         shl     $3,op
[0x19]	         shr     $26,op
[0x1b]	         mov     TYPE(op), rip
[0x3c]	 oRHS:   mov     $maskA, work0
[0x3e]	         and     ci,work0
[0x3f]	         shr     $12, work0      ;work 0 holds the addressing mode
[0x41]	         mov     ADDR(work0), rip
[0x43]	 imd:    mov     ci, work0
[0x44]	         and     $maskExp, work0 ;exponent
[0x46]	         shr     $9, work0
[0x48]	         and     $maskValue, rhs ;value
[0x4a]	         shl     work0, rhs      ;shifted value in rhs
[0x4b]	         add     $1, wpc
[0x4e]	         and     $mask23to0, wpc
[0x51]	         mov     INSTR(op), rip
[0xd7]	 swi:    mov     REGS(alwaysZ), work0
[0xd9]	         trap    rhs
