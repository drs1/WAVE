WIND Assembly of phase2.s                                               Page 1

Line [ Addr ]
0001           ;;; emulator for warm - phase2p
0002           ;;; (c) d.r.smith modsoussi bijan
0003 [0x0000]:         .requ   wpc, r15
0004 [0x0000]:         .requ   ci, r14
0005 [0x0000]:         .requ   op, r13
0006 [0x0000]:         .requ   lhs, r12
0007 [0x0000]:         .requ   dst, r11
0008 [0x0000]:         .requ   rhs, r10
0009 [0x0000]:         .requ   shiftC, r9
0010 [0x0000]:         .requ   wCCR, r8
0011 [0x0000]:         .requ   cond, r5
0012 [0x0000]:         .requ   work0, r0
0013 [0x0000]:         .requ   work1, r1
0014                           
0015 [0x0000]:         .equ    maskA, 0x7800           ;1 in 14,13,12th bit
0016 [0x0000]:         .equ    maskShift, 0x3F
0017 [0x0000]:         .equ    maskLow4, 0xf
0018 [0x0000]:         .equ    maskHigh4, 0xf0000000
0019 [0x0000]:         .equ    maskValue, 0x1ff
0020 [0x0000]:         .equ    maskExp, 0x1f00
0021                   
0022 [0x0000]:         lea     WARM,work0
     [0x0000]: 40198000 00000265          
0023 [0x0002]:         trap    $SysOverlay
     [0x0002]: 00180000 00000006          
0024           ;;; --------------------BEGIN FETCHING THE INSTRUCTION-----------
0025           
0026           ;;; we should double up on these. one for after the wCCR has been
0027           ;;; first time and one for before. cause if the wCCR never gets s
0028           ;;; skip all the cc deciphering cause itll just pretty much be an
0029           ;;; statement
0030           
0031           ;;; 5 INSTRUCTIONS
0032 [0x0004]: fetch:  mov     WARM(wpc),ci
     [0x0004]: 49cf8000 00000266          
0033 [0x0006]:         mov     ci, work0
     [0x0006]: 48070000                   
0034 [0x0007]:         shr     $29, work0      ;high 3 condition bits in work0
     [0x0007]: c8180000 0000001d          
0035 [0x0009]:         cmovg   COND(work0), rip
     [0x0009]: 7e480000 0000001f          
0036 [0x000b]: <<<<<<< HEAD
line 36: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none fo
<<<<<<< HEAD
^
0037           
0038           
0039 [0x000b]:         mov     $maskSetCC, setCC
     [0x000b]: 4e780000 00000000 fffffff3 
0040 [0x000e]:         and     ci, setCC       ; set if setCC > 0
     [0x000e]: 86670000 fffffff1          
0041           
0042           
0043 [0x0010]: type:   mov     $maskT, work0   ;decipher type
     [0x0010]: 48180000 00000000          
0044 [0x0012]:         and     ci, work0
     [0x0012]: 80070000                   
0045 [0x0013]:         shr     $31, work0      ;work 0 holds the type
     [0x0013]: c8180000 0000001f          
0046 [0x0015]:         mov     TYPE(work0), rip ;jump on type
WIND Assembly of phase2.s                                               Page 2

Line [ Addr ]
     [0x0015]: 4e480000 000001a7          
0047                   
0048           ;;; increment the program counter and start the loop all over aga
0049 [0x0017]: never:  add     $1, wpc
     [0x0017]: a1f80000 00000001          
0050 [0x0019]:         jmp     fetch
     [0x0019]: 08198000 ffffffea          
0051                   
0052           ;;; check if the zero bit is set in the last wCCR
0053 [0x001b]: eq:     mv      wCCR, work0
line 53: edu.williams.bailey.warmwind.ParseException: Operation "mv" not recogn
eq:     mv      wCCR, work0
        ^
0054 [0x001b]:         and     $4, work0
     [0x001b]: 80180000 00000004          
0055           ;;; if > 0, we execute, if not, we increment wpc and try again
0056                   ;; code here
0057                   ;; code here
0058                   
0059           ;;; check if the zero bit is not set in wCCR    
0060 [0x001d]: ne:     mv      wCCR, work0
line 60: edu.williams.bailey.warmwind.ParseException: Operation "mv" not recogn
ne:     mv      wCCR, work0
        ^
0061 [0x001d]:         and     $4, work0
     [0x001d]: 80180000 00000004          
0062           ;;; if equal to zero, we execute, if not we inc wpc
0063                   ;; code here
0064                   ;; code here
0065           
0066                   
0067           ;;; check if the negative bit is set    
0068 [0x001f]: lt:
0069           
0070                   ;; code here
0071                   ;; code here
0072 [0x001f]: le:
0073           ;;; check if negative and zero are set
0074 [0x001f]: ge:
0075           ;;; check if negative is not set
0076 [0x001f]: gt:
0077           ;;; check if negative and zero are not set
0078 [0x001f]: COND:
0079 [0x001f]:         .data   always, 0, eq, ne, lt, le, ge, gt
     [0x001f]: 0x0000000
     [0x0020]: 0x0000000
     [0x0021]: 0x000001b
     [0x0022]: 0x000001d
     [0x0023]: 0x000001f
     [0x0024]: 0x000001f
     [0x0025]: 0x000001f
     [0x0026]: 0x000001f
0080                   
0081                   
0082           ;;; thoughts and improvements?
0083           ;;;
0084           ;;;
0085           ;;;
0086           ;;; 
0087 [0x0027]: =======
WIND Assembly of phase2.s                                               Page 3

Line [ Addr ]
line 87: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none fo
=======
^
0088           ;;; to do it or not to do it. that is the question
0089           ;;; snag the opcode
0090 [0x0027]: getop:  mov     ci,op
     [0x0027]: 49a70000                   
0091 [0x0028]:         shl     $3,op
     [0x0028]: c1b80000 00000003          
0092 [0x002a]:         shr     $26,op
     [0x002a]: c9b80000 0000001a          
0093           ;;; switch on the opcode
0094 [0x002c]:         mov     TYPE(op), rip
     [0x002c]: 4e4e8000 000001a7          
0095 [0x002e]: never:  mov     NEVER(wCCR),rip
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol never.
     [0x002e]: 4e4c0000 000001eb          
0096 [0x0030]: equal:  mov     EQ(wCCR),rip
     [0x0030]: 4e4c0000 000001fb          
0097 [0x0032]: ne:     mov     NE(wCCR),rip
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol ne.
     [0x0032]: 4e4c0000 0000020b          
0098 [0x0034]: lesst:  mov     LT(wCCR),rip
     [0x0034]: 4e4c0000 0000021b          
0099 [0x0036]: lesse:  mov     LE(wCCR),rip
     [0x0036]: 4e4c0000 0000022b          
0100 [0x0038]: greate: mov     GE(wCCR),rip
     [0x0038]: 4e4c0000 0000023b          
0101 [0x003a]: gt:     mov     GT(wCCR),rip
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol gt.
     [0x003a]: 4e4c0000 0000024b          
0102 [0x003c]: >>>>>>> smittydev
line 102: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0103           ;;; ----------------------END FETCH------------------------------
0104           ;;; ARITH
0105           ;;; 13 INSTRUCTIONS
0106 [0x003c]: noDST:  mov     ci, lhs         ;get dst and lhs
     [0x003c]: 49870000                   
0107 [0x003d]:         shr     $15, lhs
     [0x003d]: c9980000 0000000f          
0108 [0x003f]:         and     $maskLow4, lhs
     [0x003f]: 81980000 0000000f          
0109 [0x0041]:         jmp     oRHS
     [0x0041]: 08198000 0000000b          
0110 [0x0043]: ALL3:   mov     ci, lhs         ;get dst and lhs
     [0x0043]: 49870000                   
0111 [0x0044]:         shr     $15, lhs
     [0x0044]: c9980000 0000000f          
0112 [0x0046]:         and     $maskLow4, lhs
     [0x0046]: 81980000 0000000f          
0113 [0x0048]: oDST:   mov     ci, dst
     [0x0048]: 49670000                   
0114 [0x0049]:         shr     $19, dst
     [0x0049]: c9780000 00000013          
0115 [0x004b]:         and     $maskLow4, dst
     [0x004b]: 81780000 0000000f          
0116 [0x004d]: oRHS:   mov     $maskA, work0
     [0x004d]: 48180000 00007800          
WIND Assembly of phase2.s                                               Page 4

Line [ Addr ]
0117 [0x004f]:         and     ci,work0
     [0x004f]: 80070000                   
0118 [0x0050]:         shr     $12, work0      ;work 0 holds the addressing mode
     [0x0050]: c8180000 0000000c          
0119 [0x0052]:         mov     ADDR(work0), rip
     [0x0052]: 4e480000 0000025b          
0120           ;;; LOAD STORE
0121 [0x0054]: ls:
0122           ;;; BRANCHING
0123 [0x0054]: branch:
0124           ;;; -------------------END INSTRUCTION TYPES---------------------
0125                   
0126           ;;; -------------------BEGIN ADDRESSING MODES--------------------
0127           ;;; Immediate Mode
0128           ;;; 7 INSTRUCTIONS
0129 [0x0054]: imd:    mov     ci, work0
     [0x0054]: 48070000                   
0130 [0x0055]:         and     $maskExp, work0 ;exponent
     [0x0055]: 80180000 00001f00          
0131 [0x0057]:         shr     $9, work0
     [0x0057]: c8180000 00000009          
0132 [0x0059]:         mov     ci, rhs
     [0x0059]: 49470000                   
0133 [0x005a]:         and     $maskValue, rhs ;value
     [0x005a]: 81580000 000001ff          
0134 [0x005c]:         shl     work0, rhs      ;shifted value in rhs
     [0x005c]: c1400000                   
0135 [0x005d]:         mov     INSTR(op), rip
     [0x005d]: 4e4e8000 00000173          
0136           ;;; Register Shifted by Immediate Mode
0137           ;;; 10 INSTRUCTIONS
0138 [0x005f]: rim:    mov     ci, rhs
     [0x005f]: 49470000                   
0139 [0x0060]:         shl     $22, rhs
     [0x0060]: c1580000 00000016          
0140 [0x0062]:         shr     $28, rhs        ;now we have src reg 2 in rhs
     [0x0062]: c9580000 0000001c          
0141 [0x0064]:         mov     REGS(rhs), rhs  ;rhs now has the value that was i
     [0x0064]: 494d0000 00000163          
0142 [0x0066]:         mov     ci, shiftC
     [0x0066]: 49270000                   
0143 [0x0067]:         and     $maskShift, shiftC      ;shift count has the bits
     [0x0067]: 81380000 0000003f          
0144 [0x0069]:         mov     ci, work0
     [0x0069]: 48070000                   
0145 [0x006a]:         shl     $20, work0
     [0x006a]: c0180000 00000014          
0146 [0x006c]:         shr     $30, work0      ;work1 now has the shop
     [0x006c]: c8180000 0000001e          
0147 [0x006e]:         mov     SHOP(work0),rip
     [0x006e]: 4e480000 00000262          
0148           ;;; Register Shifted by Register Mode
0149           ;;; 11 INSTRUCTIONS
0150 [0x0070]: rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
     [0x0070]: 49380000 0000000f          
0151 [0x0072]:         and     ci, shiftC      ; shiftC := shiftC & ci; to get s
     [0x0072]: 81270000                   
0152 [0x0073]:         mov     REGS(shiftC), shiftC ; shiftC now has whatever wa
     [0x0073]: 492c8000 00000163          
0153 [0x0075]:         mov     ci, rhs 
WIND Assembly of phase2.s                                               Page 5

Line [ Addr ]
     [0x0075]: 49470000                   
0154 [0x0076]:         shl     $22, rhs
     [0x0076]: c1580000 00000016          
0155 [0x0078]:         shr     $28, rhs        ; rhs has rhs register
     [0x0078]: c9580000 0000001c          
0156 [0x007a]:         mov     REGS(rhs), rhs  ; rhs now has whatever was stored
     [0x007a]: 494d0000 00000163          
0157 [0x007c]:         mov     ci, work0
     [0x007c]: 48070000                   
0158 [0x007d]:         shl     $20, work0
     [0x007d]: c0180000 00000014          
0159 [0x007f]:         shr     $30, work0      ; work0 now has the shift op code
     [0x007f]: c8180000 0000001e          
0160 [0x0081]:         mov     SHOP(work0), rip
     [0x0081]: 4e480000 00000262          
0161           ;;; --------------------------BEGIN SHIFTING MODES---------------
0162           ;;; logical shift left
0163           ;;; 2 INSTRUCTIONS
0164 [0x0083]: lsl:    shl     shiftC, rhs
     [0x0083]: c1448000                   
0165 [0x0084]:         mov     INSTR(op), rip
     [0x0084]: 4e4e8000 00000173          
0166           ;;; logical shift right
0167           ;;; 2 INSTRUCTIONS
0168 [0x0086]: lsr:    shr     shiftC, rhs
     [0x0086]: c9448000                   
0169 [0x0087]:         mov     INSTR(op), rip
     [0x0087]: 4e4e8000 00000173          
0170           ;;; arithmetic shift right
0171           ;;; 2 INSTRUCTIONS
0172 [0x0089]: asr:    sar     shiftC, rhs
     [0x0089]: d1448000                   
0173 [0x008a]:         mov     INSTR(op), rip
     [0x008a]: 4e4e8000 00000173          
0174           ;;; rotate right shift
0175           ;;; 7 INSTRUCTIONS
0176 [0x008c]: ror:    mov     rhs, work0
     [0x008c]: 48050000                   
0177 [0x008d]:         mov     $32, work1      
     [0x008d]: 48380000 00000020          
0178 [0x008f]:         sub     shiftC, work1   ;work1 := 32-shr
     [0x008f]: a8248000                   
0179 [0x0090]:         shl     work1, work0    ;work1 is low shr bits shifted (3
     [0x0090]: c0008000                   
0180 [0x0091]:         shr     shiftC, rhs     ;work2 is the highest (32-shr) bi
     [0x0091]: c9448000                   
0181 [0x0092]:         add     work0, rhs
     [0x0092]: a1400000                   
0182 [0x0093]:         mov     INSTR(op), rip
     [0x0093]: 4e4e8000 00000173          
0183           ;;; -------------------------END SHIFTING MODES------------------
0184           ;;; Register Product Mode
0185           ;;; 8 INSTRUCTIONS
0186 [0x0095]: rpm:    mov     $maskLow4, work0
     [0x0095]: 48180000 0000000f          
0187 [0x0097]:         and     ci, work0       ; work0 now has src reg 3
     [0x0097]: 80070000                   
0188 [0x0098]:         mov     ci, rhs
     [0x0098]: 49470000                   
0189 [0x0099]:         shl     $22, rhs
WIND Assembly of phase2.s                                               Page 6

Line [ Addr ]
     [0x0099]: c1580000 00000016          
0190 [0x009b]:         shr     $28, rhs        ; rhs now has src reg 2
     [0x009b]: c9580000 0000001c          
0191 [0x009d]:         mov     REGS(rhs), rhs  ; rhs now has whatever was stored
     [0x009d]: 494d0000 00000163          
0192 [0x009f]:         mov     REGS(work0), work0 ;work0 now has whatever was st
     [0x009f]: 48080000 00000163          
0193 [0x00a1]:         mul     work0, rhs
     [0x00a1]: b1400000                   
0194           ;;; -------------------------END ADDRESSING MODES----------------
0195 [0x00a2]: <<<<<<< HEAD
line 195: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0196           
0197           
0198           
0199           
0200 [0x00a2]: =======
line 200: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0201 [0x00a2]: >>>>>>> smittydev
line 201: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0202           ;;; -------------------------BEGIN OPERATIONS--------------------
0203           ;;; thoughts and improvements for all operations:
0204           ;;; 4 INSTRUCTION(S)    
0205 [0x00a2]: add:    add     REGS(lhs), rhs
     [0x00a2]: a14e0000 00000163          
0206 [0x00a4]:         mov     rhs, REGS(dst)
     [0x00a4]: 4b650000 00000163          
0207 [0x00a6]:         add     $1, wpc
     [0x00a6]: a1f80000 00000001          
0208 [0x00a8]:         jmp     fetch
     [0x00a8]: 08198000 ffffff5b          
0209 [0x00aa]: <<<<<<< HEAD
line 209: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0210           
0211           ;;; thoughts and possible improvements?
0212           ;;; not really, this seems like the most straghtforward
0213           ;;; we can do
0214           
0215 [0x00aa]: adc:
0216           
0217 [0x00aa]: =======
line 217: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0218 [0x00aa]: adc:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol adc.
0219 [0x00aa]: >>>>>>> smittydev
line 219: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0220           ;;; 5 INSTRUCTION(S)
0221           ;;; backwards (like div)
WIND Assembly of phase2.s                                               Page 7

Line [ Addr ]
0222 [0x00aa]: sub:    mov     REGS(lhs), work0
     [0x00aa]: 480e0000 00000163          
0223 [0x00ac]:         sub     rhs, work0
     [0x00ac]: a8050000                   
0224 [0x00ad]:         mov     work0, REGS(dst)
     [0x00ad]: 4b600000 00000163          
0225 [0x00af]:         add     $1, wpc
     [0x00af]: a1f80000 00000001          
0226 [0x00b1]:         jmp     fetch
     [0x00b1]: 08198000 ffffff52          
0227 [0x00b3]: <<<<<<< HEAD
line 227: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0228           ;;;     generally, sub and divide do the opposite of what we want
0229           ;;;     it would be easier if we didn't have to move into work re
0230           ;;;     things done
0231           ;;;
0232           ;;;
0233                   
0234 [0x00b3]: =======
line 234: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0235 [0x00b3]: >>>>>>> smittydev
line 235: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0236           ;;; 5 INSTRUCTION(S)    
0237 [0x00b3]: eor:    xor     REGS(lhs),rhs
     [0x00b3]: 914e0000 00000163          
0238 [0x00b5]:         mov     rhs, REGS(dst)
     [0x00b5]: 4b650000 00000163          
0239 [0x00b7]:         add     $1, wpc
     [0x00b7]: a1f80000 00000001          
0240 [0x00b9]:         jmp     fetch
     [0x00b9]: 08198000 ffffff4a          
0241           ;;; 5 INSTRUCTION(S)    
0242 [0x00bb]: orr:    or      REGS(lhs), rhs
     [0x00bb]: 894e0000 00000163          
0243 [0x00bd]:         mov     rhs, REGS(dst)
     [0x00bd]: 4b650000 00000163          
0244 [0x00bf]:         add     $1, wpc
     [0x00bf]: a1f80000 00000001          
0245 [0x00c1]:         jmp     fetch
     [0x00c1]: 08198000 ffffff42          
0246           ;;; 4 INSTRUCTION(S)    
0247 [0x00c3]: and:    and     REGS(lhs), rhs
     [0x00c3]: 814e0000 00000163          
0248 [0x00c5]:         mov     rhs, REGS(dst)
     [0x00c5]: 4b650000 00000163          
0249 [0x00c7]:         add     $1, wpc
     [0x00c7]: a1f80000 00000001          
0250 [0x00c9]:         jmp     fetch
     [0x00c9]: 08198000 ffffff3a          
0251 [0x00cb]: <<<<<<< HEAD
line 251: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0252                   
WIND Assembly of phase2.s                                               Page 8

Line [ Addr ]
0253           ;;; 5 INSTRUCTION(S)    
0254 [0x00cb]: eor:    xor     REGS(lhs),rhs
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol eor.
     [0x00cb]: 914e0000 00000163          
0255 [0x00cd]:         mov     rhs, REGS(dst)
     [0x00cd]: 4b650000 00000163          
0256 [0x00cf]:         mov     ccr, wccr
     [0x00cf]: 4e7a0000 ffffff30          
0257 [0x00d1]:         add     $1, wpc
     [0x00d1]: a1f80000 00000001          
0258 [0x00d3]:         jmp     fetch
     [0x00d3]: 08198000 ffffff30          
0259           
0260           ;;; 5 INSTRUCTION(S)    
0261 [0x00d5]: orr:    or      REGS(lhs), rhs
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol orr.
     [0x00d5]: 894e0000 00000163          
0262 [0x00d7]:         mov     rhs, REGS(dst)
     [0x00d7]: 4b650000 00000163          
0263 [0x00d9]:         mov     ccr, wccr
     [0x00d9]: 4e7a0000 ffffff26          
0264 [0x00db]:         add     $1, wpc
     [0x00db]: a1f80000 00000001          
0265 [0x00dd]:         jmp     fetch
     [0x00dd]: 08198000 ffffff26          
0266                   
0267           ;;; 4 INSTRUCTION(S)    
0268 [0x00df]: and:    and     REGS(lhs), rhs
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol and.
     [0x00df]: 814e0000 00000163          
0269 [0x00e1]:         mov     rhs, REGS(dst)
     [0x00e1]: 4b650000 00000163          
0270 [0x00e3]:         mov     ccr, wccr
     [0x00e3]: 4e7a0000 ffffff1c          
0271 [0x00e5]:         add     $1, wpc
     [0x00e5]: a1f80000 00000001          
0272 [0x00e7]:         jmp     fetch
     [0x00e7]: 08198000 ffffff1c          
0273                   
0274           ;;; 4 INSTRUCTION(S)
0275 [0x00e9]: tst:    test    REGS(lhs), rhs
     [0x00e9]: d94e0000 00000163          
0276 [0x00eb]:         mov     ccr, wccr
     [0x00eb]: 4e7a0000 ffffff14          
0277 [0x00ed]:         add     $1, wpc
     [0x00ed]: a1f80000 00000001          
0278 [0x00ef]:         jmp     fetch
     [0x00ef]: 08198000 ffffff14          
0279                   
0280 [0x00f1]: =======
line 280: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0281 [0x00f1]: >>>>>>> smittydev
line 281: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0282           ;;; 4 INSTRUCTION(S)
0283 [0x00f1]: mul:    mul     REGS(lhs), rhs
     [0x00f1]: b14e0000 00000163          
WIND Assembly of phase2.s                                               Page 9

Line [ Addr ]
0284 [0x00f3]:         mov     rhs, REGS(dst)
     [0x00f3]: 4b650000 00000163          
0285 [0x00f5]:         add     $1, wpc
     [0x00f5]: a1f80000 00000001          
0286 [0x00f7]:         jmp     fetch
     [0x00f7]: 08198000 ffffff0c          
0287 [0x00f9]: <<<<<<< HEAD
line 287: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0288                   
0289 [0x00f9]: =======
line 289: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0290 [0x00f9]: >>>>>>> smittydev
line 290: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0291           ;;; 5 INSTRUCTION(S)
0292 [0x00f9]: div:    mov     REGS(lhs), work0
     [0x00f9]: 480e0000 00000163          
0293 [0x00fb]:         div     rhs, work0
     [0x00fb]: b8050000                   
0294 [0x00fc]:         mov     work0, REGS(dst)
     [0x00fc]: 4b600000 00000163          
0295 [0x00fe]:         add     $1, wpc
     [0x00fe]: a1f80000 00000001          
0296 [0x0100]:         jmp     fetch   
     [0x0100]: 08198000 ffffff03          
0297 [0x0102]: <<<<<<< HEAD
line 297: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0298                   
0299 [0x0102]: =======
line 299: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0300 [0x0102]: >>>>>>> smittydev
line 300: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0301           ;;; 3 INSTRUCTION(S)
0302 [0x0102]: mov:    mov     rhs, REGS(dst)
     [0x0102]: 4b650000 00000163          
0303 [0x0104]:         add     $1, wpc
     [0x0104]: a1f80000 00000001          
0304 [0x0106]:         jmp     fetch
     [0x0106]: 08198000 fffffefd          
0305 [0x0108]: <<<<<<< HEAD
line 305: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
<<<<<<< HEAD
^
0306           
0307 [0x0108]: mvn:
0308           
0309 [0x0108]: swi:
0310           
0311 [0x0108]: ldm:
WIND Assembly of phase2.s                                               Page 10

Line [ Addr ]
0312           
0313 [0x0108]: stm:
0314           
0315 [0x0108]: ldr:
0316           
0317 [0x0108]: str:
0318           
0319 [0x0108]: ldu:
0320           
0321 [0x0108]: stu:
0322           
0323 [0x0108]: adr:
0324           
0325 [0x0108]: bf:
0326           
0327 [0x0108]: bb:
0328           
0329 [0x0108]: blf:
0330           
0331 [0x0108]: blb:
0332           
0333           
0334           ;;; thoughts and improvements?
0335           ;;;
0336           ;;;
0337           ;;;
0338           ;;;
0339           ;;;
0340                   
0341 [0x0108]: =======
line 341: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
=======
^
0342 [0x0108]: mvn:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol mvn.
0343 [0x0108]: swi:    trap    rhs
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol swi.
     [0x0108]: 00050000                   
0344 [0x0109]: ldm:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol ldm.
0345 [0x0109]: stm:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol stm.
0346 [0x0109]: ldr:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol ldr.
0347 [0x0109]: str:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol str.
0348 [0x0109]: ldu:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol ldu.
0349 [0x0109]: stu:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol stu.
0350 [0x0109]: adr:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol adr.
0351 [0x0109]: bf:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol bf.
0352 [0x0109]: bb:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol bb.
0353 [0x0109]: blf:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol blf.
0354 [0x0109]: blb:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol blb.
WIND Assembly of phase2.s                                               Page 11

Line [ Addr ]
0355 [0x0109]: addCC:  add     REGS(lhs), rhs
     [0x0109]: a14e0000 00000163          
0356 [0x010b]:         mov     ccr,wCCR        
     [0x010b]: 491a0000                   
0357 [0x010c]:         mov     rhs, REGS(dst)
     [0x010c]: 4b650000 00000163          
0358 [0x010e]:         add     $1, wpc
     [0x010e]: a1f80000 00000001          
0359 [0x0110]:         jmp     fetch
     [0x0110]: 08198000 fffffef3          
0360 [0x0112]: adcCC:
0361           ;;; 5 INSTRUCTION(S)
0362           ;;; backwards (like div)
0363 [0x0112]: subCC:  mov     REGS(lhs), work0
     [0x0112]: 480e0000 00000163          
0364 [0x0114]:         sub     rhs, work0
     [0x0114]: a8050000                   
0365 [0x0115]:         mov     ccr,wCCR
     [0x0115]: 491a0000                   
0366 [0x0116]:         mov     work0, REGS(dst)
     [0x0116]: 4b600000 00000163          
0367 [0x0118]:         add     $1, wpc
     [0x0118]: a1f80000 00000001          
0368 [0x011a]:         jmp     fetch
     [0x011a]: 08198000 fffffee9          
0369           ;;; 5 INSTRUCTION(S)    
0370 [0x011c]: cmpCC:  mov     REGS(lhs), work0
     [0x011c]: 480e0000 00000163          
0371 [0x011e]:         sub     rhs, work0
     [0x011e]: a8050000                   
0372 [0x011f]:         mov     ccr, wCCR
     [0x011f]: 491a0000                   
0373 [0x0120]:         add     $1, wpc
     [0x0120]: a1f80000 00000001          
0374 [0x0122]:         jmp     fetch
     [0x0122]: 08198000 fffffee1          
0375           ;;; 5 INSTRUCTION(S)    
0376 [0x0124]: eorCC:  xor     REGS(lhs),rhs
     [0x0124]: 914e0000 00000163          
0377 [0x0126]:         mov     ccr, wCCR       
     [0x0126]: 491a0000                   
0378 [0x0127]:         mov     rhs, REGS(dst)
     [0x0127]: 4b650000 00000163          
0379 [0x0129]:         add     $1, wpc
     [0x0129]: a1f80000 00000001          
0380 [0x012b]:         jmp     fetch
     [0x012b]: 08198000 fffffed8          
0381           ;;; 5 INSTRUCTION(S)    
0382 [0x012d]: orrCC:  or      REGS(lhs), rhs
     [0x012d]: 894e0000 00000163          
0383 [0x012f]:         mov     ccr, wCCR       
     [0x012f]: 491a0000                   
0384 [0x0130]:         mov     rhs, REGS(dst)
     [0x0130]: 4b650000 00000163          
0385 [0x0132]:         add     $1, wpc
     [0x0132]: a1f80000 00000001          
0386 [0x0134]:         jmp     fetch
     [0x0134]: 08198000 fffffecf          
0387           ;;; 4 INSTRUCTION(S)    
0388 [0x0136]: andCC:  and     REGS(lhs), rhs
WIND Assembly of phase2.s                                               Page 12

Line [ Addr ]
     [0x0136]: 814e0000 00000163          
0389 [0x0138]:         mov     ccr, wCCR       
     [0x0138]: 491a0000                   
0390 [0x0139]:         mov     rhs, REGS(dst)
     [0x0139]: 4b650000 00000163          
0391 [0x013b]:         add     $1, wpc
     [0x013b]: a1f80000 00000001          
0392 [0x013d]:         jmp     fetch
     [0x013d]: 08198000 fffffec6          
0393           ;;; 4 INSTRUCTION(S)
0394 [0x013f]: tstCC:  test    REGS(lhs), rhs
     [0x013f]: d94e0000 00000163          
0395 [0x0141]:         mov     ccr, wCCR
     [0x0141]: 491a0000                   
0396 [0x0142]:         add     $1, wpc
     [0x0142]: a1f80000 00000001          
0397 [0x0144]:         jmp     fetch
     [0x0144]: 08198000 fffffebf          
0398           ;;; 4 INSTRUCTION(S)
0399 [0x0146]: mulCC:  mul     REGS(lhs), rhs
     [0x0146]: b14e0000 00000163          
0400 [0x0148]:         mov     ccr,wCCR        
     [0x0148]: 491a0000                   
0401 [0x0149]:         mov     rhs, REGS(dst)
     [0x0149]: 4b650000 00000163          
0402 [0x014b]:         add     $1, wpc
     [0x014b]: a1f80000 00000001          
0403 [0x014d]:         jmp     fetch
     [0x014d]: 08198000 fffffeb6          
0404           ;;; 5 INSTRUCTION(S)
0405           ;;; backwards (like sub)
0406 [0x014f]: divCC:  mov     REGS(lhs), work0
     [0x014f]: 480e0000 00000163          
0407 [0x0151]:         div     rhs, work0
     [0x0151]: b8050000                   
0408 [0x0152]:         mov     ccr,wCCR                
     [0x0152]: 491a0000                   
0409 [0x0153]:         mov     work0, REGS(dst)
     [0x0153]: 4b600000 00000163          
0410 [0x0155]:         add     $1, wpc
     [0x0155]: a1f80000 00000001          
0411 [0x0157]:         jmp     fetch   
     [0x0157]: 08198000 fffffeac          
0412           ;;; 3 INSTRUCTION(S)
0413 [0x0159]: movCC:  mov     rhs, REGS(dst)
     [0x0159]: 4b650000 00000163          
0414           ;;;     and     rhs,rhs
0415 [0x015b]:         mov     ccr,wCCR                        
     [0x015b]: 491a0000                   
0416 [0x015c]:         add     $1, wpc
     [0x015c]: a1f80000 00000001          
0417 [0x015e]:         jmp     fetch
     [0x015e]: 08198000 fffffea5          
0418 [0x0160]: mvnCC:
0419 [0x0160]: swiCC:  trap    rhs
     [0x0160]: 00050000                   
0420 [0x0161]: ldmCC:
0421 [0x0161]: ldrCC:
0422 [0x0161]: strCC:
0423 [0x0161]: lduCC:
WIND Assembly of phase2.s                                               Page 13

Line [ Addr ]
0424 [0x0161]: stuCC:
0425 [0x0161]: done:   trap    $SysHalt
     [0x0161]: 00180000 00000000          
0426 [0x0163]: >>>>>>> smittydev
line 426: edu.williams.bailey.warmwind.ParseException: Expecting opcode, none f
>>>>>>> smittydev
^
0427                   
0428 [0x0163]: REGS:
0429 [0x0163]:         .data   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     [0x0163]: 0x0000000
     [0x0164]: 0x0000000
     [0x0165]: 0x0000000
     [0x0166]: 0x0000000
     [0x0167]: 0x0000000
     [0x0168]: 0x0000000
     [0x0169]: 0x0000000
     [0x016a]: 0x0000000
     [0x016b]: 0x0000000
     [0x016c]: 0x0000000
     [0x016d]: 0x0000000
     [0x016e]: 0x0000000
     [0x016f]: 0x0000000
     [0x0170]: 0x0000000
     [0x0171]: 0x0000000
     [0x0172]: 0x0000000
0430 [0x0173]: INSTR:
0431 [0x0173]:         .data   add,adc,sub,0,eor,orr,and,0,mul,0,div,mov,mvn,swi
     [0x0173]: 0x00000a2
     [0x0174]: 0x00000aa
     [0x0175]: 0x00000aa
     [0x0176]: 0x0000000
     [0x0177]: 0x00000b3
     [0x0178]: 0x00000bb
     [0x0179]: 0x00000c3
     [0x017a]: 0x0000000
     [0x017b]: 0x00000f1
     [0x017c]: 0x0000000
     [0x017d]: 0x00000f9
     [0x017e]: 0x0000102
     [0x017f]: 0x0000108
     [0x0180]: 0x0000108
     [0x0181]: 0x0000108
     [0x0182]: 0x0000108
     [0x0183]: 0x0000108
     [0x0184]: 0x0000108
     [0x0185]: 0x0000108
     [0x0186]: 0x0000108
     [0x0187]: 0x0000108
     [0x0188]: 0x0000000
     [0x0189]: 0x0000000
     [0x018a]: 0x0000000
     [0x018b]: 0x0000108
     [0x018c]: 0x0000108
     [0x018d]: 0x0000108
     [0x018e]: 0x0000108
     [0x018f]: 0x0000000
     [0x0190]: 0x0000000
     [0x0191]: 0x0000000
     [0x0192]: 0x0000000
WIND Assembly of phase2.s                                               Page 14

Line [ Addr ]
     [0x0193]: 0x0000109
     [0x0194]: 0x0000112
     [0x0195]: 0x0000112
     [0x0196]: 0x000011c
     [0x0197]: 0x0000124
     [0x0198]: 0x000012d
     [0x0199]: 0x0000136
     [0x019a]: 0x000013f
     [0x019b]: 0x0000146
     [0x019c]: 0x0000000
     [0x019d]: 0x000014f
     [0x019e]: 0x0000159
     [0x019f]: 0x0000160
     [0x01a0]: 0x0000160
     [0x01a1]: 0x0000161
     [0x01a2]: 0x0000000
     [0x01a3]: 0x0000161
     [0x01a4]: 0x0000161
     [0x01a5]: 0x0000161
     [0x01a6]: 0x0000161
0432 [0x01a7]: TYPE:
0433 [0x01a7]:         .data   ALL3,ALL3,ALL3,noDST,ALL3,ALL3,ALL3,noDST,ALL3,AL
     [0x01a7]: 0x0000043
     [0x01a8]: 0x0000043
     [0x01a9]: 0x0000043
     [0x01aa]: 0x000003c
     [0x01ab]: 0x0000043
     [0x01ac]: 0x0000043
     [0x01ad]: 0x0000043
     [0x01ae]: 0x000003c
     [0x01af]: 0x0000043
     [0x01b0]: 0x0000043
     [0x01b1]: 0x0000043
     [0x01b2]: 0x0000048
     [0x01b3]: 0x0000048
     [0x01b4]: 0x000004d
     [0x01b5]: 0x0000043
     [0x01b6]: 0x0000054
     [0x01b7]: 0x0000054
     [0x01b8]: 0x0000054
     [0x01b9]: 0x0000054
     [0x01ba]: 0x0000054
     [0x01bb]: 0x0000054
     [0x01bc]: 0x0000000
     [0x01bd]: 0x0000000
     [0x01be]: 0x0000000
     [0x01bf]: 0x0000054
     [0x01c0]: 0x0000054
     [0x01c1]: 0x0000054
     [0x01c2]: 0x0000054
     [0x01c3]: 0x0000000
     [0x01c4]: 0x0000000
     [0x01c5]: 0x0000000
     [0x01c6]: 0x0000000
     [0x01c7]: 0x0000043
     [0x01c8]: 0x0000043
     [0x01c9]: 0x0000043
     [0x01ca]: 0x000003c
     [0x01cb]: 0x0000043
     [0x01cc]: 0x0000043
WIND Assembly of phase2.s                                               Page 15

Line [ Addr ]
     [0x01cd]: 0x000003c
     [0x01ce]: 0x0000043
     [0x01cf]: 0x0000043
     [0x01d0]: 0x0000000
     [0x01d1]: 0x0000043
     [0x01d2]: 0x0000048
     [0x01d3]: 0x0000048
     [0x01d4]: 0x000004d
     [0x01d5]: 0x0000043
     [0x01d6]: 0x0000054
     [0x01d7]: 0x0000054
     [0x01d8]: 0x0000054
     [0x01d9]: 0x0000054
     [0x01da]: 0x0000054
     [0x01db]: 0x0000054
     [0x01dc]: 0x0000000
     [0x01dd]: 0x0000000
     [0x01de]: 0x0000000
     [0x01df]: 0x0000054
     [0x01e0]: 0x0000054
     [0x01e1]: 0x0000054
     [0x01e2]: 0x0000054
0434 [0x01e3]: COND:
edu.williams.bailey.warmwind.Confusion: Attempt to redefine symbol COND.
0435 [0x01e3]:         .data   0,never,equal,ne,lesst,lesse,greate,gt
     [0x01e3]: 0x0000000
     [0x01e4]: 0x0000017
     [0x01e5]: 0x0000030
     [0x01e6]: 0x000001d
     [0x01e7]: 0x0000034
     [0x01e8]: 0x0000036
     [0x01e9]: 0x0000038
     [0x01ea]: 0x000001f
0436 [0x01eb]: NEVER:
0437 [0x01eb]:         .data   done,done,done,done,done,done,done,done,done,done
     [0x01eb]: 0x0000161
     [0x01ec]: 0x0000161
     [0x01ed]: 0x0000161
     [0x01ee]: 0x0000161
     [0x01ef]: 0x0000161
     [0x01f0]: 0x0000161
     [0x01f1]: 0x0000161
     [0x01f2]: 0x0000161
     [0x01f3]: 0x0000161
     [0x01f4]: 0x0000161
     [0x01f5]: 0x0000161
     [0x01f6]: 0x0000161
     [0x01f7]: 0x0000161
     [0x01f8]: 0x0000161
     [0x01f9]: 0x0000161
     [0x01fa]: 0x0000161
0438 [0x01fb]: EQ:
0439 [0x01fb]:         .data   done,done,done,done,getop,getop,getop,done,done,d
     [0x01fb]: 0x0000161
     [0x01fc]: 0x0000161
     [0x01fd]: 0x0000161
     [0x01fe]: 0x0000161
     [0x01ff]: 0x0000027
     [0x0200]: 0x0000027
     [0x0201]: 0x0000027
WIND Assembly of phase2.s                                               Page 16

Line [ Addr ]
     [0x0202]: 0x0000161
     [0x0203]: 0x0000161
     [0x0204]: 0x0000161
     [0x0205]: 0x0000161
     [0x0206]: 0x0000161
     [0x0207]: 0x0000161
     [0x0208]: 0x0000027
     [0x0209]: 0x0000027
     [0x020a]: 0x0000027
0440 [0x020b]: NE:
0441 [0x020b]:         .data   getop,getop,getop,getop,done,done,done,getop,geto
     [0x020b]: 0x0000027
     [0x020c]: 0x0000027
     [0x020d]: 0x0000027
     [0x020e]: 0x0000027
     [0x020f]: 0x0000161
     [0x0210]: 0x0000161
     [0x0211]: 0x0000161
     [0x0212]: 0x0000027
     [0x0213]: 0x0000027
     [0x0214]: 0x0000027
     [0x0215]: 0x0000027
     [0x0216]: 0x0000027
     [0x0217]: 0x0000027
     [0x0218]: 0x0000161
     [0x0219]: 0x0000161
     [0x021a]: 0x0000161
0442 [0x021b]: LT:
0443 [0x021b]:         .data   done,getop,done,getop,done,getop,done,getop,getop
     [0x021b]: 0x0000161
     [0x021c]: 0x0000027
     [0x021d]: 0x0000161
     [0x021e]: 0x0000027
     [0x021f]: 0x0000161
     [0x0220]: 0x0000027
     [0x0221]: 0x0000161
     [0x0222]: 0x0000027
     [0x0223]: 0x0000027
     [0x0224]: 0x0000161
     [0x0225]: 0x0000027
     [0x0226]: 0x0000027
     [0x0227]: 0x0000161
     [0x0228]: 0x0000027
     [0x0229]: 0x0000161
     [0x022a]: 0x0000027
0444 [0x022b]: LE:
0445 [0x022b]:         .data   done,getop,done,getop,getop,getop,getop,getop,get
     [0x022b]: 0x0000161
     [0x022c]: 0x0000027
     [0x022d]: 0x0000161
     [0x022e]: 0x0000027
     [0x022f]: 0x0000027
     [0x0230]: 0x0000027
     [0x0231]: 0x0000027
     [0x0232]: 0x0000027
     [0x0233]: 0x0000027
     [0x0234]: 0x0000161
     [0x0235]: 0x0000027
     [0x0236]: 0x0000027
     [0x0237]: 0x0000161
WIND Assembly of phase2.s                                               Page 17

Line [ Addr ]
     [0x0238]: 0x0000027
     [0x0239]: 0x0000027
     [0x023a]: 0x0000027
0446 [0x023b]: GE:
0447 [0x023b]:         .data   getop,done,getop,done,getop,done,getop,done,getop
     [0x023b]: 0x0000027
     [0x023c]: 0x0000161
     [0x023d]: 0x0000027
     [0x023e]: 0x0000161
     [0x023f]: 0x0000027
     [0x0240]: 0x0000161
     [0x0241]: 0x0000027
     [0x0242]: 0x0000161
     [0x0243]: 0x0000027
     [0x0244]: 0x0000161
     [0x0245]: 0x0000027
     [0x0246]: 0x0000161
     [0x0247]: 0x0000027
     [0x0248]: 0x0000161
     [0x0249]: 0x0000027
     [0x024a]: 0x0000161
0448 [0x024b]: GT:
0449 [0x024b]:         .data   getop,done,getop,done,done,done,done,done,done,ge
     [0x024b]: 0x0000027
     [0x024c]: 0x0000161
     [0x024d]: 0x0000027
     [0x024e]: 0x0000161
     [0x024f]: 0x0000161
     [0x0250]: 0x0000161
     [0x0251]: 0x0000161
     [0x0252]: 0x0000161
     [0x0253]: 0x0000161
     [0x0254]: 0x0000027
     [0x0255]: 0x0000161
     [0x0256]: 0x0000161
     [0x0257]: 0x0000027
     [0x0258]: 0x0000161
     [0x0259]: 0x0000161
     [0x025a]: 0x0000161
0450 [0x025b]: ADDR:
0451 [0x025b]:         .data   imd, imd, imd, imd, rim, rsr, rpm
     [0x025b]: 0x0000054
     [0x025c]: 0x0000054
     [0x025d]: 0x0000054
     [0x025e]: 0x0000054
     [0x025f]: 0x000005f
     [0x0260]: 0x0000070
     [0x0261]: 0x0000095
0452 [0x0262]: SHOP:
0453 [0x0262]:         .data   lsl, lsr, asr, ror
     [0x0262]: 0x0000083
     [0x0263]: 0x0000086
     [0x0264]: 0x0000089
     [0x0265]: 0x000008c
0454 [0x0266]: WARM:    
Object file not written due to 47 previous errors.

-------------------------------------------------------------------------------
Symbols defined:
        ADDR=603            ALL3=67             COND=31               EQ=507   
WIND Assembly of phase2.s                                               Page 18

Line [ Addr ]
          GE=571              GT=587           INSTR=371              LE=555   
          LT=539              NE=523           NEVER=491            REGS=355   
        SHOP=610            TYPE=423            WARM=614             adc=170   
       adcCC=274             add=162           addCC=265             adr=264   
      always=0               and=195           andCC=310             asr=137   
          bb=264              bf=264             blb=264             blf=264   
      branch=84            cmpCC=284             div=249           divCC=335   
        done=353             eor=179           eorCC=292              eq=27    
       equal=48            fetch=4                ge=31            getop=39    
      greate=56               gt=31              imd=84              ldm=264   
       ldmCC=353             ldr=264           ldrCC=353             ldu=264   
       lduCC=353              le=31            lesse=54            lesst=52    
          ls=84              lsl=131             lsr=134              lt=31    
       maskA=30720        maskExp=7936      maskHigh4=-268435456       maskLow4
   maskSetCC=0         maskShift=63            maskT=0         maskValue=511   
         mov=258           movCC=345             mul=241           mulCC=326   
         mvn=264           mvnCC=352              ne=29            never=23    
       noDST=60             oDST=72             oRHS=77              orr=187   
       orrCC=301             rim=95              ror=140             rpm=149   
         rsr=112           setCC=0               stm=264             str=264   
       strCC=353             stu=264           stuCC=353             sub=170   
       subCC=274             swi=264           swiCC=352             tst=233   
       tstCC=319            type=16             wccr=0      
-------------------------------------------------------------------------------
Assembled 195 instructions at 1065.57 instructions per second.
