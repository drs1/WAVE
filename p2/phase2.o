WindObjectFile1
File phase2.s
Symbol ADDR 549
Symbol ALL3 39
Symbol COND 429
Symbol EQ 453
Symbol GE 517
Symbol GT 533
Symbol INSTR 317
Symbol LE 501
Symbol LT 485
Symbol NE 469
Symbol NEVER 437
Symbol REGS 301
Symbol SHOP 556
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 369
Symbol WARM 560
Symbol adc 142
Symbol adcCC 220
Symbol add 134
Symbol addCC 211
Symbol adr 211
Symbol and 179
Symbol andCC 256
Symbol asr 109
Symbol bb 211
Symbol bf 211
Symbol blb 211
Symbol blf 211
Symbol branch 56
Symbol cmpCC 230
Symbol div 195
Symbol divCC 281
Symbol done 299
Symbol eor 163
Symbol eorCC 238
Symbol equal 20
Symbol fetch 4
Symbol getop 11
Symbol greate 28
Symbol gt 30
Symbol imd 56
Symbol ldm 211
Symbol ldmCC 299
Symbol ldr 211
Symbol ldrCC 299
Symbol ldu 211
Symbol lduCC 299
Symbol lesse 26
Symbol lesst 24
Symbol ls 56
Symbol lsl 103
Symbol lsr 106
Symbol maskA 30720
Symbol maskExp 7936
Symbol maskHigh4 -268435456
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 204
Symbol movCC 291
Symbol mul 187
Symbol mulCC 272
Symbol mvn 210
Symbol mvnCC 298
Symbol ne 22
Symbol never 18
Symbol noDST 32
Symbol oDST 44
Symbol oRHS 49
Symbol orr 171
Symbol orrCC 247
Symbol rim 67
Symbol ror 112
Symbol rpm 121
Symbol rsr 84
Symbol stm 211
Symbol str 211
Symbol strCC 299
Symbol stu 211
Symbol stuCC 299
Symbol sub 154
Symbol subCC 220
Symbol swi 210
Symbol swiCC 298
Symbol tstCC 265
Register ci 14
Register cond 5
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 10
Register rip 16
Register rsp 7
Register shiftC 9
Register wCCR 8
Register work0 0
Register work1 1
Register wpc 15
Memory 12d 0
Memory 12e 0
Memory 12f 0
Memory 130 0
Memory 131 0
Memory 132 0
Memory 133 0
Memory 134 0
Memory 135 0
Memory 136 0
Memory 137 0
Memory 138 0
Memory 139 0
Memory 13a 0
Memory 13b 0
Memory 13c 0
Memory 13d 86
Memory 13e 8e
Memory 13f 9a
Memory 140 0
Memory 141 a3
Memory 142 ab
Memory 143 b3
Memory 144 0
Memory 145 bb
Memory 146 0
Memory 147 c3
Memory 148 cc
Memory 149 d2
Memory 14a d2
Memory 14b d3
Memory 14c d3
Memory 14d d3
Memory 14e d3
Memory 14f d3
Memory 150 d3
Memory 151 d3
Memory 152 0
Memory 153 0
Memory 154 0
Memory 155 d3
Memory 156 d3
Memory 157 d3
Memory 158 d3
Memory 159 0
Memory 15a 0
Memory 15b 0
Memory 15c 0
Memory 15d d3
Memory 15e dc
Memory 15f dc
Memory 160 e6
Memory 161 ee
Memory 162 f7
Memory 163 100
Memory 164 109
Memory 165 110
Memory 166 0
Memory 167 119
Memory 168 123
Memory 169 12a
Memory 16a 12a
Memory 16b 12b
Memory 16c 0
Memory 16d 12b
Memory 16e 12b
Memory 16f 12b
Memory 170 12b
Memory 171 27
Memory 172 27
Memory 173 27
Memory 174 20
Memory 175 27
Memory 176 27
Memory 177 27
Memory 178 20
Memory 179 27
Memory 17a 27
Memory 17b 27
Memory 17c 2c
Memory 17d 2c
Memory 17e 31
Memory 17f 27
Memory 180 38
Memory 181 38
Memory 182 38
Memory 183 38
Memory 184 38
Memory 185 38
Memory 186 0
Memory 187 0
Memory 188 0
Memory 189 38
Memory 18a 38
Memory 18b 38
Memory 18c 38
Memory 18d 0
Memory 18e 0
Memory 18f 0
Memory 190 0
Memory 191 27
Memory 192 27
Memory 193 27
Memory 194 20
Memory 195 27
Memory 196 27
Memory 197 20
Memory 198 27
Memory 199 27
Memory 19a 0
Memory 19b 27
Memory 19c 2c
Memory 19d 2c
Memory 19e 31
Memory 19f 27
Memory 1a0 38
Memory 1a1 38
Memory 1a2 38
Memory 1a3 38
Memory 1a4 38
Memory 1a5 38
Memory 1a6 0
Memory 1a7 0
Memory 1a8 0
Memory 1a9 38
Memory 1aa 38
Memory 1ab 38
Memory 1ac 38
Memory 1ad 0
Memory 1ae 12
Memory 1af 14
Memory 1b0 16
Memory 1b1 18
Memory 1b2 1a
Memory 1b3 1c
Memory 1b4 1e
Memory 1b5 12b
Memory 1b6 12b
Memory 1b7 12b
Memory 1b8 12b
Memory 1b9 12b
Memory 1ba 12b
Memory 1bb 12b
Memory 1bc 12b
Memory 1bd 12b
Memory 1be 12b
Memory 1bf 12b
Memory 1c0 12b
Memory 1c1 12b
Memory 1c2 12b
Memory 1c3 12b
Memory 1c4 12b
Memory 1c5 12b
Memory 1c6 12b
Memory 1c7 12b
Memory 1c8 12b
Memory 1c9 b
Memory 1ca b
Memory 1cb b
Memory 1cc 12b
Memory 1cd 12b
Memory 1ce 12b
Memory 1cf 12b
Memory 1d0 12b
Memory 1d1 12b
Memory 1d2 b
Memory 1d3 b
Memory 1d4 b
Memory 1d5 b
Memory 1d6 b
Memory 1d7 b
Memory 1d8 b
Memory 1d9 12b
Memory 1da 12b
Memory 1db 12b
Memory 1dc b
Memory 1dd b
Memory 1de b
Memory 1df b
Memory 1e0 b
Memory 1e1 b
Memory 1e2 12b
Memory 1e3 12b
Memory 1e4 12b
Memory 1e5 12b
Memory 1e6 b
Memory 1e7 12b
Memory 1e8 b
Memory 1e9 12b
Memory 1ea b
Memory 1eb 12b
Memory 1ec b
Memory 1ed b
Memory 1ee 12b
Memory 1ef b
Memory 1f0 b
Memory 1f1 12b
Memory 1f2 b
Memory 1f3 12b
Memory 1f4 b
Memory 1f5 12b
Memory 1f6 b
Memory 1f7 12b
Memory 1f8 b
Memory 1f9 b
Memory 1fa b
Memory 1fb b
Memory 1fc b
Memory 1fd b
Memory 1fe 12b
Memory 1ff b
Memory 200 b
Memory 201 12b
Memory 202 b
Memory 203 b
Memory 204 b
Memory 205 b
Memory 206 12b
Memory 207 b
Memory 208 12b
Memory 209 b
Memory 20a 12b
Memory 20b b
Memory 20c 12b
Memory 20d b
Memory 20e 12b
Memory 20f b
Memory 210 12b
Memory 211 b
Memory 212 12b
Memory 213 b
Memory 214 12b
Memory 215 b
Memory 216 12b
Memory 217 b
Memory 218 12b
Memory 219 12b
Memory 21a 12b
Memory 21b 12b
Memory 21c 12b
Memory 21d 12b
Memory 21e b
Memory 21f 12b
Memory 220 12b
Memory 221 b
Memory 222 12b
Memory 223 12b
Memory 224 12b
Memory 225 38
Memory 226 38
Memory 227 38
Memory 228 38
Memory 229 43
Memory 22a 54
Memory 22b 79
Memory 22c 67
Memory 22d 6a
Memory 22e 6d
Memory 22f 70
Memory 0 40198000 22f
Memory 2 180000 6
Memory 4 49cf8000 230
Memory 6 48070000
Memory 7 c8180000 1d
Memory 9 7e480000 1ad
Memory b 49a70000
Memory c c1b80000 3
Memory e c9b80000 1a
Memory 10 4e4e8000 171
Memory 12 4e4c0000 1b5
Memory 14 4e4c0000 1c5
Memory 16 4e4c0000 1d5
Memory 18 4e4c0000 1e5
Memory 1a 4e4c0000 1f5
Memory 1c 4e4c0000 205
Memory 1e 4e4c0000 215
Memory 20 49870000
Memory 21 c9980000 f
Memory 23 81980000 f
Memory 25 8198000 b
Memory 27 49870000
Memory 28 c9980000 f
Memory 2a 81980000 f
Memory 2c 49670000
Memory 2d c9780000 13
Memory 2f 81780000 f
Memory 31 48180000 7800
Memory 33 80070000
Memory 34 c8180000 c
Memory 36 4e480000 225
Memory 38 48070000
Memory 39 80180000 1f00
Memory 3b c8180000 9
Memory 3d 49470000
Memory 3e 81580000 1ff
Memory 40 c1400000
Memory 41 4e4e8000 13d
Memory 43 49470000
Memory 44 c1580000 16
Memory 46 c9580000 1c
Memory 48 494d0000 12d
Memory 4a 49270000
Memory 4b 81380000 3f
Memory 4d 48070000
Memory 4e c0180000 14
Memory 50 c8180000 1e
Memory 52 4e480000 22c
Memory 54 49380000 f
Memory 56 81270000
Memory 57 492c8000 12d
Memory 59 49470000
Memory 5a c1580000 16
Memory 5c c9580000 1c
Memory 5e 494d0000 12d
Memory 60 48070000
Memory 61 c0180000 14
Memory 63 c8180000 1e
Memory 65 4e480000 22c
Memory 67 c1448000
Memory 68 4e4e8000 13d
Memory 6a c9448000
Memory 6b 4e4e8000 13d
Memory 6d d1448000
Memory 6e 4e4e8000 13d
Memory 70 48050000
Memory 71 48380000 20
Memory 73 a8248000
Memory 74 c0008000
Memory 75 c9448000
Memory 76 a1400000
Memory 77 4e4e8000 13d
Memory 79 48180000 f
Memory 7b 80070000
Memory 7c 49470000
Memory 7d c1580000 16
Memory 7f c9580000 1c
Memory 81 494d0000 12d
Memory 83 48080000 12d
Memory 85 b1400000
Memory 86 a14e0000 12d
Memory 88 4b650000 12d
Memory 8a a1f80000 1
Memory 8c 8198000 ffffff77
Memory 8e 481a0000
Memory 8f c8180000 2
Memory 91 c0180000 1f
Memory 93 a14e0000 12d
Memory 95 a1400000
Memory 96 4b650000 12d
Memory 98 a1f80000 1
Memory 9a 480e0000 12d
Memory 9c a8050000
Memory 9d 4b600000 12d
Memory 9f a1f80000 1
Memory a1 8198000 ffffff62
Memory a3 914e0000 12d
Memory a5 4b650000 12d
Memory a7 a1f80000 1
Memory a9 8198000 ffffff5a
Memory ab 894e0000 12d
Memory ad 4b650000 12d
Memory af a1f80000 1
Memory b1 8198000 ffffff52
Memory b3 814e0000 12d
Memory b5 4b650000 12d
Memory b7 a1f80000 1
Memory b9 8198000 ffffff4a
Memory bb b14e0000 12d
Memory bd 4b650000 12d
Memory bf a1f80000 1
Memory c1 8198000 ffffff42
Memory c3 480e0000 12d
Memory c5 b8050000
Memory c6 4b600000 12d
Memory c8 a1f80000 1
Memory ca 8198000 ffffff39
Memory cc 4b650000 12d
Memory ce a1f80000 1
Memory d0 8198000 ffffff33
Memory d2 50000
Memory d3 a14e0000 12d
Memory d5 491a0000
Memory d6 4b650000 12d
Memory d8 a1f80000 1
Memory da 8198000 ffffff29
Memory dc 480e0000 12d
Memory de a8050000
Memory df 491a0000
Memory e0 4b600000 12d
Memory e2 a1f80000 1
Memory e4 8198000 ffffff1f
Memory e6 480e0000 12d
Memory e8 a8050000
Memory e9 491a0000
Memory ea a1f80000 1
Memory ec 8198000 ffffff17
Memory ee 914e0000 12d
Memory f0 491a0000
Memory f1 4b650000 12d
Memory f3 a1f80000 1
Memory f5 8198000 ffffff0e
Memory f7 894e0000 12d
Memory f9 491a0000
Memory fa 4b650000 12d
Memory fc a1f80000 1
Memory fe 8198000 ffffff05
Memory 100 814e0000 12d
Memory 102 491a0000
Memory 103 4b650000 12d
Memory 105 a1f80000 1
Memory 107 8198000 fffffefc
Memory 109 d94e0000 12d
Memory 10b 491a0000
Memory 10c a1f80000 1
Memory 10e 8198000 fffffef5
Memory 110 b14e0000 12d
Memory 112 491a0000
Memory 113 4b650000 12d
Memory 115 a1f80000 1
Memory 117 8198000 fffffeec
Memory 119 480e0000 12d
Memory 11b b8050000
Memory 11c 491a0000
Memory 11d 4b600000 12d
Memory 11f a1f80000 1
Memory 121 8198000 fffffee2
Memory 123 4b650000 12d
Memory 125 491a0000
Memory 126 a1f80000 1
Memory 128 8198000 fffffedb
Memory 12a 50000
Memory 12b 180000 0
Source 0         lea     WARM,work0
Source 2         trap    $SysOverlay
Source 4 fetch:  mov     WARM(wpc),ci
Source 6         mov     ci, work0
Source 7         shr     $29, work0      ;high 3 condition bits in work0
Source 9         cmovg   COND(work0), rip
Source b getop:  mov     ci,op
Source c         shl     $3,op
Source e         shr     $26,op
Source 10         mov     TYPE(op), rip
Source 12 never:  mov     NEVER(wCCR),rip
Source 14 equal:  mov     EQ(wCCR),rip
Source 16 ne:     mov     NE(wCCR),rip
Source 18 lesst:  mov     LT(wCCR),rip
Source 1a lesse:  mov     LE(wCCR),rip
Source 1c greate: mov     GE(wCCR),rip
Source 1e gt:     mov     GT(wCCR),rip
Source 20 noDST:  mov     ci, lhs         ;get dst and lhs
Source 21         shr     $15, lhs
Source 23         and     $maskLow4, lhs
Source 25         jmp     oRHS
Source 27 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 28         shr     $15, lhs
Source 2a         and     $maskLow4, lhs
Source 2c oDST:   mov     ci, dst
Source 2d         shr     $19, dst
Source 2f         and     $maskLow4, dst
Source 31 oRHS:   mov     $maskA, work0
Source 33         and     ci,work0
Source 34         shr     $12, work0      ;work 0 holds the addressing mode
Source 36         mov     ADDR(work0), rip
Source 38 imd:    mov     ci, work0
Source 39         and     $maskExp, work0 ;exponent
Source 3b         shr     $9, work0
Source 3d         mov     ci, rhs
Source 3e         and     $maskValue, rhs ;value
Source 40         shl     work0, rhs      ;shifted value in rhs
Source 41         mov     INSTR(op), rip
Source 43 rim:    mov     ci, rhs
Source 44         shl     $22, rhs
Source 46         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 48         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 4a         mov     ci, shiftC
Source 4b         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 4d         mov     ci, work0
Source 4e         shl     $20, work0
Source 50         shr     $30, work0      ;work1 now has the shop
Source 52         mov     SHOP(work0),rip
Source 54 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 56         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 57         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 59         mov     ci, rhs 
Source 5a         shl     $22, rhs
Source 5c         shr     $28, rhs        ; rhs has rhs register
Source 5e         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 60         mov     ci, work0
Source 61         shl     $20, work0
Source 63         shr     $30, work0      ; work0 now has the shift op code
Source 65         mov     SHOP(work0), rip
Source 67 lsl:    shl     shiftC, rhs
Source 68         mov     INSTR(op), rip
Source 6a lsr:    shr     shiftC, rhs
Source 6b         mov     INSTR(op), rip
Source 6d asr:    sar     shiftC, rhs
Source 6e         mov     INSTR(op), rip
Source 70 ror:    mov     rhs, work0
Source 71         mov     $32, work1      
Source 73         sub     shiftC, work1   ;work1 := 32-shr
Source 74         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source 75         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source 76         add     work0, rhs
Source 77         mov     INSTR(op), rip
Source 79 rpm:    mov     $maskLow4, work0
Source 7b         and     ci, work0       ; work0 now has src reg 3
Source 7c         mov     ci, rhs
Source 7d         shl     $22, rhs
Source 7f         shr     $28, rhs        ; rhs now has src reg 2
Source 81         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 83         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 85         mul     work0, rhs
Source 86 add:    add     REGS(lhs), rhs
Source 88         mov     rhs, REGS(dst)
Source 8a         add     $1, wpc
Source 8c         jmp     fetch
Source 8e adc:    mov     ccr, work0
Source 8f         shr     $2, work0
Source 91         shl     $31, work0
Source 93         add     REGS(lhs),rhs
Source 95         add     work0, rhs
Source 96         mov     rhs,REGS(dst)
Source 98         add     $1, wpc
Source 9a sub:    mov     REGS(lhs), work0
Source 9c         sub     rhs, work0
Source 9d         mov     work0, REGS(dst)
Source 9f         add     $1, wpc
Source a1         jmp     fetch
Source a3 eor:    xor     REGS(lhs),rhs
Source a5         mov     rhs, REGS(dst)
Source a7         add     $1, wpc
Source a9         jmp     fetch
Source ab orr:    or      REGS(lhs), rhs
Source ad         mov     rhs, REGS(dst)
Source af         add     $1, wpc
Source b1         jmp     fetch
Source b3 and:    and     REGS(lhs), rhs
Source b5         mov     rhs, REGS(dst)
Source b7         add     $1, wpc
Source b9         jmp     fetch
Source bb mul:    mul     REGS(lhs), rhs
Source bd         mov     rhs, REGS(dst)
Source bf         add     $1, wpc
Source c1         jmp     fetch
Source c3 div:    mov     REGS(lhs), work0
Source c5         div     rhs, work0
Source c6         mov     work0, REGS(dst)
Source c8         add     $1, wpc
Source ca         jmp     fetch   
Source cc mov:    mov     rhs, REGS(dst)
Source ce         add     $1, wpc
Source d0         jmp     fetch
Source d2 swi:    trap    rhs
Source d3 addCC:  add     REGS(lhs), rhs
Source d5         mov     ccr,wCCR        
Source d6         mov     rhs, REGS(dst)
Source d8         add     $1, wpc
Source da         jmp     fetch
Source dc subCC:  mov     REGS(lhs), work0
Source de         sub     rhs, work0
Source df         mov     ccr,wCCR
Source e0         mov     work0, REGS(dst)
Source e2         add     $1, wpc
Source e4         jmp     fetch
Source e6 cmpCC:  mov     REGS(lhs), work0
Source e8         sub     rhs, work0
Source e9         mov     ccr, wCCR
Source ea         add     $1, wpc
Source ec         jmp     fetch
Source ee eorCC:  xor     REGS(lhs),rhs
Source f0         mov     ccr, wCCR       
Source f1         mov     rhs, REGS(dst)
Source f3         add     $1, wpc
Source f5         jmp     fetch
Source f7 orrCC:  or      REGS(lhs), rhs
Source f9         mov     ccr, wCCR       
Source fa         mov     rhs, REGS(dst)
Source fc         add     $1, wpc
Source fe         jmp     fetch
Source 100 andCC:  and     REGS(lhs), rhs
Source 102         mov     ccr, wCCR       
Source 103         mov     rhs, REGS(dst)
Source 105         add     $1, wpc
Source 107         jmp     fetch
Source 109 tstCC:  test    REGS(lhs), rhs
Source 10b         mov     ccr, wCCR
Source 10c         add     $1, wpc
Source 10e         jmp     fetch
Source 110 mulCC:  mul     REGS(lhs), rhs
Source 112         mov     ccr,wCCR        
Source 113         mov     rhs, REGS(dst)
Source 115         add     $1, wpc
Source 117         jmp     fetch
Source 119 divCC:  mov     REGS(lhs), work0
Source 11b         div     rhs, work0
Source 11c         mov     ccr,wCCR                
Source 11d         mov     work0, REGS(dst)
Source 11f         add     $1, wpc
Source 121         jmp     fetch   
Source 123 movCC:  mov     rhs, REGS(dst)
Source 125         mov     ccr,wCCR                        
Source 126         add     $1, wpc
Source 128         jmp     fetch
Source 12a swiCC:  trap    rhs
Source 12b done:   trap    $SysHalt
End
