WindObjectFile1
File phase2.s
Symbol ADDR 199
Symbol INSTR 167
Symbol REGS 151
Symbol SHOP 206
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 195
Symbol WARM 210
Symbol adc 123
Symbol add 115
Symbol adr 151
Symbol and 132
Symbol arith 15
Symbol asr 90
Symbol bb 151
Symbol bf 151
Symbol blb 151
Symbol blf 151
Symbol branch 37
Symbol cmp 132
Symbol div 140
Symbol eor 132
Symbol fetch 6
Symbol imd 37
Symbol ldm 151
Symbol ldr 151
Symbol ldu 151
Symbol ls 37
Symbol lsl 84
Symbol lsr 87
Symbol mask4 15
Symbol maskA 30720
Symbol maskExp 7936
Symbol maskShift 63
Symbol maskT 201326592
Symbol maskValue 511
Symbol mov 149
Symbol mul 132
Symbol mvn 151
Symbol orr 132
Symbol rim 48
Symbol ror 93
Symbol rpm 102
Symbol rsr 65
Symbol stm 151
Symbol str 151
Symbol stu 151
Symbol sub 123
Symbol swi 151
Symbol tst 132
Register ci 14
Register cond 8
Register dst 11
Register lhs 12
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 10
Register rip 16
Register rsp 7
Register shiftC 9
Register work0 0
Register work1 1
Register wpc 15
Memory 97 0
Memory 98 0
Memory 99 0
Memory 9a 0
Memory 9b 0
Memory 9c 0
Memory 9d 0
Memory 9e 0
Memory 9f 0
Memory a0 0
Memory a1 0
Memory a2 0
Memory a3 0
Memory a4 0
Memory a5 0
Memory a6 0
Memory a7 73
Memory a8 7b
Memory a9 7b
Memory aa 84
Memory ab 84
Memory ac 84
Memory ad 84
Memory ae 84
Memory af 84
Memory b0 0
Memory b1 8c
Memory b2 95
Memory b3 97
Memory b4 97
Memory b5 97
Memory b6 97
Memory b7 97
Memory b8 97
Memory b9 97
Memory ba 97
Memory bb 97
Memory bc 0
Memory bd 0
Memory be 0
Memory bf 97
Memory c0 97
Memory c1 97
Memory c2 97
Memory c3 f
Memory c4 f
Memory c5 25
Memory c6 25
Memory c7 25
Memory c8 25
Memory c9 25
Memory ca 25
Memory cb 30
Memory cc 41
Memory cd 66
Memory ce 54
Memory cf 57
Memory d0 5a
Memory d1 5d
Memory 0 40198000 d1
Memory 2 41198000 94
Memory 4 180000 6
Memory 6 49cf8000 d2
Memory 8 48180000 c000000
Memory a 80070000
Memory b c8180000 1f
Memory d 4e480000 c3
Memory f 49a70000
Memory 10 c1b80000 4
Memory 12 c9b80000 1b
Memory 14 48180000 7800
Memory 16 80070000
Memory 17 c8180000 c
Memory 19 49870000
Memory 1a c9980000 f
Memory 1c 81980000 f
Memory 1e 49670000
Memory 1f c9780000 13
Memory 21 81780000 f
Memory 23 4e480000 c7
Memory 25 48070000
Memory 26 80180000 1f00
Memory 28 c8180000 9
Memory 2a 49470000
Memory 2b 81580000 1ff
Memory 2d c1400000
Memory 2e 4e4e8000 a7
Memory 30 49470000
Memory 31 c1580000 16
Memory 33 c9580000 1c
Memory 35 494d0000 97
Memory 37 49270000
Memory 38 81380000 3f
Memory 3a 48070000
Memory 3b c0180000 14
Memory 3d c8180000 1e
Memory 3f 4e480000 ce
Memory 41 49380000 f
Memory 43 81270000
Memory 44 492c8000 97
Memory 46 49470000
Memory 47 c1580000 16
Memory 49 c9580000 1c
Memory 4b 494d0000 97
Memory 4d 48070000
Memory 4e c0180000 14
Memory 50 c8180000 1e
Memory 52 4e480000 ce
Memory 54 c1448000
Memory 55 4e4e8000 a7
Memory 57 c9448000
Memory 58 4e4e8000 a7
Memory 5a d1448000
Memory 5b 4e4e8000 a7
Memory 5d 48050000
Memory 5e 48380000 20
Memory 60 a8248000
Memory 61 c0008000
Memory 62 c9448000
Memory 63 a1400000
Memory 64 4e4e8000 a7
Memory 66 48180000 f
Memory 68 80070000
Memory 69 49470000
Memory 6a c1580000 16
Memory 6c c9580000 1c
Memory 6e 494d0000 97
Memory 70 48080000 97
Memory 72 b1400000
Memory 73 a14e0000 97
Memory 75 4b650000 97
Memory 77 a1f80000 1
Memory 79 8198000 ffffff8c
Memory 7b 480e0000 97
Memory 7d a8050000
Memory 7e 4b600000 97
Memory 80 a1f80000 1
Memory 82 8198000 ffffff83
Memory 84 b14e0000 97
Memory 86 4b650000 97
Memory 88 a1f80000 1
Memory 8a 8198000 ffffff7b
Memory 8c 480e0000 97
Memory 8e b8050000
Memory 8f 4b600000 97
Memory 91 a1f80000 1
Memory 93 8198000 ffffff72
Memory 95 4b650000 97
Source 0         lea     WARM,work0
Source 2         lea     REGS, cond
Source 4         trap    $SysOverlay
Source 6 fetch:  mov     WARM(wpc),ci
Source 8         mov     $maskT, work0   ;decipher type
Source a         and     ci, work0
Source b         shr     $31, work0      ;work 0 holds the type
Source d         mov     TYPE(work0), rip ;jump on type
Source f arith:  mov     ci,op
Source 10         shl     $4,op
Source 12         shr     $27,op
Source 14         mov     $maskA, work0
Source 16         and     ci,work0
Source 17         shr     $12, work0      ;work 0 holds the addressing mode
Source 19         mov     ci, lhs         ;get dst and lhs
Source 1a         shr     $15, lhs
Source 1c         and     $mask4, lhs
Source 1e         mov     ci, dst
Source 1f         shr     $19, dst
Source 21         and     $mask4, dst
Source 23         mov     ADDR(work0), rip
Source 25 imd:    mov     ci, work0
Source 26         and     $maskExp, work0 ;exponent
Source 28         shr     $9, work0
Source 2a         mov     ci, rhs
Source 2b         and     $maskValue, rhs ;value
Source 2d         shl     work0, rhs      ;shifted value in rhs
Source 2e         mov     INSTR(op), rip
Source 30 rim:    mov     ci, rhs
Source 31         shl     $22, rhs
Source 33         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 35         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 37         mov     ci, shiftC
Source 38         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 3a         mov     ci, work0
Source 3b         shl     $20, work0
Source 3d         shr     $30, work0      ;work1 now has the shop
Source 3f         mov     SHOP(work0),rip
Source 41 rsr:    mov     $mask4, shiftC  ; shiftC := 15
Source 43         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 44         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 46         mov     ci, rhs 
Source 47         shl     $22, rhs
Source 49         shr     $28, rhs        ; rhs has rhs register
Source 4b         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 4d         mov     ci, work0
Source 4e         shl     $20, work0
Source 50         shr     $30, work0      ; work0 now has the shift op code
Source 52         mov     SHOP(work0), rip
Source 54 lsl:    shl     shiftC, rhs
Source 55         mov     INSTR(op), rip
Source 57 lsr:    shr     shiftC, rhs
Source 58         mov     INSTR(op), rip
Source 5a asr:    sar     shiftC, rhs
Source 5b         mov     INSTR(op), rip
Source 5d ror:    mov     rhs, work0
Source 5e         mov     $32, work1      
Source 60         sub     shiftC, work1   ;work1 := 32-shr
Source 61         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source 62         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source 63         add     work0, rhs
Source 64         mov     INSTR(op), rip
Source 66 rpm:    mov     $mask4, work0
Source 68         and     ci, work0       ; work0 now has src reg 3
Source 69         mov     ci, rhs
Source 6a         shl     $22, rhs
Source 6c         shr     $28, rhs        ; rhs now has src reg 2
Source 6e         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 70         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 72         mul     work0, rhs
Source 73 add:    add     REGS(lhs), rhs
Source 75         mov     rhs, REGS(dst)
Source 77         add     $1, wpc
Source 79         jmp     fetch
Source 7b sub:    mov     REGS(lhs), work0
Source 7d         sub     rhs, work0
Source 7e         mov     work0, REGS(dst)
Source 80         add     $1, wpc
Source 82         jmp     fetch
Source 84 mul:    mul     REGS(lhs), rhs
Source 86         mov     rhs, REGS(dst)
Source 88         add     $1, wpc
Source 8a         jmp     fetch
Source 8c div:    mov     REGS(lhs), work0
Source 8e         div     rhs, work0
Source 8f         mov     work0, REGS(dst)
Source 91         add     $1, wpc
Source 93         jmp     fetch
Source 95 mov:    mov     rhs, REGS(dst)
End
