WindObjectFile1
File phase2.s
Symbol ADDR 154
Symbol INSTR 122
Symbol REGS 106
Symbol SHOP 161
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 150
Symbol WARM 165
Symbol adc 102
Symbol add 94
Symbol adr 106
Symbol and 106
Symbol arith 13
Symbol asr 82
Symbol bb 106
Symbol bf 106
Symbol blb 106
Symbol blf 106
Symbol branch 94
Symbol cmp 106
Symbol div 106
Symbol eor 106
Symbol fetch 4
Symbol imd 35
Symbol ldm 106
Symbol ldr 106
Symbol ldu 106
Symbol ls 94
Symbol lsl 76
Symbol lsr 79
Symbol mask4 15
Symbol maskA 30720
Symbol maskExp 7936
Symbol maskShift 63
Symbol maskT 201326592
Symbol maskValue 511
Symbol mla 106
Symbol mov 106
Symbol mul 106
Symbol mvn 106
Symbol orr 106
Symbol rim 46
Symbol ror 85
Symbol rpm 94
Symbol rsr 61
Symbol stm 106
Symbol str 106
Symbol stu 106
Symbol sub 102
Symbol swi 106
Symbol tst 106
Register ccr 4
Register ci 13
Register dst 9
Register op 11
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register reg 14
Register rhs 8
Register rip 16
Register rsp 7
Register shiftC 5
Register src 10
Register work0 1
Register work1 2
Register wpc 15
Memory 6a 0
Memory 6b 0
Memory 6c 0
Memory 6d 0
Memory 6e 0
Memory 6f 0
Memory 70 0
Memory 71 0
Memory 72 0
Memory 73 0
Memory 74 0
Memory 75 0
Memory 76 0
Memory 77 0
Memory 78 0
Memory 79 0
Memory 7a 5e
Memory 7b 66
Memory 7c 66
Memory 7d 6a
Memory 7e 6a
Memory 7f 6a
Memory 80 6a
Memory 81 6a
Memory 82 6a
Memory 83 6a
Memory 84 6a
Memory 85 6a
Memory 86 6a
Memory 87 6a
Memory 88 6a
Memory 89 6a
Memory 8a 6a
Memory 8b 6a
Memory 8c 6a
Memory 8d 6a
Memory 8e 6a
Memory 8f 0
Memory 90 0
Memory 91 0
Memory 92 6a
Memory 93 6a
Memory 94 6a
Memory 95 6a
Memory 96 d
Memory 97 d
Memory 98 5e
Memory 99 5e
Memory 9a 23
Memory 9b 23
Memory 9c 23
Memory 9d 23
Memory 9e 2e
Memory 9f 3d
Memory a0 5e
Memory a1 4c
Memory a2 4f
Memory a3 52
Memory a4 55
Memory 0 40198000 a4
Memory 2 180000 6
Memory 4 49af8000 a5
Memory 6 48380000 c000000
Memory 8 80268000
Memory 9 c8380000 1f
Memory b 4e488000 96
Memory d 49668000
Memory e c1780000 4
Memory 10 c9780000 1b
Memory 12 48380000 7800
Memory 14 80268000
Memory 15 c8380000 c
Memory 17 49468000
Memory 18 c9580000 f
Memory 1a 81580000 f
Memory 1c 49268000
Memory 1d c9380000 13
Memory 1f 81380000 f
Memory 21 4e488000 9a
Memory 23 48268000
Memory 24 80380000 1f00
Memory 26 c8380000 9
Memory 28 49068000
Memory 29 81180000 1ff
Memory 2b c1008000
Memory 2c 4e4d8000 7a
Memory 2e 49068000
Memory 2f c1180000 16
Memory 31 c9180000 1c
Memory 33 48a68000
Memory 34 80b80000 3f
Memory 36 48268000
Memory 37 c0380000 14
Memory 39 c8380000 1e
Memory 3b 4e488000 a1
Memory 3d 48b80000 f
Memory 3f 80a68000
Memory 40 49068000
Memory 41 c1180000 16
Memory 43 c9180000 1c
Memory 45 48268000
Memory 46 c0380000 14
Memory 48 c8380000 1e
Memory 4a 4e488000 a1
Memory 4c c1028000
Memory 4d 4e4d8000 7a
Memory 4f c9028000
Memory 50 4e4d8000 7a
Memory 52 d1028000
Memory 53 4e4d8000 7a
Memory 55 48240000
Memory 56 48580000 20
Memory 58 a8428000
Memory 59 c0210000
Memory 5a c9028000
Memory 5b a1008000
Memory 5c 4e4d8000 7a
Memory 5e a10d0000 6a
Memory 60 4b240000 6a
Memory 62 a1f80000 1
Memory 64 8198000 ffffff9f
Memory 66 a90d0000 6a
Memory 68 4b240000 6a
Source 0         lea     WARM,r0
Source 2         trap    $SysOverlay
Source 4 fetch:  mov     WARM(wpc),ci
Source 6         mov     $maskT, work0
Source 8         and     ci, work0
Source 9         shr     $31, work0      ;work 0 holds the type
Source b         mov     TYPE(work0), rip
Source d arith:  mov     ci,op
Source e         shl     $4,op
Source 10         shr     $27,op
Source 12         mov     $maskA, work0
Source 14         and     ci,work0
Source 15         shr     $12, work0      ;work 0 holds the addressing mode
Source 17         mov     ci, src         ;get dst and src
Source 18         shr     $15, src
Source 1a         and     $mask4, src
Source 1c         mov     ci, dst
Source 1d         shr     $19, dst
Source 1f         and     $mask4, dst
Source 21         mov     ADDR(work0), rip
Source 23 imd:    mov     ci, work0
Source 24         and     $maskExp, work0 ;exponent
Source 26         shr     $9, work0
Source 28         mov     ci, rhs
Source 29         and     $maskValue, rhs ;value
Source 2b         shl     work0, rhs      ;shifted value in rhs
Source 2c         mov     INSTR(op), rip  
Source 2e rim:    mov     ci, rhs
Source 2f         shl     $22, rhs
Source 31         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 33         mov     ci, shiftC
Source 34         and     $maskShift, shiftC      ;sc now has the shift count
Source 36         mov     ci, work0
Source 37         shl     $20, work0
Source 39         shr     $30, work0      ;work1 now has the shop
Source 3b         mov     SHOP(work0),rip
Source 3d rsr:    mov     $mask4, shiftC  ; shr := 15
Source 3f         and     ci, shiftC      ; shr := shr & ci; to get shift register
Source 40         mov     ci, rhs 
Source 41         shl     $22, rhs
Source 43         shr     $28, rhs        ; rhs has src2 register
Source 45         mov     ci, work0
Source 46         shl     $20, work0
Source 48         shr     $30, work0      ; work3 now has the shift op code
Source 4a         mov     SHOP(work0), rip
Source 4c lsl:    shl     shiftC, rhs
Source 4d         mov     INSTR(op), rip
Source 4f lsr:    shr     shiftC, rhs
Source 50         mov     INSTR(op), rip
Source 52 asr:    sar     shiftC, rhs
Source 53         mov     INSTR(op), rip
Source 55 ror:    mov     rhs, work0
Source 56         mov     $32, work1      
Source 58         sub     shiftC, work1   ;work3 := 32-shr
Source 59         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source 5a         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source 5b         add     work0, rhs
Source 5c         mov     INSTR(op), rip  
Source 5e add:    add     REGS(src), rhs
Source 60         mov     rhs, REGS(dst)
Source 62         add     $1, wpc
Source 64         jmp     fetch
Source 66 sub:    sub     REGS(src), rhs
Source 68         mov     rhs, REGS(dst)
End
