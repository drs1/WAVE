WindObjectFile1
File phase2.s
Symbol ADDR 195
Symbol INSTR 163
Symbol REGS 147
Symbol SHOP 202
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 191
Symbol WARM 206
Symbol adc 121
Symbol add 113
Symbol adr 147
Symbol and 129
Symbol arith 13
Symbol asr 86
Symbol bb 147
Symbol bf 147
Symbol blb 147
Symbol blf 147
Symbol branch 113
Symbol cmp 129
Symbol div 147
Symbol eor 129
Symbol fetch 4
Symbol imd 35
Symbol ldm 147
Symbol ldr 147
Symbol ldu 147
Symbol ls 113
Symbol lsl 80
Symbol lsr 83
Symbol mask4 15
Symbol maskA 30720
Symbol maskExp 7936
Symbol maskShift 63
Symbol maskT 201326592
Symbol maskValue 511
Symbol mla 139
Symbol mov 147
Symbol mul 129
Symbol mvn 147
Symbol orr 129
Symbol rim 46
Symbol ror 89
Symbol rpm 98
Symbol rsr 61
Symbol stm 147
Symbol str 147
Symbol stu 147
Symbol sub 121
Symbol swi 147
Symbol tst 129
Register ccr 8
Register ci 14
Register dst 11
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 10
Register rip 16
Register rsp 7
Register shiftC 9
Register src 12
Register work0 0
Register work1 1
Register wpc 15
Memory 93 0
Memory 94 0
Memory 95 0
Memory 96 0
Memory 97 0
Memory 98 0
Memory 99 0
Memory 9a 0
Memory 9b 0
Memory 9c 0
Memory 9d 0
Memory 9e 0
Memory 9f 0
Memory a0 0
Memory a1 0
Memory a2 0
Memory a3 71
Memory a4 79
Memory a5 79
Memory a6 81
Memory a7 81
Memory a8 81
Memory a9 81
Memory aa 81
Memory ab 81
Memory ac 8b
Memory ad 93
Memory ae 93
Memory af 93
Memory b0 93
Memory b1 93
Memory b2 93
Memory b3 93
Memory b4 93
Memory b5 93
Memory b6 93
Memory b7 93
Memory b8 0
Memory b9 0
Memory ba 0
Memory bb 93
Memory bc 93
Memory bd 93
Memory be 93
Memory bf d
Memory c0 d
Memory c1 71
Memory c2 71
Memory c3 23
Memory c4 23
Memory c5 23
Memory c6 23
Memory c7 2e
Memory c8 3d
Memory c9 62
Memory ca 50
Memory cb 53
Memory cc 56
Memory cd 59
Memory 0 40198000 cd
Memory 2 180000 6
Memory 4 49cf8000 ce
Memory 6 48180000 c000000
Memory 8 80070000
Memory 9 c8180000 1f
Memory b 4e480000 bf
Memory d 49a70000
Memory e c1b80000 4
Memory 10 c9b80000 1b
Memory 12 48180000 7800
Memory 14 80070000
Memory 15 c8180000 c
Memory 17 49870000
Memory 18 c9980000 f
Memory 1a 81980000 f
Memory 1c 49670000
Memory 1d c9780000 13
Memory 1f 81780000 f
Memory 21 4e480000 c3
Memory 23 48070000
Memory 24 80180000 1f00
Memory 26 c8180000 9
Memory 28 49470000
Memory 29 81580000 1ff
Memory 2b c1400000
Memory 2c 4e4e8000 a3
Memory 2e 49470000
Memory 2f c1580000 16
Memory 31 c9580000 1c
Memory 33 49270000
Memory 34 81380000 3f
Memory 36 48070000
Memory 37 c0180000 14
Memory 39 c8180000 1e
Memory 3b 4e480000 ca
Memory 3d 49380000 f
Memory 3f 81270000
Memory 40 49470000
Memory 41 c1580000 16
Memory 43 c9580000 1c
Memory 45 48070000
Memory 46 c0180000 14
Memory 48 c8180000 1e
Memory 4a 494d0000 93
Memory 4c 492c8000 93
Memory 4e 4e480000 ca
Memory 50 c1448000
Memory 51 4e4e8000 a3
Memory 53 c9448000
Memory 54 4e4e8000 a3
Memory 56 d1448000
Memory 57 4e4e8000 a3
Memory 59 48050000
Memory 5a 48380000 20
Memory 5c a8248000
Memory 5d c0008000
Memory 5e c9448000
Memory 5f a1400000
Memory 60 4e4e8000 a3
Memory 62 48180000 f
Memory 64 80070000
Memory 65 49470000
Memory 66 c1580000 16
Memory 68 c9580000 1c
Memory 6a 494d0000 93
Memory 6c 48080000 93
Memory 6e b1400000
Memory 6f 4e4e8000 a3
Memory 71 a14e0000 93
Memory 73 4b650000 93
Memory 75 a1f80000 1
Memory 77 8198000 ffffff8c
Memory 79 a94e0000 93
Memory 7b 4b650000 93
Memory 7d a1f80000 1
Memory 7f 8198000 ffffff84
Memory 81 494d0000 93
Memory 83 b14e0000 93
Memory 85 4b650000 93
Memory 87 a1f80000 1
Memory 89 8198000 ffffff7a
Memory 8b a14e0000 93
Memory 8d 4b650000 93
Memory 8f a1f80000 1
Memory 91 8198000 ffffff72
Source 0         lea     WARM,r0
Source 2         trap    $SysOverlay
Source 4 fetch:  mov     WARM(wpc),ci
Source 6         mov     $maskT, work0
Source 8         and     ci, work0
Source 9         shr     $31, work0      ;work 0 holds the type
Source b         mov     TYPE(work0), rip
Source d arith:  mov     ci,op
Source e         shl     $4,op
Source 10         shr     $27,op
Source 12         mov     $maskA, work0
Source 14         and     ci,work0
Source 15         shr     $12, work0      ;work 0 holds the addressing mode
Source 17         mov     ci, src         ;get dst and src
Source 18         shr     $15, src
Source 1a         and     $mask4, src
Source 1c         mov     ci, dst
Source 1d         shr     $19, dst
Source 1f         and     $mask4, dst
Source 21         mov     ADDR(work0), rip
Source 23 imd:    mov     ci, work0
Source 24         and     $maskExp, work0 ;exponent
Source 26         shr     $9, work0
Source 28         mov     ci, rhs
Source 29         and     $maskValue, rhs ;value
Source 2b         shl     work0, rhs      ;shifted value in rhs
Source 2c         mov     INSTR(op), rip  
Source 2e rim:    mov     ci, rhs
Source 2f         shl     $22, rhs
Source 31         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 33         mov     ci, shiftC
Source 34         and     $maskShift, shiftC      ;sc now has the shift count
Source 36         mov     ci, work0
Source 37         shl     $20, work0
Source 39         shr     $30, work0      ;work1 now has the shop
Source 3b         mov     SHOP(work0),rip
Source 3d rsr:    mov     $mask4, shiftC  ; shiftC := 15
Source 3f         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 40         mov     ci, rhs 
Source 41         shl     $22, rhs
Source 43         shr     $28, rhs        ; rhs has src2 register
Source 45         mov     ci, work0
Source 46         shl     $20, work0
Source 48         shr     $30, work0      ; work3 now has the shift op code
Source 4a         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in src reg 2
Source 4c         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the correspondent reg
Source 4e         mov     SHOP(work0), rip
Source 50 lsl:    shl     shiftC, rhs
Source 51         mov     INSTR(op), rip
Source 53 lsr:    shr     shiftC, rhs
Source 54         mov     INSTR(op), rip
Source 56 asr:    sar     shiftC, rhs
Source 57         mov     INSTR(op), rip
Source 59 ror:    mov     rhs, work0
Source 5a         mov     $32, work1      
Source 5c         sub     shiftC, work1   ;work3 := 32-shr
Source 5d         shl     work1, work0    ;work1 is low shr bits shifted (32-shr) to the left
Source 5e         shr     shiftC, rhs     ;work2 is the highest (32-shr) bits shifted shr to the right
Source 5f         add     work0, rhs
Source 60         mov     INSTR(op), rip  
Source 62 rpm:    mov     $mask4, work0
Source 64         and     ci, work0       ; work0 now has src reg 3
Source 65         mov     ci, rhs
Source 66         shl     $22, rhs
Source 68         shr     $28, rhs        ; rhs now has src reg 2
Source 6a         mov     REGS(rhs), rhs
Source 6c         mov     REGS(work0), work0
Source 6e         mul     work0, rhs
Source 6f         mov     INSTR(op), rip
Source 71 add:    add     REGS(src), rhs
Source 73         mov     rhs, REGS(dst)
Source 75         add     $1, wpc
Source 77         jmp     fetch
Source 79 sub:    sub     REGS(src), rhs
Source 7b         mov     rhs, REGS(dst)
Source 7d         add     $1, wpc
Source 7f         jmp     fetch
Source 81 mul:    mov     REGS(rhs), rhs
Source 83         mul     REGS(src), rhs
Source 85         mov     rhs, REGS(dst)
Source 87         add     $1, wpc
Source 89         jmp     fetch
Source 8b mla:    add     REGS(src), rhs
Source 8d         mov     rhs, REGS(dst)
Source 8f         add     $1, wpc
Source 91         jmp     fetch
End
