WindObjectFile1
File wave2.s
Symbol ADDR 767
Symbol ALL3 55
Symbol COND 647
Symbol EQ 671
Symbol FETCHT 535
Symbol GE 735
Symbol GT 751
Symbol INSTR 483
Symbol LDMdone 244
Symbol LE 719
Symbol LT 703
Symbol NE 687
Symbol NEVER 655
Symbol REGS 467
Symbol SHOP 774
Symbol STMdone 280
Symbol SysEntropy 5
Symbol SysGetChar 1
Symbol SysGetNum 2
Symbol SysHalt 0
Symbol SysOverlay 6
Symbol SysPLA 7
Symbol SysPutChar 3
Symbol SysPutNum 4
Symbol TYPE 587
Symbol WARM 783
Symbol adc 150
Symbol add 146
Symbol adr 429
Symbol and 178
Symbol asr 122
Symbol b 449
Symbol bl 440
Symbol cmpCC 287
Symbol div 186
Symbol eor 170
Symbol equal 36
Symbol fetch 15
Symbol fetch2 10
Symbol fetch3 9
Symbol fetch4 6
Symbol flip -1
Symbol getop 27
Symbol greate 44
Symbol gt 46
Symbol imd 72
Symbol ldm 212
Symbol ldr 326
Symbol ldu 350
Symbol lesse 42
Symbol lesst 40
Symbol lloading 237
Symbol ls 309
Symbol lsADDR 778
Symbol lshifting 225
Symbol lsl 116
Symbol lsr 119
Symbol mask23to0 16777215
Symbol maskA 30720
Symbol maskExp 15872
Symbol maskLow13 16383
Symbol maskLow4 15
Symbol maskShift 63
Symbol maskValue 511
Symbol mov 196
Symbol movCC 300
Symbol mul 182
Symbol mvn 198
Symbol ne 38
Symbol never 34
Symbol no 459
Symbol noDST 48
Symbol oDST 60
Symbol oRHS 65
Symbol orr 174
Symbol posldu 369
Symbol posstu 409
Symbol rim 82
Symbol ror 125
Symbol rpm 134
Symbol rsr 98
Symbol sloading 271
Symbol soff 453
Symbol sshifting 263
Symbol stm 248
Symbol str 338
Symbol stu 390
Symbol sub 160
Symbol swi 202
Symbol tstCC 296
Symbol wlr 481
Symbol wpc 482
Register ci 14
Register dst 11
Register lhs 10
Register next 2
Register op 13
Register r0 0
Register r1 1
Register r10 10
Register r11 11
Register r12 12
Register r13 13
Register r14 14
Register r15 15
Register r2 2
Register r3 3
Register r4 4
Register r5 5
Register r6 6
Register r7 7
Register r8 8
Register r9 9
Register rbp 6
Register rhs 14
Register rip 16
Register rsp 7
Register shiftC 9
Register temp 3
Register wCCR 8
Register work0 0
Register work1 1
Memory 1d3 0
Memory 1d4 0
Memory 1d5 0
Memory 1d6 0
Memory 1d7 0
Memory 1d8 0
Memory 1d9 0
Memory 1da 0
Memory 1db 0
Memory 1dc 0
Memory 1dd 0
Memory 1de 0
Memory 1df 0
Memory 1e0 ffffff
Memory 1e1 0
Memory 1e2 0
Memory 1e3 92
Memory 1e4 96
Memory 1e5 a0
Memory 1e7 aa
Memory 1e8 ae
Memory 1e9 b2
Memory 1eb b6
Memory 1ed ba
Memory 1ee c4
Memory 1ef c6
Memory 1f0 ca
Memory 1f1 d4
Memory 1f2 f8
Memory 1f3 146
Memory 1f4 152
Memory 1f5 15e
Memory 1f6 186
Memory 1f7 1ad
Memory 203 92
Memory 204 96
Memory 205 a0
Memory 206 11f
Memory 207 aa
Memory 208 ae
Memory 209 b2
Memory 20a 128
Memory 20b b6
Memory 20d ba
Memory 20e 12c
Memory 20f c6
Memory 210 ca
Memory 211 d4
Memory 213 146
Memory 214 152
Memory 215 15e
Memory 216 186
Memory 217 a
Memory 218 a
Memory 219 f
Memory 21b a
Memory 21c a
Memory 21d a
Memory 21f a
Memory 220 a
Memory 221 f
Memory 222 a
Memory 223 a
Memory 224 f
Memory 225 f
Memory 226 f
Memory 227 f
Memory 228 f
Memory 229 f
Memory 22a f
Memory 22b f
Memory 237 9
Memory 238 9
Memory 239 f
Memory 23a f
Memory 23b 9
Memory 23c 9
Memory 23d 9
Memory 23e 9
Memory 23f 9
Memory 241 f
Memory 242 f
Memory 243 9
Memory 244 6
Memory 245 f
Memory 247 6
Memory 248 6
Memory 249 6
Memory 24a 6
Memory 24b 37
Memory 24c 37
Memory 24d 37
Memory 24e 30
Memory 24f 37
Memory 250 37
Memory 251 37
Memory 252 30
Memory 253 37
Memory 254 37
Memory 255 37
Memory 256 3c
Memory 257 3c
Memory 258 41
Memory 259 37
Memory 25a 3c
Memory 25b 135
Memory 25c 135
Memory 25d 135
Memory 25e 135
Memory 25f 135
Memory 263 1c1
Memory 264 1c1
Memory 265 1b8
Memory 266 1b8
Memory 26b 37
Memory 26c 37
Memory 26d 37
Memory 26e 30
Memory 26f 37
Memory 270 37
Memory 271 30
Memory 272 37
Memory 273 37
Memory 275 37
Memory 276 3c
Memory 277 3c
Memory 278 41
Memory 279 37
Memory 27a 135
Memory 27b 135
Memory 27c 135
Memory 27d 135
Memory 27e 135
Memory 27f 135
Memory 283 1c1
Memory 284 1c1
Memory 285 1b8
Memory 286 1b8
Memory 287 0
Memory 288 22
Memory 289 24
Memory 28a 26
Memory 28b 28
Memory 28c 2a
Memory 28d 2c
Memory 28e 2e
Memory 28f 1cb
Memory 290 1cb
Memory 291 1cb
Memory 292 1cb
Memory 293 1cb
Memory 294 1cb
Memory 295 1cb
Memory 296 1cb
Memory 297 1cb
Memory 298 1cb
Memory 299 1cb
Memory 29a 1cb
Memory 29b 1cb
Memory 29c 1cb
Memory 29d 1cb
Memory 29e 1cb
Memory 29f 1cb
Memory 2a0 1cb
Memory 2a1 1cb
Memory 2a2 1cb
Memory 2a3 1b
Memory 2a4 1b
Memory 2a5 1b
Memory 2a6 1cb
Memory 2a7 1cb
Memory 2a8 1cb
Memory 2a9 1cb
Memory 2aa 1cb
Memory 2ab 1cb
Memory 2ac 1b
Memory 2ad 1b
Memory 2ae 1b
Memory 2af 1b
Memory 2b0 1b
Memory 2b1 1b
Memory 2b2 1b
Memory 2b3 1cb
Memory 2b4 1cb
Memory 2b5 1cb
Memory 2b6 1b
Memory 2b7 1b
Memory 2b8 1b
Memory 2b9 1b
Memory 2ba 1b
Memory 2bb 1b
Memory 2bc 1cb
Memory 2bd 1cb
Memory 2be 1cb
Memory 2bf 1cb
Memory 2c0 1b
Memory 2c1 1cb
Memory 2c2 1b
Memory 2c3 1cb
Memory 2c4 1b
Memory 2c5 1cb
Memory 2c6 1b
Memory 2c7 1b
Memory 2c8 1cb
Memory 2c9 1b
Memory 2ca 1b
Memory 2cb 1cb
Memory 2cc 1b
Memory 2cd 1cb
Memory 2ce 1b
Memory 2cf 1cb
Memory 2d0 1b
Memory 2d1 1cb
Memory 2d2 1b
Memory 2d3 1b
Memory 2d4 1b
Memory 2d5 1b
Memory 2d6 1b
Memory 2d7 1b
Memory 2d8 1cb
Memory 2d9 1b
Memory 2da 1b
Memory 2db 1cb
Memory 2dc 1b
Memory 2dd 1b
Memory 2de 1b
Memory 2df 1b
Memory 2e0 1cb
Memory 2e1 1b
Memory 2e2 1cb
Memory 2e3 1b
Memory 2e4 1cb
Memory 2e5 1b
Memory 2e6 1cb
Memory 2e7 1b
Memory 2e8 1cb
Memory 2e9 1b
Memory 2ea 1cb
Memory 2eb 1b
Memory 2ec 1cb
Memory 2ed 1b
Memory 2ee 1cb
Memory 2ef 1b
Memory 2f0 1cb
Memory 2f1 1b
Memory 2f2 1cb
Memory 2f3 1cb
Memory 2f4 1cb
Memory 2f5 1cb
Memory 2f6 1cb
Memory 2f7 1cb
Memory 2f8 1b
Memory 2f9 1cb
Memory 2fa 1cb
Memory 2fb 1b
Memory 2fc 1cb
Memory 2fd 1cb
Memory 2fe 1cb
Memory 2ff 48
Memory 300 48
Memory 301 48
Memory 302 48
Memory 303 52
Memory 304 62
Memory 305 86
Memory 306 74
Memory 307 77
Memory 308 7a
Memory 309 7d
Memory 30a 1c5
Memory 30b 1c5
Memory 30c 1c5
Memory 30d 1c5
Memory 30e 52
Memory 0 40198000 30e
Memory 2 180000 6
Memory 4 8198000 a
Memory 6 491a0000
Memory 7 8198000 7
Memory 9 491a0000
Memory a a6780000 1 1d6
Memory d 4b670000 1d3
Memory f 86780000 ffffff 1d1
Memory 12 48598000 1cf
Memory 14 49c90000 30f
Memory 16 48070000
Memory 17 c8180000 1d
Memory 19 7e480000 287
Memory 1b 49a70000
Memory 1c c1b80000 3
Memory 1e c9b80000 1a
Memory 20 4e4e8000 24b
Memory 22 4e4c0000 28f
Memory 24 4e4c0000 29f
Memory 26 4e4c0000 2af
Memory 28 4e4c0000 2bf
Memory 2a 4e4c0000 2cf
Memory 2c 4e4c0000 2df
Memory 2e 4e4c0000 2ef
Memory 30 49470000
Memory 31 c9580000 f
Memory 33 81580000 f
Memory 35 8198000 b
Memory 37 49470000
Memory 38 c9580000 f
Memory 3a 81580000 f
Memory 3c 49670000
Memory 3d c9780000 13
Memory 3f 81780000 f
Memory 41 48180000 7800
Memory 43 80070000
Memory 44 c8180000 c
Memory 46 4e480000 2ff
Memory 48 48070000
Memory 49 80180000 3e00
Memory 4b c8180000 9
Memory 4d 81d80000 1ff
Memory 4f c1c00000
Memory 50 4e4e8000 1e3
Memory 52 49270000
Memory 53 81380000 3f
Memory 55 48070000
Memory 56 c0180000 14
Memory 58 c8180000 1e
Memory 5a c1d80000 16
Memory 5c c9d80000 1c
Memory 5e 49cf0000 1d3
Memory 60 4e480000 306
Memory 62 49380000 f
Memory 64 81270000
Memory 65 492c8000 1d3
Memory 67 48070000
Memory 68 c0180000 14
Memory 6a c8180000 1e
Memory 6c c1d80000 16
Memory 6e c9d80000 1c
Memory 70 49cf0000 1d3
Memory 72 4e480000 306
Memory 74 c1c48000
Memory 75 4e4e8000 1e3
Memory 77 c9c48000
Memory 78 4e4e8000 1e3
Memory 7a d1c48000
Memory 7b 4e4e8000 1e3
Memory 7d 48070000
Memory 7e 48380000 20
Memory 80 a8248000
Memory 81 c0008000
Memory 82 c9c48000
Memory 83 a1c00000
Memory 84 4e4e8000 1e3
Memory 86 48180000 f
Memory 88 80070000
Memory 89 c1d80000 16
Memory 8b c9d80000 1c
Memory 8d 49cf0000 1d3
Memory 8f 48080000 1d3
Memory 91 b1c00000
Memory 92 a1cd0000 1d3
Memory 94 4e4e8000 217
Memory 96 48040000
Memory 97 c8180000 2
Memory 99 c0180000 1f
Memory 9b a1cd0000 1d3
Memory 9d a1c00000
Memory 9e 4e4e8000 217
Memory a0 480d0000 1d3
Memory a2 a8070000
Memory a3 a6780000 1 13d
Memory a6 4b600000 1d3
Memory a8 4e4e8000 217
Memory aa 91cd0000 1d3
Memory ac 4e4e8000 217
Memory ae 89cd0000 1d3
Memory b0 4e4e8000 217
Memory b2 81cd0000 1d3
Memory b4 4e4e8000 217
Memory b6 b1cd0000 1d3
Memory b8 4e4e8000 217
Memory ba 480d0000 1d3
Memory bc b8070000
Memory bd a6780000 1 123
Memory c0 4b600000 1d3
Memory c2 4e4e8000 217
Memory c4 4e4e8000 217
Memory c6 91d80000 ffffffff
Memory c8 4e4e8000 217
Memory ca 48198000 108
Memory cc 70000
Memory cd a6780000 1 113
Memory d0 4e600000 102
Memory d2 4e4e8000 217
Memory d4 494d8000 1d3
Memory d6 a6780000 1 10a
Memory d9 81580000 ffffff
Memory db 48180000 0
Memory dd d9d80000 1
Memory df 28198000 d
Memory e1 a0180000 1
Memory e3 c9d80000 1
Memory e5 20198000 e
Memory e7 d9d80000 1
Memory e9 28198000 3
Memory eb 8198000 fffffff5
Memory ed 4a0d0000 30f 1d3
Memory f0 a1580000 1
Memory f2 8198000 ffffffee
Memory f4 4b650000 1d3
Memory f6 4e4e8000 217
Memory f8 48040000
Memory f9 c0180000 18
Memory fb 8e600000 e6
Memory fd 494d8000 1d3
Memory ff 81580000 ffffff
Memory 101 48180000 f
Memory 103 c1d80000 10
Memory 105 10198000 9
Memory 107 a8180000 1
Memory 109 c1d80000 1
Memory 10b 38198000 fffffffb
Memory 10d 20198000 a
Memory 10f a9580000 1
Memory 111 4b480000 1d3 30f
Memory 114 99d80000 0
Memory 116 28198000 fffffff0
Memory 118 a6780000 1 c8
Memory 11b 4b650000 1d3
Memory 11d 4e4e8000 217
Memory 11f 480d0000 1d3
Memory 121 a6780000 1 bf
Memory 124 a8070000
Memory 125 491a0000
Memory 126 8198000 fffffee8
Memory 128 d9cd0000 1d3
Memory 12a 8198000 fffffede
Memory 12c 4b670000 1d3
Memory 12e a6780000 1 b2
Memory 131 81c70000
Memory 132 491a0000
Memory 133 8198000 fffffedb
Memory 135 49470000
Memory 136 c9580000 f
Memory 138 81580000 f
Memory 13a 49670000
Memory 13b c9780000 13
Memory 13d 81780000 f
Memory 13f 48180000 7800
Memory 141 80070000
Memory 142 c8180000 c
Memory 144 4e480000 30a
Memory 146 a1cd0000 1d3
Memory 148 81d80000 ffffff
Memory 14a 4b6f0000 30f 1d3
Memory 14d a6780000 1 93
Memory 150 8198000 fffffebe
Memory 152 a1cd0000 1d3
Memory 154 81d80000 ffffff
Memory 156 4bcd8000 1d3 30f
Memory 159 a6780000 1 87
Memory 15c 8198000 fffffeb2
Memory 15e 30198000 12
Memory 160 a1cd0000 1d3
Memory 162 81d80000 ffffff
Memory 164 a6780000 1 7c
Memory 167 4b6f0000 30f 1d3
Memory 16a 4b470000 1d3
Memory 16c 836d8000 1d3 1d3
Memory 16f 4e4e8000 217
Memory 171 480d0000 1d3
Memory 173 80180000 ffffff
Memory 175 a1cd0000 1d3
Memory 177 a6780000 1 69
Memory 17a 81d80000 ffffff
Memory 17c 4b470000 1d3
Memory 17e 4b680000 30f 1d3
Memory 181 836d8000 1d3 1d3
Memory 184 4e4e8000 217
Memory 186 30198000 12
Memory 188 a1cd0000 1d3
Memory 18a 81d80000 ffffff
Memory 18c 4bcd8000 1d3 30f
Memory 18f a6780000 1 51
Memory 192 4b470000 1d3
Memory 194 83cf0000 30f 30f
Memory 197 4e4e8000 217
Memory 199 480d0000 1d3
Memory 19b 80180000 ffffff
Memory 19d 4a0d8000 1d3 30f
Memory 1a0 a6780000 1 40
Memory 1a3 a1c00000
Memory 1a4 81d80000 ffffff
Memory 1a6 4b470000 1d3
Memory 1a8 83cf0000 30f 30f
Memory 1ab 4e4e8000 217
Memory 1ad a1cd0000 1d3
Memory 1af 81d80000 ffffff
Memory 1b1 a6780000 1 2f
Memory 1b4 4b670000 1d3
Memory 1b6 4e4e8000 217
Memory 1b8 4e798000 29 27
Memory 1bb a6780000 1 24
Memory 1be 86780000 ffffff 21
Memory 1c1 a6670000 20
Memory 1c3 8198000 fffffe4b
Memory 1c5 c1d80000 12
Memory 1c7 d1d80000 12
Memory 1c9 4e4e8000 1e3
Memory 1cb a6780000 1 15
Memory 1ce 86780000 ffffff 12
Memory 1d1 8198000 fffffe3d
Source 0         lea     WARM, work0
Source 2         trap    $SysOverlay
Source 4         jmp     fetch
Source 6 fetch4: mov     ccr,wCCR
Source 7         jmp     fetch
Source 9 fetch3: mov     ccr,wCCR        ;--------------------TOP-------------------;
Source a fetch2: add     $1, wpc
Source d         mov     rhs, REGS(dst)  ;--------------------TOP-------------------;
Source f fetch:  and     $mask23to0, wpc
Source 12         mov     wpc, next
Source 14         mov     WARM(next),ci
Source 16         mov     ci, work0
Source 17         shr     $29, work0      ;high 3 condition bits in work0
Source 19         cmovg   COND(work0), rip
Source 1b getop:  mov     ci,op
Source 1c         shl     $3,op
Source 1e         shr     $26,op
Source 20         mov     TYPE(op), rip
Source 22 never:  mov     NEVER(wCCR),rip
Source 24 equal:  mov     EQ(wCCR),rip
Source 26 ne:     mov     NE(wCCR),rip
Source 28 lesst:  mov     LT(wCCR),rip
Source 2a lesse:  mov     LE(wCCR),rip
Source 2c greate: mov     GE(wCCR),rip
Source 2e gt:     mov     GT(wCCR),rip
Source 30 noDST:  mov     ci, lhs         
Source 31         shr     $15, lhs
Source 33         and     $maskLow4, lhs
Source 35         jmp     oRHS
Source 37 ALL3:   mov     ci, lhs         ;get dst and lhs
Source 38         shr     $15, lhs
Source 3a         and     $maskLow4, lhs
Source 3c oDST:   mov     ci, dst
Source 3d         shr     $19, dst
Source 3f         and     $maskLow4, dst
Source 41 oRHS:   mov     $maskA, work0
Source 43         and     ci,work0
Source 44         shr     $12, work0      ;work 0 holds the addressing mode
Source 46         mov     ADDR(work0), rip
Source 48 imd:    mov     ci, work0
Source 49         and     $maskExp, work0 ;exponent
Source 4b         shr     $9, work0
Source 4d         and     $maskValue, rhs ;value
Source 4f         shl     work0, rhs      ;shifted value in rhs
Source 50         mov     INSTR(op), rip
Source 52 rim:    mov     ci, shiftC
Source 53         and     $maskShift, shiftC      ;shift count has the bits number to shift
Source 55         mov     ci, work0
Source 56         shl     $20, work0
Source 58         shr     $30, work0      ;work0 now has the shop
Source 5a         shl     $22, rhs
Source 5c         shr     $28, rhs        ;now we have src reg 2 in rhs
Source 5e         mov     REGS(rhs), rhs  ;rhs now has the value that was in register number rhs
Source 60         mov     SHOP(work0), rip
Source 62 rsr:    mov     $maskLow4, shiftC       ; shiftC := 15
Source 64         and     ci, shiftC      ; shiftC := shiftC & ci; to get shift register
Source 65         mov     REGS(shiftC), shiftC ; shiftC now has whatever was stored in the 
Source 67         mov     ci, work0
Source 68         shl     $20, work0
Source 6a         shr     $30, work0      ; work0 now has the shift op code
Source 6c         shl     $22, rhs
Source 6e         shr     $28, rhs        ; rhs has rhs register
Source 70         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in rhs (memory)
Source 72         mov     SHOP(work0), rip
Source 74 lsl:    shl     shiftC, rhs
Source 75         mov     INSTR(op), rip
Source 77 lsr:    shr     shiftC, rhs
Source 78         mov     INSTR(op), rip
Source 7a asr:    sar     shiftC, rhs
Source 7b         mov     INSTR(op), rip
Source 7d ror:    mov     rhs, work0
Source 7e         mov     $32, work1      
Source 80         sub     shiftC, work1   ;work0 := 32-shr
Source 81         shl     work1, work0    ;work0 is low shr bits shifted (32-shr) to the left
Source 82         shr     shiftC, rhs     ;work1 is the highest (32-shr) bits shifted shr to the right
Source 83         add     work0, rhs
Source 84         mov     INSTR(op), rip
Source 86 rpm:    mov     $maskLow4, work0
Source 88         and     ci, work0       ;work0 now has src reg 3
Source 89         shl     $22, rhs
Source 8b         shr     $28, rhs        ; rhs now has src reg 2
Source 8d         mov     REGS(rhs), rhs  ; rhs now has whatever was stored in the correspondent register
Source 8f         mov     REGS(work0), work0 ;work0 now has whatever was stored in the correspondent register
Source 91         mul     work0, rhs
Source 92 add:    add     REGS(lhs), rhs
Source 94         mov     FETCHT(op), rip
Source 96 adc:    mov     wCCR, work0
Source 97         shr     $2, work0
Source 99         shl     $31, work0
Source 9b         add     REGS(lhs), rhs
Source 9d         add     work0, rhs
Source 9e         mov     FETCHT(op), rip
Source a0 sub:    mov     REGS(lhs), work0
Source a2         sub     rhs, work0
Source a3         add     $1, wpc
Source a6         mov     work0, REGS(dst)
Source a8         mov     FETCHT(op), rip
Source aa eor:    xor     REGS(lhs), rhs
Source ac         mov     FETCHT(op), rip
Source ae orr:    or      REGS(lhs), rhs
Source b0         mov     FETCHT(op), rip
Source b2 and:    and     REGS(lhs), rhs
Source b4         mov     FETCHT(op), rip
Source b6 mul:    mul     REGS(lhs), rhs
Source b8         mov     FETCHT(op), rip
Source ba div:    mov     REGS(lhs), work0
Source bc         div     rhs, work0
Source bd         add     $1, wpc
Source c0         mov     work0, REGS(dst)
Source c2         mov     FETCHT(op), rip
Source c4 mov:    mov     FETCHT(op), rip
Source c6 mvn:    xor     $flip, rhs
Source c8         mov     FETCHT(op), rip
Source ca swi:    mov     REGS, work0
Source cc         trap    rhs
Source cd         add     $1, wpc
Source d0         mov     work0, REGS
Source d2         mov     FETCHT(op), rip
Source d4 ldm:    mov     REGS(dst), lhs
Source d6         add     $1, wpc
Source d9         and     $mask23to0, lhs ;lhs is base register
Source db         mov     $0, work0       ;work0 holds reg number
Source dd         test    $1, rhs
Source df         jne     lloading
Source e1         add     $1, work0
Source e3         shr     $1, rhs
Source e5         je      LDMdone
Source e7         test    $1, rhs
Source e9         jne     lloading
Source eb         jmp     lshifting
Source ed         mov     WARM(lhs), REGS(work0)
Source f0         add     $1, lhs
Source f2         jmp     lshifting
Source f4         mov     lhs, REGS(dst)
Source f6         mov     FETCHT(op), rip
Source f8 stm:    mov     wCCR, work0
Source f9         shl     $24, work0
Source fb         or      work0, wpc
Source fd         mov     REGS(dst), lhs  ;lhs now has the value stored in base register
Source ff         and     $mask23to0, lhs ;mask low 24 bits for wraparound
Source 101         mov     $15, work0      ;work0 holds register number
Source 103         shl     $16, rhs
Source 105         jl      sloading
Source 107         sub     $1, work0       ;
Source 109         shl     $1, rhs         
Source 10b         jg      sshifting       ;is the next bit set?
Source 10d         je      STMdone
Source 10f         sub     $1, lhs                         
Source 111         mov     REGS(work0), WARM(lhs)
Source 114         cmp     $0, rhs
Source 116         jne     sshifting
Source 118         add     $1, wpc
Source 11b         mov     lhs, REGS(dst)
Source 11d         mov     FETCHT(op), rip
Source 11f cmpCC:  mov     REGS(lhs), work0
Source 121         add     $1, wpc 
Source 124         sub     rhs, work0
Source 125         mov     ccr, wCCR
Source 126         jmp     fetch
Source 128 tstCC:  test    REGS(lhs), rhs
Source 12a         jmp     fetch3
Source 12c movCC:  mov     rhs, REGS(dst)
Source 12e         add     $1, wpc 
Source 131         and     rhs, rhs
Source 132         mov     ccr, wCCR
Source 133         jmp     fetch
Source 135 ls:     mov     ci, lhs         ;get dst and base registers, here base is lhs
Source 136         shr     $15, lhs
Source 138         and     $maskLow4, lhs  ;lhs now has base register in it
Source 13a         mov     ci, dst
Source 13b         shr     $19, dst
Source 13d         and     $maskLow4, dst  ;dst now has dst register
Source 13f         mov     $maskA, work0
Source 141         and     ci, work0
Source 142         shr     $12, work0      ;work0 now has addressing mode
Source 144         mov     lsADDR(work0), rip
Source 146 ldr:    add     REGS(lhs), rhs          ;ADDITION, might be able to do this in the preparation so we dont have to type it a bunch of times
Source 148         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 14a         mov     WARM(rhs), REGS(dst)
Source 14d         add     $1, wpc                 ;changed WARM(lhs, rhs) to WARM(rhs)
Source 150         jmp     fetch
Source 152 str:    add     REGS(lhs), rhs          ;ADDITION
Source 154         and     $mask23to0, rhs         ;ADDITION: RHS now has the masked address, should only need to do WARM(rhs) now
Source 156         mov     REGS(dst), WARM(rhs)    ;CHANGE, we had WARM(rhs,dst)
Source 159         add     $1, wpc
Source 15c         jmp     fetch
Source 15e ldu:    jge     posldu
Source 160         add     REGS(lhs), rhs          ;ADDITION
Source 162         and     $mask23to0, rhs
Source 164         add     $1, wpc                 ;ADDITION:Masking, rhs now has the modified address
Source 167         mov     WARM(rhs), REGS(dst)    ;CHANGE
Source 16a         mov     rhs, REGS(lhs)  
Source 16c         and     REGS(dst), REGS(dst)
Source 16f         mov     FETCHT(op), rip
Source 171 posldu: mov     REGS(lhs), work0
Source 173         and     $mask23to0, work0
Source 175         add     REGS(lhs), rhs
Source 177         add     $1, wpc
Source 17a         and     $mask23to0, rhs
Source 17c         mov     rhs, REGS(lhs)
Source 17e         mov     WARM(work0),REGS(dst)
Source 181         and     REGS(dst),REGS(dst)
Source 184         mov     FETCHT(op), rip         ;this was fetch2 i dont know why
Source 186 stu:    jge     posstu
Source 188         add     REGS(lhs), rhs
Source 18a         and     $mask23to0, rhs
Source 18c         mov     REGS(dst), WARM(rhs)
Source 18f         add     $1, wpc
Source 192         mov     rhs, REGS(lhs)
Source 194         and     WARM(rhs),WARM(rhs)
Source 197         mov     FETCHT(op), rip
Source 199 posstu: mov     REGS(lhs), work0
Source 19b         and     $mask23to0, work0 ;warm has effective address
Source 19d         mov     REGS(dst), WARM(work0)
Source 1a0         add     $1, wpc
Source 1a3         add     work0, rhs
Source 1a4         and     $mask23to0, rhs
Source 1a6         mov     rhs, REGS(lhs)
Source 1a8         and     WARM(rhs),WARM(rhs)
Source 1ab         mov     FETCHT(op), rip 
Source 1ad adr:    add     REGS(lhs), rhs
Source 1af         and     $mask23to0, rhs 
Source 1b1         add     $1, wpc
Source 1b4         mov     rhs, REGS(dst)
Source 1b6         mov     FETCHT(op), rip
Source 1b8 bl:     mov     wpc, wlr
Source 1bb         add     $1, wlr
Source 1be         and     $mask23to0, wlr
Source 1c1 b:      add     ci, wpc
Source 1c3         jmp     fetch
Source 1c5 soff:   shl     $18, rhs
Source 1c7         sar     $18, rhs        ; rhs now has the signed offset from base register
Source 1c9         mov     INSTR(op), rip
Source 1cb no:     add     $1, wpc
Source 1ce         and     $mask23to0, wpc
Source 1d1         jmp     fetch
End
